# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MEDCouplingClient', [dirname(__file__)])
        except ImportError:
            import _MEDCouplingClient
            return _MEDCouplingClient
        if fp is not None:
            try:
                _mod = imp.load_module('_MEDCouplingClient', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MEDCouplingClient = swig_import_helper()
    del swig_import_helper
else:
    import _MEDCouplingClient
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingClient.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _MEDCouplingClient.SwigPyIterator_value(self)
    def incr(self, n = 1): return _MEDCouplingClient.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _MEDCouplingClient.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _MEDCouplingClient.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _MEDCouplingClient.SwigPyIterator_equal(self, *args)
    def copy(self): return _MEDCouplingClient.SwigPyIterator_copy(self)
    def next(self): return _MEDCouplingClient.SwigPyIterator_next(self)
    def __next__(self): return _MEDCouplingClient.SwigPyIterator___next__(self)
    def previous(self): return _MEDCouplingClient.SwigPyIterator_previous(self)
    def advance(self, *args): return _MEDCouplingClient.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _MEDCouplingClient.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _MEDCouplingClient.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _MEDCouplingClient.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _MEDCouplingClient.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _MEDCouplingClient.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _MEDCouplingClient.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _MEDCouplingClient.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr
    def iterator(self): return _MEDCouplingClient.ivec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MEDCouplingClient.ivec___nonzero__(self)
    def __bool__(self): return _MEDCouplingClient.ivec___bool__(self)
    def __len__(self): return _MEDCouplingClient.ivec___len__(self)
    def pop(self): return _MEDCouplingClient.ivec_pop(self)
    def __getslice__(self, *args): return _MEDCouplingClient.ivec___getslice__(self, *args)
    def __setslice__(self, *args): return _MEDCouplingClient.ivec___setslice__(self, *args)
    def __delslice__(self, *args): return _MEDCouplingClient.ivec___delslice__(self, *args)
    def __delitem__(self, *args): return _MEDCouplingClient.ivec___delitem__(self, *args)
    def __getitem__(self, *args): return _MEDCouplingClient.ivec___getitem__(self, *args)
    def __setitem__(self, *args): return _MEDCouplingClient.ivec___setitem__(self, *args)
    def append(self, *args): return _MEDCouplingClient.ivec_append(self, *args)
    def empty(self): return _MEDCouplingClient.ivec_empty(self)
    def size(self): return _MEDCouplingClient.ivec_size(self)
    def clear(self): return _MEDCouplingClient.ivec_clear(self)
    def swap(self, *args): return _MEDCouplingClient.ivec_swap(self, *args)
    def get_allocator(self): return _MEDCouplingClient.ivec_get_allocator(self)
    def begin(self): return _MEDCouplingClient.ivec_begin(self)
    def end(self): return _MEDCouplingClient.ivec_end(self)
    def rbegin(self): return _MEDCouplingClient.ivec_rbegin(self)
    def rend(self): return _MEDCouplingClient.ivec_rend(self)
    def pop_back(self): return _MEDCouplingClient.ivec_pop_back(self)
    def erase(self, *args): return _MEDCouplingClient.ivec_erase(self, *args)
    def __init__(self, *args): 
        this = _MEDCouplingClient.new_ivec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MEDCouplingClient.ivec_push_back(self, *args)
    def front(self): return _MEDCouplingClient.ivec_front(self)
    def back(self): return _MEDCouplingClient.ivec_back(self)
    def assign(self, *args): return _MEDCouplingClient.ivec_assign(self, *args)
    def resize(self, *args): return _MEDCouplingClient.ivec_resize(self, *args)
    def insert(self, *args): return _MEDCouplingClient.ivec_insert(self, *args)
    def reserve(self, *args): return _MEDCouplingClient.ivec_reserve(self, *args)
    def capacity(self): return _MEDCouplingClient.ivec_capacity(self)
    __swig_destroy__ = _MEDCouplingClient.delete_ivec
    __del__ = lambda self : None;
ivec_swigregister = _MEDCouplingClient.ivec_swigregister
ivec_swigregister(ivec)

class dvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvec, name)
    __repr__ = _swig_repr
    def iterator(self): return _MEDCouplingClient.dvec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MEDCouplingClient.dvec___nonzero__(self)
    def __bool__(self): return _MEDCouplingClient.dvec___bool__(self)
    def __len__(self): return _MEDCouplingClient.dvec___len__(self)
    def pop(self): return _MEDCouplingClient.dvec_pop(self)
    def __getslice__(self, *args): return _MEDCouplingClient.dvec___getslice__(self, *args)
    def __setslice__(self, *args): return _MEDCouplingClient.dvec___setslice__(self, *args)
    def __delslice__(self, *args): return _MEDCouplingClient.dvec___delslice__(self, *args)
    def __delitem__(self, *args): return _MEDCouplingClient.dvec___delitem__(self, *args)
    def __getitem__(self, *args): return _MEDCouplingClient.dvec___getitem__(self, *args)
    def __setitem__(self, *args): return _MEDCouplingClient.dvec___setitem__(self, *args)
    def append(self, *args): return _MEDCouplingClient.dvec_append(self, *args)
    def empty(self): return _MEDCouplingClient.dvec_empty(self)
    def size(self): return _MEDCouplingClient.dvec_size(self)
    def clear(self): return _MEDCouplingClient.dvec_clear(self)
    def swap(self, *args): return _MEDCouplingClient.dvec_swap(self, *args)
    def get_allocator(self): return _MEDCouplingClient.dvec_get_allocator(self)
    def begin(self): return _MEDCouplingClient.dvec_begin(self)
    def end(self): return _MEDCouplingClient.dvec_end(self)
    def rbegin(self): return _MEDCouplingClient.dvec_rbegin(self)
    def rend(self): return _MEDCouplingClient.dvec_rend(self)
    def pop_back(self): return _MEDCouplingClient.dvec_pop_back(self)
    def erase(self, *args): return _MEDCouplingClient.dvec_erase(self, *args)
    def __init__(self, *args): 
        this = _MEDCouplingClient.new_dvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MEDCouplingClient.dvec_push_back(self, *args)
    def front(self): return _MEDCouplingClient.dvec_front(self)
    def back(self): return _MEDCouplingClient.dvec_back(self)
    def assign(self, *args): return _MEDCouplingClient.dvec_assign(self, *args)
    def resize(self, *args): return _MEDCouplingClient.dvec_resize(self, *args)
    def insert(self, *args): return _MEDCouplingClient.dvec_insert(self, *args)
    def reserve(self, *args): return _MEDCouplingClient.dvec_reserve(self, *args)
    def capacity(self): return _MEDCouplingClient.dvec_capacity(self)
    __swig_destroy__ = _MEDCouplingClient.delete_dvec
    __del__ = lambda self : None;
dvec_swigregister = _MEDCouplingClient.dvec_swigregister
dvec_swigregister(dvec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr
    def iterator(self): return _MEDCouplingClient.svec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MEDCouplingClient.svec___nonzero__(self)
    def __bool__(self): return _MEDCouplingClient.svec___bool__(self)
    def __len__(self): return _MEDCouplingClient.svec___len__(self)
    def pop(self): return _MEDCouplingClient.svec_pop(self)
    def __getslice__(self, *args): return _MEDCouplingClient.svec___getslice__(self, *args)
    def __setslice__(self, *args): return _MEDCouplingClient.svec___setslice__(self, *args)
    def __delslice__(self, *args): return _MEDCouplingClient.svec___delslice__(self, *args)
    def __delitem__(self, *args): return _MEDCouplingClient.svec___delitem__(self, *args)
    def __getitem__(self, *args): return _MEDCouplingClient.svec___getitem__(self, *args)
    def __setitem__(self, *args): return _MEDCouplingClient.svec___setitem__(self, *args)
    def append(self, *args): return _MEDCouplingClient.svec_append(self, *args)
    def empty(self): return _MEDCouplingClient.svec_empty(self)
    def size(self): return _MEDCouplingClient.svec_size(self)
    def clear(self): return _MEDCouplingClient.svec_clear(self)
    def swap(self, *args): return _MEDCouplingClient.svec_swap(self, *args)
    def get_allocator(self): return _MEDCouplingClient.svec_get_allocator(self)
    def begin(self): return _MEDCouplingClient.svec_begin(self)
    def end(self): return _MEDCouplingClient.svec_end(self)
    def rbegin(self): return _MEDCouplingClient.svec_rbegin(self)
    def rend(self): return _MEDCouplingClient.svec_rend(self)
    def pop_back(self): return _MEDCouplingClient.svec_pop_back(self)
    def erase(self, *args): return _MEDCouplingClient.svec_erase(self, *args)
    def __init__(self, *args): 
        this = _MEDCouplingClient.new_svec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MEDCouplingClient.svec_push_back(self, *args)
    def front(self): return _MEDCouplingClient.svec_front(self)
    def back(self): return _MEDCouplingClient.svec_back(self)
    def assign(self, *args): return _MEDCouplingClient.svec_assign(self, *args)
    def resize(self, *args): return _MEDCouplingClient.svec_resize(self, *args)
    def insert(self, *args): return _MEDCouplingClient.svec_insert(self, *args)
    def reserve(self, *args): return _MEDCouplingClient.svec_reserve(self, *args)
    def capacity(self): return _MEDCouplingClient.svec_capacity(self)
    __swig_destroy__ = _MEDCouplingClient.delete_svec
    __del__ = lambda self : None;
svec_swigregister = _MEDCouplingClient.svec_swigregister
svec_swigregister(svec)

class InterpKernelException(Exception):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpKernelException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpKernelException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char what) -> InterpKernelException

        1
        """
        this = _MEDCouplingClient.new_InterpKernelException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingClient.delete_InterpKernelException
    __del__ = lambda self : None;
    def what(self):
        """
        what(self) -> char

        1
        """
        return _MEDCouplingClient.InterpKernelException_what(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.InterpKernelException___str__(self)

InterpKernelException_swigregister = _MEDCouplingClient.InterpKernelException_swigregister
InterpKernelException_swigregister(InterpKernelException)

class TimeLabel(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeLabel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def assign(self, *args):
        """
        assign(self, TimeLabel other) -> TimeLabel

        1
        """
        return _MEDCouplingClient.TimeLabel_assign(self, *args)

    def declareAsNew(self):
        """
        declareAsNew(self)

        1
        """
        return _MEDCouplingClient.TimeLabel_declareAsNew(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.TimeLabel_updateTime(self)

    def getTimeOfThis(self):
        """
        getTimeOfThis(self) -> unsigned int

        1
        """
        return _MEDCouplingClient.TimeLabel_getTimeOfThis(self)

TimeLabel_swigregister = _MEDCouplingClient.TimeLabel_swigregister
TimeLabel_swigregister(TimeLabel)

C_DEALLOC = _MEDCouplingClient.C_DEALLOC
CPP_DEALLOC = _MEDCouplingClient.CPP_DEALLOC
ON_CELLS = _MEDCouplingClient.ON_CELLS
ON_NODES = _MEDCouplingClient.ON_NODES
ON_GAUSS_PT = _MEDCouplingClient.ON_GAUSS_PT
ON_GAUSS_NE = _MEDCouplingClient.ON_GAUSS_NE
ON_NODES_KR = _MEDCouplingClient.ON_NODES_KR
NO_TIME = _MEDCouplingClient.NO_TIME
ONE_TIME = _MEDCouplingClient.ONE_TIME
LINEAR_TIME = _MEDCouplingClient.LINEAR_TIME
CONST_ON_TIME_INTERVAL = _MEDCouplingClient.CONST_ON_TIME_INTERVAL

def MEDCouplingVersionStr():
  """
    MEDCouplingVersionStr() -> char

    1
    """
  return _MEDCouplingClient.MEDCouplingVersionStr()

def MEDCouplingVersion():
  """
    MEDCouplingVersion() -> int

    1
    """
  return _MEDCouplingClient.MEDCouplingVersion()
class RefCountObject(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCountObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefCountObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def incrRef(self):
        """
        incrRef(self)

        1
        """
        return _MEDCouplingClient.RefCountObject_incrRef(self)

    def getHiddenCppPointer(self):
        """
        getHiddenCppPointer(self) -> string

        1
        """
        return _MEDCouplingClient.RefCountObject_getHiddenCppPointer(self)

RefCountObject_swigregister = _MEDCouplingClient.RefCountObject_swigregister
RefCountObject_swigregister(RefCountObject)

UNSTRUCTURED = _MEDCouplingClient.UNSTRUCTURED
UNSTRUCTURED_DESC = _MEDCouplingClient.UNSTRUCTURED_DESC
CARTESIAN = _MEDCouplingClient.CARTESIAN
EXTRUDED = _MEDCouplingClient.EXTRUDED
class MEDCouplingMesh(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_setName(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getName(self)

    def setDescription(self, *args):
        """
        setDescription(self, char descr)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_setDescription(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getDescription(self)

    def setTime(self, *args):
        """
        setTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_setTime(self, *args)

    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getTimeUnit(self)

    def getType(self):
        """
        getType(self) -> MEDCouplingMeshType

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getType(self)

    def isStructured(self):
        """
        isStructured(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_isStructured(self)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_deepCpy(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_isEqualWithoutConsideringStr(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingMesh other)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_copyTinyStringsFrom(self, *args)

    def copyTinyInfoFrom(self, *args):
        """
        copyTinyInfoFrom(self, MEDCouplingMesh other)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_copyTinyInfoFrom(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_checkCoherency(self)

    def checkCoherency1(self, eps = 1e-12):
        """
        checkCoherency1(self, double eps = 1e-12)
        checkCoherency1(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_checkCoherency1(self, eps)

    def checkCoherency2(self, eps = 1e-12):
        """
        checkCoherency2(self, double eps = 1e-12)
        checkCoherency2(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_checkCoherency2(self, eps)

    def getNumberOfCells(self):
        """
        getNumberOfCells(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getNumberOfCells(self)

    def getNumberOfNodes(self):
        """
        getNumberOfNodes(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getNumberOfNodes(self)

    def getSpaceDimension(self):
        """
        getSpaceDimension(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getSpaceDimension(self)

    def getMeshDimension(self):
        """
        getMeshDimension(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getMeshDimension(self)

    def getCoordinatesAndOwner(self):
        """
        getCoordinatesAndOwner(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getCoordinatesAndOwner(self)

    def getBarycenterAndOwner(self):
        """
        getBarycenterAndOwner(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getBarycenterAndOwner(self)

    def getNumberOfCellsWithType(self, *args):
        """
        getNumberOfCellsWithType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getNumberOfCellsWithType(self, *args)

    def getTypeOfCell(self, *args):
        """
        getTypeOfCell(self, int cellId) -> NormalizedCellType

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getTypeOfCell(self, *args)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_advancedRepr(self)

    def writeVTK(self, *args):
        """
        writeVTK(self, char fileName)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_writeVTK(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getMeasureField(self, *args)

    def getMeasureFieldOnNode(self, *args):
        """
        getMeasureFieldOnNode(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getMeasureFieldOnNode(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, TypeOfField t, int nbOfComp, char func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, TypeOfField t, int nbOfComp, char func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, TypeOfField t, int nbOfComp, svec varsOrder, char func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_fillFromAnalytic3(self, *args)

    def buildOrthogonalField(self):
        """
        buildOrthogonalField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_buildOrthogonalField(self)

    def buildUnstructured(self):
        """
        buildUnstructured(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_buildUnstructured(self)

    def mergeMyselfWith(self, *args):
        """
        mergeMyselfWith(self, MEDCouplingMesh other) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_mergeMyselfWith(self, *args)

    def areCompatibleForMerge(self, *args):
        """
        areCompatibleForMerge(self, MEDCouplingMesh other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_areCompatibleForMerge(self, *args)

    def simplexize(self, *args):
        """
        simplexize(self, int policy) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_simplexize(self, *args)

    def GetDimensionOfGeometricType(*args):
        """
        GetDimensionOfGeometricType(NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_GetDimensionOfGeometricType(*args)

    if _newclass:GetDimensionOfGeometricType = staticmethod(GetDimensionOfGeometricType)
    __swig_getmethods__["GetDimensionOfGeometricType"] = lambda x: GetDimensionOfGeometricType
    def GetReprOfGeometricType(*args):
        """
        GetReprOfGeometricType(NormalizedCellType type) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_GetReprOfGeometricType(*args)

    if _newclass:GetReprOfGeometricType = staticmethod(GetReprOfGeometricType)
    __swig_getmethods__["GetReprOfGeometricType"] = lambda x: GetReprOfGeometricType
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh___str__(self)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getTime(self)

    def getCellContainingPoint(self, *args):
        """
        getCellContainingPoint(self, PyObject p, double eps) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getCellContainingPoint(self, *args)

    def getCellsContainingPoints(self, *args):
        """
        getCellsContainingPoints(self, PyObject p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPoints(self, PyObject p, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getCellsContainingPoints(self, *args)

    def getCellsContainingPoint(self, *args):
        """
        getCellsContainingPoint(self, PyObject p, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getCellsContainingPoint(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, PyObject li, bool check = True)
        renumberCells(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_renumberCells(self, *args)

    def checkGeoEquivalWith(self, *args):
        """
        checkGeoEquivalWith(self, MEDCouplingMesh other, int levOfCheck, double prec) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_checkGeoEquivalWith(self, *args)

    def getCellIdsFullyIncludedInNodeIds(self, *args):
        """
        getCellIdsFullyIncludedInNodeIds(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getCellIdsFullyIncludedInNodeIds(self, *args)

    def getNodeIdsOfCell(self, *args):
        """
        getNodeIdsOfCell(self, int cellId) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getNodeIdsOfCell(self, *args)

    def getCoordinatesOfNode(self, *args):
        """
        getCoordinatesOfNode(self, int nodeId) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getCoordinatesOfNode(self, *args)

    def scale(self, *args):
        """
        scale(self, PyObject point, double factor)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_scale(self, *args)

    def getBoundingBox(self):
        """
        getBoundingBox(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getBoundingBox(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingMesh other, double prec) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_isEqualIfNotWhy(self, *args)

    def buildPart(self, *args):
        """
        buildPart(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_buildPart(self, *args)

    def buildPartAndReduceNodes(self, *args):
        """
        buildPartAndReduceNodes(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_buildPartAndReduceNodes(self, *args)

    def getDistributionOfTypes(self):
        """
        getDistributionOfTypes(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getDistributionOfTypes(self)

    def checkTypeConsistencyAndContig(self, *args):
        """
        checkTypeConsistencyAndContig(self, PyObject li, PyObject li2) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_checkTypeConsistencyAndContig(self, *args)

    def splitProfilePerType(self, *args):
        """
        splitProfilePerType(self, DataArrayInt profile) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_splitProfilePerType(self, *args)

    def translate(self, *args):
        """
        translate(self, PyObject vector)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_translate(self, *args)

    def rotate(self, *args):
        """
        rotate(self, PyObject center, double alpha)
        rotate(self, PyObject center, PyObject vector, double alpha)

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_rotate(self, *args)

    def getAllGeoTypes(self):
        """
        getAllGeoTypes(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_getAllGeoTypes(self)

    def MergeMeshes(*args):
        """
        MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
        MergeMeshes(PyObject li) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingMesh_MergeMeshes(*args)

    if _newclass:MergeMeshes = staticmethod(MergeMeshes)
    __swig_getmethods__["MergeMeshes"] = lambda x: MergeMeshes
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingMesh
    __del__ = lambda self : None;
MEDCouplingMesh_swigregister = _MEDCouplingClient.MEDCouplingMesh_swigregister
MEDCouplingMesh_swigregister(MEDCouplingMesh)

def MEDCouplingMesh_GetDimensionOfGeometricType(*args):
  """
    MEDCouplingMesh_GetDimensionOfGeometricType(NormalizedCellType type) -> int

    1
    """
  return _MEDCouplingClient.MEDCouplingMesh_GetDimensionOfGeometricType(*args)

def MEDCouplingMesh_GetReprOfGeometricType(*args):
  """
    MEDCouplingMesh_GetReprOfGeometricType(NormalizedCellType type) -> char

    1
    """
  return _MEDCouplingClient.MEDCouplingMesh_GetReprOfGeometricType(*args)

def MEDCouplingMesh_MergeMeshes(*args):
  """
    MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
    MEDCouplingMesh_MergeMeshes(PyObject li) -> MEDCouplingMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingMesh_MergeMeshes(*args)

class DataArray(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArray, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArray, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _MEDCouplingClient.DataArray_setName(self, *args)

    def copyStringInfoFrom(self, *args):
        """
        copyStringInfoFrom(self, DataArray other)

        1
        """
        return _MEDCouplingClient.DataArray_copyStringInfoFrom(self, *args)

    def areInfoEqualsIfNotWhy(self, *args):
        """
        areInfoEqualsIfNotWhy(self, DataArray other, string reason) -> bool

        1
        """
        return _MEDCouplingClient.DataArray_areInfoEqualsIfNotWhy(self, *args)

    def areInfoEquals(self, *args):
        """
        areInfoEquals(self, DataArray other) -> bool

        1
        """
        return _MEDCouplingClient.DataArray_areInfoEquals(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArray_reprWithoutNameStream(self, *args)

    def cppRepr(self, *args):
        """
        cppRepr(self, char varName) -> string

        1
        """
        return _MEDCouplingClient.DataArray_cppRepr(self, *args)

    def getName(self):
        """
        getName(self) -> string

        1
        """
        return _MEDCouplingClient.DataArray_getName(self)

    def setInfoOnComponents(self, *args):
        """
        setInfoOnComponents(self, svec info)

        1
        """
        return _MEDCouplingClient.DataArray_setInfoOnComponents(self, *args)

    def getVarsOnComponent(self):
        """
        getVarsOnComponent(self) -> svec

        1
        """
        return _MEDCouplingClient.DataArray_getVarsOnComponent(self)

    def getUnitsOnComponent(self):
        """
        getUnitsOnComponent(self) -> svec

        1
        """
        return _MEDCouplingClient.DataArray_getUnitsOnComponent(self)

    def getInfoOnComponent(self, *args):
        """
        getInfoOnComponent(self, int i) -> string

        1
        """
        return _MEDCouplingClient.DataArray_getInfoOnComponent(self, *args)

    def getVarOnComponent(self, *args):
        """
        getVarOnComponent(self, int i) -> string

        1
        """
        return _MEDCouplingClient.DataArray_getVarOnComponent(self, *args)

    def getUnitOnComponent(self, *args):
        """
        getUnitOnComponent(self, int i) -> string

        1
        """
        return _MEDCouplingClient.DataArray_getUnitOnComponent(self, *args)

    def setInfoOnComponent(self, *args):
        """
        setInfoOnComponent(self, int i, char info)

        1
        """
        return _MEDCouplingClient.DataArray_setInfoOnComponent(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _MEDCouplingClient.DataArray_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        """
        getNumberOfTuples(self) -> int

        1
        """
        return _MEDCouplingClient.DataArray_getNumberOfTuples(self)

    def getNbOfElems(self):
        """
        getNbOfElems(self) -> int

        1
        """
        return _MEDCouplingClient.DataArray_getNbOfElems(self)

    def checkNbOfTuples(self, *args):
        """
        checkNbOfTuples(self, int nbOfTuples, char msg)

        1
        """
        return _MEDCouplingClient.DataArray_checkNbOfTuples(self, *args)

    def checkNbOfComps(self, *args):
        """
        checkNbOfComps(self, int nbOfCompo, char msg)

        1
        """
        return _MEDCouplingClient.DataArray_checkNbOfComps(self, *args)

    def checkNbOfTuplesAndComp(self, *args):
        """
        checkNbOfTuplesAndComp(self, DataArray other, char msg)
        checkNbOfTuplesAndComp(self, int nbOfTuples, int nbOfCompo, char msg)

        1
        """
        return _MEDCouplingClient.DataArray_checkNbOfTuplesAndComp(self, *args)

    def checkNbOfElems(self, *args):
        """
        checkNbOfElems(self, int nbOfElems, char msg)

        1
        """
        return _MEDCouplingClient.DataArray_checkNbOfElems(self, *args)

    def GetNumberOfItemGivenBES(*args):
        """
        GetNumberOfItemGivenBES(int begin, int end, int step, char msg) -> int

        1
        """
        return _MEDCouplingClient.DataArray_GetNumberOfItemGivenBES(*args)

    if _newclass:GetNumberOfItemGivenBES = staticmethod(GetNumberOfItemGivenBES)
    __swig_getmethods__["GetNumberOfItemGivenBES"] = lambda x: GetNumberOfItemGivenBES
    def GetNumberOfItemGivenBESRelative(*args):
        """
        GetNumberOfItemGivenBESRelative(int begin, int end, int step, char msg) -> int

        1
        """
        return _MEDCouplingClient.DataArray_GetNumberOfItemGivenBESRelative(*args)

    if _newclass:GetNumberOfItemGivenBESRelative = staticmethod(GetNumberOfItemGivenBESRelative)
    __swig_getmethods__["GetNumberOfItemGivenBESRelative"] = lambda x: GetNumberOfItemGivenBESRelative
    def GetPosOfItemGivenBESRelativeNoThrow(*args):
        """
        GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

        1
        """
        return _MEDCouplingClient.DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args)

    if _newclass:GetPosOfItemGivenBESRelativeNoThrow = staticmethod(GetPosOfItemGivenBESRelativeNoThrow)
    __swig_getmethods__["GetPosOfItemGivenBESRelativeNoThrow"] = lambda x: GetPosOfItemGivenBESRelativeNoThrow
    def GetVarNameFromInfo(*args):
        """
        GetVarNameFromInfo(string info) -> string

        1
        """
        return _MEDCouplingClient.DataArray_GetVarNameFromInfo(*args)

    if _newclass:GetVarNameFromInfo = staticmethod(GetVarNameFromInfo)
    __swig_getmethods__["GetVarNameFromInfo"] = lambda x: GetVarNameFromInfo
    def GetUnitFromInfo(*args):
        """
        GetUnitFromInfo(string info) -> string

        1
        """
        return _MEDCouplingClient.DataArray_GetUnitFromInfo(*args)

    if _newclass:GetUnitFromInfo = staticmethod(GetUnitFromInfo)
    __swig_getmethods__["GetUnitFromInfo"] = lambda x: GetUnitFromInfo
    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArray_reprCppStream(self, *args)

    def getInfoOnComponents(self):
        """
        getInfoOnComponents(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArray_getInfoOnComponents(self)

    def copyPartOfStringInfoFrom(self, *args):
        """
        copyPartOfStringInfoFrom(self, DataArray other, ivec compoIds)
        copyPartOfStringInfoFrom(self, DataArray other, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArray_copyPartOfStringInfoFrom(self, *args)

    def copyPartOfStringInfoFrom2(self, *args):
        """
        copyPartOfStringInfoFrom2(self, ivec compoIds, DataArray other)
        copyPartOfStringInfoFrom2(self, PyObject li, DataArray other)

        1
        """
        return _MEDCouplingClient.DataArray_copyPartOfStringInfoFrom2(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_DataArray
    __del__ = lambda self : None;
DataArray_swigregister = _MEDCouplingClient.DataArray_swigregister
DataArray_swigregister(DataArray)

def DataArray_GetNumberOfItemGivenBES(*args):
  """
    DataArray_GetNumberOfItemGivenBES(int begin, int end, int step, char msg) -> int

    1
    """
  return _MEDCouplingClient.DataArray_GetNumberOfItemGivenBES(*args)

def DataArray_GetNumberOfItemGivenBESRelative(*args):
  """
    DataArray_GetNumberOfItemGivenBESRelative(int begin, int end, int step, char msg) -> int

    1
    """
  return _MEDCouplingClient.DataArray_GetNumberOfItemGivenBESRelative(*args)

def DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args):
  """
    DataArray_GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

    1
    """
  return _MEDCouplingClient.DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args)

def DataArray_GetVarNameFromInfo(*args):
  """
    DataArray_GetVarNameFromInfo(string info) -> string

    1
    """
  return _MEDCouplingClient.DataArray_GetVarNameFromInfo(*args)

def DataArray_GetUnitFromInfo(*args):
  """
    DataArray_GetUnitFromInfo(string info) -> string

    1
    """
  return _MEDCouplingClient.DataArray_GetUnitFromInfo(*args)

class DataArrayDouble(DataArray):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DataArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDouble, name)
    __repr__ = _swig_repr
    def isAllocated(self):
        """
        isAllocated(self) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_isAllocated(self)

    def checkAllocated(self):
        """
        checkAllocated(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_checkAllocated(self)

    def setInfoAndChangeNbOfCompo(self, *args):
        """
        setInfoAndChangeNbOfCompo(self, svec info)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setInfoAndChangeNbOfCompo(self, *args)

    def doubleValue(self):
        """
        doubleValue(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_doubleValue(self)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_empty(self)

    def deepCpy(self):
        """
        deepCpy(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_deepCpy(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_performCpy(self, *args)

    def cpyFrom(self, *args):
        """
        cpyFrom(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_cpyFrom(self, *args)

    def alloc(self, *args):
        """
        alloc(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_alloc(self, *args)

    def allocIfNecessary(self, *args):
        """
        allocIfNecessary(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_allocIfNecessary(self, *args)

    def fillWithZero(self):
        """
        fillWithZero(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_fillWithZero(self)

    def fillWithValue(self, *args):
        """
        fillWithValue(self, double val)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_fillWithValue(self, *args)

    def iota(self, init = 0.):
        """
        iota(self, double init = 0.)
        iota(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_iota(self, init)

    def isUniform(self, *args):
        """
        isUniform(self, double val, double eps) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_isUniform(self, *args)

    def sort(self, asc = True):
        """
        sort(self, bool asc = True)
        sort(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_sort(self, asc)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reverse(self)

    def checkMonotonic(self, *args):
        """
        checkMonotonic(self, bool increasing, double eps)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_checkMonotonic(self, *args)

    def isMonotonic(self, *args):
        """
        isMonotonic(self, bool increasing, double eps) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_isMonotonic(self, *args)

    def repr(self):
        """
        repr(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayDouble_repr(self)

    def reprZip(self):
        """
        reprZip(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reprZip(self)

    def reprStream(self, *args):
        """
        reprStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reprStream(self, *args)

    def reprZipStream(self, *args):
        """
        reprZipStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reprZipStream(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reprWithoutNameStream(self, *args)

    def reprZipWithoutNameStream(self, *args):
        """
        reprZipWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reprZipWithoutNameStream(self, *args)

    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reprCppStream(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_isEqualWithoutConsideringStr(self, *args)

    def reAlloc(self, *args):
        """
        reAlloc(self, int nbOfTuples)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_reAlloc(self, *args)

    def convertToIntArr(self):
        """
        convertToIntArr(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayDouble_convertToIntArr(self)

    def fromNoInterlace(self):
        """
        fromNoInterlace(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_fromNoInterlace(self)

    def toNoInterlace(self):
        """
        toNoInterlace(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_toNoInterlace(self)

    def selectByTupleId2(self, *args):
        """
        selectByTupleId2(self, int bg, int end2, int step) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_selectByTupleId2(self, *args)

    def substr(self, *args):
        """
        substr(self, int tupleIdBg, int tupleIdEnd = -1) -> DataArrayDouble
        substr(self, int tupleIdBg) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_substr(self, *args)

    def rearrange(self, *args):
        """
        rearrange(self, int newNbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_rearrange(self, *args)

    def transpose(self):
        """
        transpose(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_transpose(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_changeNbOfComponents(self, *args)

    def meldWith(self, *args):
        """
        meldWith(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_meldWith(self, *args)

    def duplicateEachTupleNTimes(self, *args):
        """
        duplicateEachTupleNTimes(self, int nbTimes) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_duplicateEachTupleNTimes(self, *args)

    def getDifferentValues(self, *args):
        """
        getDifferentValues(self, double prec, int limitTupleId = -1) -> DataArrayDouble
        getDifferentValues(self, double prec) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getDifferentValues(self, *args)

    def setPartOfValues1(self, *args):
        """
        setPartOfValues1(self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp, 
            bool strictCompoCompare = True)
        setPartOfValues1(self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValues1(self, *args)

    def setPartOfValuesSimple1(self, *args):
        """
        setPartOfValuesSimple1(self, double a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValuesSimple1(self, *args)

    def setPartOfValues2(self, *args):
        """
        setPartOfValues2(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, bool strictCompoCompare = True)
        setPartOfValues2(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValues2(self, *args)

    def setPartOfValuesSimple2(self, *args):
        """
        setPartOfValuesSimple2(self, double a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValuesSimple2(self, *args)

    def setPartOfValues3(self, *args):
        """
        setPartOfValues3(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp, bool strictCompoCompare = True)
        setPartOfValues3(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValues3(self, *args)

    def setPartOfValuesSimple3(self, *args):
        """
        setPartOfValuesSimple3(self, double a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValuesSimple3(self, *args)

    def setPartOfValuesAdv(self, *args):
        """
        setPartOfValuesAdv(self, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setPartOfValuesAdv(self, *args)

    def setContigPartOfSelectedValues(self, *args):
        """
        setContigPartOfSelectedValues(self, int tupleIdStart, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setContigPartOfSelectedValues(self, *args)

    def setContigPartOfSelectedValues2(self, *args):
        """
        setContigPartOfSelectedValues2(self, int tupleIdStart, DataArrayDouble a, int bg, int end2, 
            int step)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setContigPartOfSelectedValues2(self, *args)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getIJ(self, *args)

    def back(self):
        """
        back(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_back(self)

    def getIJSafe(self, *args):
        """
        getIJSafe(self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getIJSafe(self, *args)

    def setIJ(self, *args):
        """
        setIJ(self, int tupleId, int compoId, double newVal)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setIJ(self, *args)

    def setIJSilent(self, *args):
        """
        setIJSilent(self, int tupleId, int compoId, double newVal)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setIJSilent(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getPointer(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getConstPointer(self)

    def iterator(self):
        """
        iterator(self) -> DataArrayDoubleIterator

        1
        """
        return _MEDCouplingClient.DataArrayDouble_iterator(self)

    def begin(self):
        """
        begin(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_begin(self)

    def end(self):
        """
        end(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_end(self)

    def useArray(self, *args):
        """
        useArray(self, double array, bool ownership, DeallocType type, int nbOfTuple, 
            int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_useArray(self, *args)

    def useExternalArrayWithRWAccess(self, *args):
        """
        useExternalArrayWithRWAccess(self, double array, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_useExternalArrayWithRWAccess(self, *args)

    def writeOnPlace(self, *args):
        """
        writeOnPlace(self, int id, double element0, double others, int sizeOfOthers)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_writeOnPlace(self, *args)

    def checkNoNullValues(self):
        """
        checkNoNullValues(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_checkNoNullValues(self)

    def computeBBoxPerTuple(self, epsilon = 0.0):
        """
        computeBBoxPerTuple(self, double epsilon = 0.0) -> DataArrayDouble
        computeBBoxPerTuple(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_computeBBoxPerTuple(self, epsilon)

    def recenterForMaxPrecision(self, *args):
        """
        recenterForMaxPrecision(self, double eps)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_recenterForMaxPrecision(self, *args)

    def getMaxValueInArray(self):
        """
        getMaxValueInArray(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMaxValueInArray(self)

    def getMinValueInArray(self):
        """
        getMinValueInArray(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMinValueInArray(self)

    def getAverageValue(self):
        """
        getAverageValue(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getAverageValue(self)

    def norm2(self):
        """
        norm2(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_norm2(self)

    def normMax(self):
        """
        normMax(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble_normMax(self)

    def fromPolarToCart(self):
        """
        fromPolarToCart(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_fromPolarToCart(self)

    def fromCylToCart(self):
        """
        fromCylToCart(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_fromCylToCart(self)

    def fromSpherToCart(self):
        """
        fromSpherToCart(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_fromSpherToCart(self)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_inverse(self)

    def trace(self):
        """
        trace(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_trace(self)

    def deviator(self):
        """
        deviator(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_maxPerTuple(self)

    def buildEuclidianDistanceDenseMatrix(self):
        """
        buildEuclidianDistanceDenseMatrix(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_buildEuclidianDistanceDenseMatrix(self)

    def buildEuclidianDistanceDenseMatrixWith(self, *args):
        """
        buildEuclidianDistanceDenseMatrixWith(self, DataArrayDouble other) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_buildEuclidianDistanceDenseMatrixWith(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_sortPerTuple(self, *args)

    def abs(self):
        """
        abs(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_abs(self)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)
        applyLin(self, double a, double b)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyLin(self, *args)

    def applyInv(self, *args):
        """
        applyInv(self, double numerator)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyInv(self, *args)

    def negate(self):
        """
        negate(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_negate(self)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, FunctionToEvaluate func) -> DataArrayDouble
        applyFunc(self, int nbOfComp, char func) -> DataArrayDouble
        applyFunc(self, char func) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyFunc(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyFunc3(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_applyFuncFast64(self, *args)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getIdsInRange(self, *args)

    def Dot(*args):
        """
        Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Dot(*args)

    if _newclass:Dot = staticmethod(Dot)
    __swig_getmethods__["Dot"] = lambda x: Dot
    def CrossProduct(*args):
        """
        CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_CrossProduct(*args)

    if _newclass:CrossProduct = staticmethod(CrossProduct)
    __swig_getmethods__["CrossProduct"] = lambda x: CrossProduct
    def Max(*args):
        """
        Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Max(*args)

    if _newclass:Max = staticmethod(Max)
    __swig_getmethods__["Max"] = lambda x: Max
    def Min(*args):
        """
        Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Min(*args)

    if _newclass:Min = staticmethod(Min)
    __swig_getmethods__["Min"] = lambda x: Min
    def Add(*args):
        """
        Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Add(*args)

    if _newclass:Add = staticmethod(Add)
    __swig_getmethods__["Add"] = lambda x: Add
    def addEqual(self, *args):
        """
        addEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_addEqual(self, *args)

    def Substract(*args):
        """
        Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Substract(*args)

    if _newclass:Substract = staticmethod(Substract)
    __swig_getmethods__["Substract"] = lambda x: Substract
    def substractEqual(self, *args):
        """
        substractEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_substractEqual(self, *args)

    def Multiply(*args):
        """
        Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Multiply(*args)

    if _newclass:Multiply = staticmethod(Multiply)
    __swig_getmethods__["Multiply"] = lambda x: Multiply
    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_multiplyEqual(self, *args)

    def Divide(*args):
        """
        Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Divide(*args)

    if _newclass:Divide = staticmethod(Divide)
    __swig_getmethods__["Divide"] = lambda x: Divide
    def divideEqual(self, *args):
        """
        divideEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_divideEqual(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_updateTime(self)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getTinySerializationIntInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayDouble_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, svec tinyInfoS)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_finishUnserialization(self, *args)

    def New(*args):
        """
        New() -> DataArrayDouble
        New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
        New(PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
        New(PyObject elt0) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self) -> DataArrayDouble
        __init__(self, PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
        __init__(self, PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
        __init__(self, PyObject elt0) -> DataArrayDouble

        1
        """
        this = _MEDCouplingClient.new_DataArrayDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayDouble___str__(self)

    def __float__(self):
        """
        __float__(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDouble___float__(self)

    def __len__(self):
        """
        __len__(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayDouble___len__(self)

    def __iter__(self):
        """
        __iter__(self) -> DataArrayDoubleIterator

        1
        """
        return _MEDCouplingClient.DataArrayDouble___iter__(self)

    def setValues(self, *args):
        """
        setValues(self, PyObject li, int nbOfTuples, int nbOfElsPerTuple)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setValues(self, *args)

    def getValues(self):
        """
        getValues(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getValues(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, DataArrayDouble other, double prec, string reason) -> bool
        isEqualIfNotWhy(self, DataArrayDouble other, double prec) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_isEqualIfNotWhy(self, *args)

    def getValuesAsTuple(self):
        """
        getValuesAsTuple(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getValuesAsTuple(self)

    def renumber(self, *args):
        """
        renumber(self, int old2New) -> DataArrayDouble
        renumber(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_renumber(self, *args)

    def renumberR(self, *args):
        """
        renumberR(self, int new2Old) -> DataArrayDouble
        renumberR(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_renumberR(self, *args)

    def renumberAndReduce(self, *args):
        """
        renumberAndReduce(self, int old2New, int newNbOfTuple) -> DataArrayDouble
        renumberAndReduce(self, PyObject li, int newNbOfTuple) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_renumberAndReduce(self, *args)

    def renumberInPlace(self, *args):
        """
        renumberInPlace(self, int old2New)
        renumberInPlace(self, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_renumberInPlace(self, *args)

    def renumberInPlaceR(self, *args):
        """
        renumberInPlaceR(self, int new2Old)
        renumberInPlaceR(self, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_renumberInPlaceR(self, *args)

    def selectByTupleId(self, *args):
        """
        selectByTupleId(self, int new2OldBg, int new2OldEnd) -> DataArrayDouble
        selectByTupleId(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_selectByTupleId(self, *args)

    def selectByTupleIdSafe(self, *args):
        """
        selectByTupleIdSafe(self, int new2OldBg, int new2OldEnd) -> DataArrayDouble
        selectByTupleIdSafe(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_selectByTupleIdSafe(self, *args)

    def getMaxValue(self, *args):
        """
        getMaxValue(self, int tupleId) -> double
        getMaxValue(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMaxValue(self, *args)

    def getMaxValue2(self, *args):
        """
        getMaxValue2(self, DataArrayInt tupleIds) -> double
        getMaxValue2(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMaxValue2(self, *args)

    def getMinValue(self, *args):
        """
        getMinValue(self, int tupleId) -> double
        getMinValue(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMinValue(self, *args)

    def getMinValue2(self, *args):
        """
        getMinValue2(self, DataArrayInt tupleIds) -> double
        getMinValue2(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMinValue2(self, *args)

    def getMinMaxPerComponent(self, *args):
        """
        getMinMaxPerComponent(self, double bounds)
        getMinMaxPerComponent(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getMinMaxPerComponent(self, *args)

    def accumulate(self, *args):
        """
        accumulate(self, double res)
        accumulate(self, int compId) -> double
        accumulate(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_accumulate(self, *args)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> DataArrayDouble
        keepSelectedComponents(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_keepSelectedComponents(self, *args)

    def findCommonTuples(self, *args):
        """
        findCommonTuples(self, double prec, int limitTupleId, DataArrayInt comm, DataArrayInt commIndex)
        findCommonTuples(self, double prec, int limitNodeId = -1) -> PyObject
        findCommonTuples(self, double prec) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_findCommonTuples(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, DataArrayDouble a, ivec compoIds)
        setSelectedComponents(self, DataArrayDouble a, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayDouble_setSelectedComponents(self, *args)

    def getTuple(self, *args):
        """
        getTuple(self, int tupleId, double res)
        getTuple(self, int tupleId) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_getTuple(self, *args)

    def Aggregate(*args):
        """
        Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
        Aggregate(PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Aggregate(*args)

    if _newclass:Aggregate = staticmethod(Aggregate)
    __swig_getmethods__["Aggregate"] = lambda x: Aggregate
    def Meld(*args):
        """
        Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
        Meld(PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_Meld(*args)

    if _newclass:Meld = staticmethod(Meld)
    __swig_getmethods__["Meld"] = lambda x: Meld
    def selectByTupleRanges(self, *args):
        """
        selectByTupleRanges(self, std::vector<(std::pair<(int,int)>,std::allocator<(std::pair<(int,int)>)>)> ranges) -> DataArrayDouble
        selectByTupleRanges(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble_selectByTupleRanges(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___setitem__(self, *args)

    def __neg__(self):
        """
        __neg__(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___neg__(self)

    def __add__(self, *args):
        """
        __add__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___add__(self, *args)

    def __radd__(self, *args):
        """
        __radd__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___radd__(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble____iadd___(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___sub__(self, *args)

    def __rsub__(self, *args):
        """
        __rsub__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___rsub__(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble____isub___(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___mul__(self, *args)

    def __rmul__(self, *args):
        """
        __rmul__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___rmul__(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble____imul___(self, *args)

    def __div__(self, *args):
        """
        __div__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___div__(self, *args)

    def __rdiv__(self, *args):
        """
        __rdiv__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDouble___rdiv__(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble____idiv___(self, *args)

    def computeTupleIdsNearTuples(self, *args):
        """
        computeTupleIdsNearTuples(self, DataArrayDouble other, double eps, ivec c, ivec cI)
        computeTupleIdsNearTuples(self, PyObject pt, double eps) -> PyObject
        computeTupleIdsNearTuples(self, DataArrayDouble other, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDouble_computeTupleIdsNearTuples(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_DataArrayDouble
    __del__ = lambda self : None;
DataArrayDouble_swigregister = _MEDCouplingClient.DataArrayDouble_swigregister
DataArrayDouble_swigregister(DataArrayDouble)

def DataArrayDouble_Dot(*args):
  """
    DataArrayDouble_Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Dot(*args)

def DataArrayDouble_CrossProduct(*args):
  """
    DataArrayDouble_CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_CrossProduct(*args)

def DataArrayDouble_Max(*args):
  """
    DataArrayDouble_Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Max(*args)

def DataArrayDouble_Min(*args):
  """
    DataArrayDouble_Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Min(*args)

def DataArrayDouble_Add(*args):
  """
    DataArrayDouble_Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Add(*args)

def DataArrayDouble_Substract(*args):
  """
    DataArrayDouble_Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Substract(*args)

def DataArrayDouble_Multiply(*args):
  """
    DataArrayDouble_Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Multiply(*args)

def DataArrayDouble_Divide(*args):
  """
    DataArrayDouble_Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Divide(*args)

def DataArrayDouble_New(*args):
  """
    New() -> DataArrayDouble
    New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
    New(PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
    DataArrayDouble_New(PyObject elt0) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_New(*args)

def DataArrayDouble_Aggregate(*args):
  """
    Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
    DataArrayDouble_Aggregate(PyObject li) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Aggregate(*args)

def DataArrayDouble_Meld(*args):
  """
    Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
    DataArrayDouble_Meld(PyObject li) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDouble_Meld(*args)

class DataArrayDoubleIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DataArrayDouble da) -> DataArrayDoubleIterator

        1
        """
        this = _MEDCouplingClient.new_DataArrayDoubleIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingClient.delete_DataArrayDoubleIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDoubleIterator_next(self)

DataArrayDoubleIterator_swigregister = _MEDCouplingClient.DataArrayDoubleIterator_swigregister
DataArrayDoubleIterator_swigregister(DataArrayDoubleIterator)

class DataArrayDoubleTuple(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleTuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double pt, int nbOfComp) -> DataArrayDoubleTuple

        1
        """
        this = _MEDCouplingClient.new_DataArrayDoubleTuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCompo(self):
        """
        getNumberOfCompo(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple_getNumberOfCompo(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple_getConstPointer(self)

    def getPointer(self):
        """
        getPointer(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple_getPointer(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple___str__(self)

    def __float__(self):
        """
        __float__(self) -> double

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple___float__(self)

    def buildDADouble(self, *args):
        """
        buildDADouble(self, int nbOfTuples, int nbOfCompo) -> DataArrayDouble
        buildDADouble(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple_buildDADouble(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple____idiv___(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayDoubleTuple

        1
        """
        return _MEDCouplingClient.DataArrayDoubleTuple___setitem__(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_DataArrayDoubleTuple
    __del__ = lambda self : None;
DataArrayDoubleTuple_swigregister = _MEDCouplingClient.DataArrayDoubleTuple_swigregister
DataArrayDoubleTuple_swigregister(DataArrayDoubleTuple)

class DataArrayInt(DataArray):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DataArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayInt, name)
    __repr__ = _swig_repr
    def isAllocated(self):
        """
        isAllocated(self) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_isAllocated(self)

    def checkAllocated(self):
        """
        checkAllocated(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_checkAllocated(self)

    def setInfoAndChangeNbOfCompo(self, *args):
        """
        setInfoAndChangeNbOfCompo(self, svec info)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setInfoAndChangeNbOfCompo(self, *args)

    def intValue(self):
        """
        intValue(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_intValue(self)

    def getHashCode(self):
        """
        getHashCode(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getHashCode(self)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_empty(self)

    def deepCpy(self):
        """
        deepCpy(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_deepCpy(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_performCpy(self, *args)

    def cpyFrom(self, *args):
        """
        cpyFrom(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_cpyFrom(self, *args)

    def alloc(self, *args):
        """
        alloc(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_alloc(self, *args)

    def allocIfNecessary(self, *args):
        """
        allocIfNecessary(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_allocIfNecessary(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_isEqualWithoutConsideringStr(self, *args)

    def isEqualWithoutConsideringStrAndOrder(self, *args):
        """
        isEqualWithoutConsideringStrAndOrder(self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_isEqualWithoutConsideringStrAndOrder(self, *args)

    def buildPermutationArr(self, *args):
        """
        buildPermutationArr(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildPermutationArr(self, *args)

    def sort(self, asc = True):
        """
        sort(self, bool asc = True)
        sort(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_sort(self, asc)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reverse(self)

    def fillWithZero(self):
        """
        fillWithZero(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_fillWithZero(self)

    def fillWithValue(self, *args):
        """
        fillWithValue(self, int val)

        1
        """
        return _MEDCouplingClient.DataArrayInt_fillWithValue(self, *args)

    def iota(self, init = 0):
        """
        iota(self, int init = 0)
        iota(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_iota(self, init)

    def repr(self):
        """
        repr(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayInt_repr(self)

    def reprZip(self):
        """
        reprZip(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayInt_reprZip(self)

    def reprStream(self, *args):
        """
        reprStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reprStream(self, *args)

    def reprZipStream(self, *args):
        """
        reprZipStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reprZipStream(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reprWithoutNameStream(self, *args)

    def reprZipWithoutNameStream(self, *args):
        """
        reprZipWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reprZipWithoutNameStream(self, *args)

    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reprCppStream(self, *args)

    def invertArrayO2N2N2O(self, *args):
        """
        invertArrayO2N2N2O(self, int newNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_invertArrayO2N2N2O(self, *args)

    def invertArrayN2O2O2N(self, *args):
        """
        invertArrayN2O2O2N(self, int oldNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_invertArrayN2O2O2N(self, *args)

    def reAlloc(self, *args):
        """
        reAlloc(self, int nbOfTuples)

        1
        """
        return _MEDCouplingClient.DataArrayInt_reAlloc(self, *args)

    def convertToDblArr(self):
        """
        convertToDblArr(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayInt_convertToDblArr(self)

    def fromNoInterlace(self):
        """
        fromNoInterlace(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_fromNoInterlace(self)

    def toNoInterlace(self):
        """
        toNoInterlace(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_toNoInterlace(self)

    def selectByTupleId2(self, *args):
        """
        selectByTupleId2(self, int bg, int end, int step) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_selectByTupleId2(self, *args)

    def checkAndPreparePermutation(self):
        """
        checkAndPreparePermutation(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_checkAndPreparePermutation(self)

    def buildPermArrPerLevel(self):
        """
        buildPermArrPerLevel(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildPermArrPerLevel(self)

    def isIdentity(self):
        """
        isIdentity(self) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_isIdentity(self)

    def isUniform(self, *args):
        """
        isUniform(self, int val) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_isUniform(self, *args)

    def substr(self, *args):
        """
        substr(self, int tupleIdBg, int tupleIdEnd = -1) -> DataArrayInt
        substr(self, int tupleIdBg) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_substr(self, *args)

    def rearrange(self, *args):
        """
        rearrange(self, int newNbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_rearrange(self, *args)

    def transpose(self):
        """
        transpose(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_transpose(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, int dftValue) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_changeNbOfComponents(self, *args)

    def meldWith(self, *args):
        """
        meldWith(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_meldWith(self, *args)

    def setPartOfValues1(self, *args):
        """
        setPartOfValues1(self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp, 
            bool strictCompoCompare = True)
        setPartOfValues1(self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValues1(self, *args)

    def setPartOfValuesSimple1(self, *args):
        """
        setPartOfValuesSimple1(self, int a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValuesSimple1(self, *args)

    def setPartOfValues2(self, *args):
        """
        setPartOfValues2(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, bool strictCompoCompare = True)
        setPartOfValues2(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValues2(self, *args)

    def setPartOfValuesSimple2(self, *args):
        """
        setPartOfValuesSimple2(self, int a, int bgTuples, int endTuples, int bgComp, int endComp)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValuesSimple2(self, *args)

    def setPartOfValues3(self, *args):
        """
        setPartOfValues3(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp, bool strictCompoCompare = True)
        setPartOfValues3(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValues3(self, *args)

    def setPartOfValuesSimple3(self, *args):
        """
        setPartOfValuesSimple3(self, int a, int bgTuples, int endTuples, int bgComp, int endComp, 
            int stepComp)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValuesSimple3(self, *args)

    def setPartOfValuesAdv(self, *args):
        """
        setPartOfValuesAdv(self, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setPartOfValuesAdv(self, *args)

    def setContigPartOfSelectedValues(self, *args):
        """
        setContigPartOfSelectedValues(self, int tupleIdStart, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setContigPartOfSelectedValues(self, *args)

    def setContigPartOfSelectedValues2(self, *args):
        """
        setContigPartOfSelectedValues2(self, int tupleIdStart, DataArrayInt a, int bg, int end2, 
            int step)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setContigPartOfSelectedValues2(self, *args)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIJ(self, *args)

    def getIJSafe(self, *args):
        """
        getIJSafe(self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIJSafe(self, *args)

    def back(self):
        """
        back(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_back(self)

    def setIJ(self, *args):
        """
        setIJ(self, int tupleId, int compoId, int newVal)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setIJ(self, *args)

    def setIJSilent(self, *args):
        """
        setIJSilent(self, int tupleId, int compoId, int newVal)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setIJSilent(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getPointer(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getConstPointer(self)

    def iterator(self):
        """
        iterator(self) -> DataArrayIntIterator

        1
        """
        return _MEDCouplingClient.DataArrayInt_iterator(self)

    def begin(self):
        """
        begin(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_begin(self)

    def end(self):
        """
        end(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_end(self)

    def getIdsEqual(self, *args):
        """
        getIdsEqual(self, int val) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIdsEqual(self, *args)

    def getIdsNotEqual(self, *args):
        """
        getIdsNotEqual(self, int val) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIdsNotEqual(self, *args)

    def changeValue(self, *args):
        """
        changeValue(self, int oldValue, int newValue) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_changeValue(self, *args)

    def locateTuple(self, *args):
        """
        locateTuple(self, ivec tupl) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_locateTuple(self, *args)

    def locateValue(self, *args):
        """
        locateValue(self, int value) -> int
        locateValue(self, ivec vals) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_locateValue(self, *args)

    def search(self, *args):
        """
        search(self, ivec vals) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_search(self, *args)

    def presenceOfTuple(self, *args):
        """
        presenceOfTuple(self, ivec tupl) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_presenceOfTuple(self, *args)

    def presenceOfValue(self, *args):
        """
        presenceOfValue(self, int value) -> bool
        presenceOfValue(self, ivec vals) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_presenceOfValue(self, *args)

    def getMaxValueInArray(self):
        """
        getMaxValueInArray(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getMaxValueInArray(self)

    def getMinValueInArray(self):
        """
        getMinValueInArray(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_getMinValueInArray(self)

    def abs(self):
        """
        abs(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_abs(self)

    def applyLin(self, *args):
        """
        applyLin(self, int a, int b, int compoId)
        applyLin(self, int a, int b)

        1
        """
        return _MEDCouplingClient.DataArrayInt_applyLin(self, *args)

    def applyInv(self, *args):
        """
        applyInv(self, int numerator)

        1
        """
        return _MEDCouplingClient.DataArrayInt_applyInv(self, *args)

    def negate(self):
        """
        negate(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_negate(self)

    def applyDivideBy(self, *args):
        """
        applyDivideBy(self, int val)

        1
        """
        return _MEDCouplingClient.DataArrayInt_applyDivideBy(self, *args)

    def applyModulus(self, *args):
        """
        applyModulus(self, int val)

        1
        """
        return _MEDCouplingClient.DataArrayInt_applyModulus(self, *args)

    def applyRModulus(self, *args):
        """
        applyRModulus(self, int val)

        1
        """
        return _MEDCouplingClient.DataArrayInt_applyRModulus(self, *args)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, int vmin, int vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIdsInRange(self, *args)

    def buildComplement(self, *args):
        """
        buildComplement(self, int nbOfElement) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildComplement(self, *args)

    def buildSubstraction(self, *args):
        """
        buildSubstraction(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildSubstraction(self, *args)

    def buildUnion(self, *args):
        """
        buildUnion(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildUnion(self, *args)

    def buildIntersection(self, *args):
        """
        buildIntersection(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildIntersection(self, *args)

    def buildUnique(self):
        """
        buildUnique(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildUnique(self)

    def deltaShiftIndex(self):
        """
        deltaShiftIndex(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_deltaShiftIndex(self)

    def computeOffsets(self):
        """
        computeOffsets(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_computeOffsets(self)

    def computeOffsets2(self):
        """
        computeOffsets2(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_computeOffsets2(self)

    def buildExplicitArrByRanges(self, *args):
        """
        buildExplicitArrByRanges(self, DataArrayInt offsets) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_buildExplicitArrByRanges(self, *args)

    def findRangeIdForEachTuple(self, *args):
        """
        findRangeIdForEachTuple(self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_findRangeIdForEachTuple(self, *args)

    def findIdInRangeForEachTuple(self, *args):
        """
        findIdInRangeForEachTuple(self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_findIdInRangeForEachTuple(self, *args)

    def duplicateEachTupleNTimes(self, *args):
        """
        duplicateEachTupleNTimes(self, int nbTimes) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_duplicateEachTupleNTimes(self, *args)

    def useArray(self, *args):
        """
        useArray(self, int array, bool ownership, DeallocType type, int nbOfTuple, 
            int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_useArray(self, *args)

    def useExternalArrayWithRWAccess(self, *args):
        """
        useExternalArrayWithRWAccess(self, int array, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_useExternalArrayWithRWAccess(self, *args)

    def writeOnPlace(self, *args):
        """
        writeOnPlace(self, int id, int element0, int others, int sizeOfOthers)

        1
        """
        return _MEDCouplingClient.DataArrayInt_writeOnPlace(self, *args)

    def Add(*args):
        """
        Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Add(*args)

    if _newclass:Add = staticmethod(Add)
    __swig_getmethods__["Add"] = lambda x: Add
    def addEqual(self, *args):
        """
        addEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_addEqual(self, *args)

    def Substract(*args):
        """
        Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Substract(*args)

    if _newclass:Substract = staticmethod(Substract)
    __swig_getmethods__["Substract"] = lambda x: Substract
    def substractEqual(self, *args):
        """
        substractEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_substractEqual(self, *args)

    def Multiply(*args):
        """
        Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Multiply(*args)

    if _newclass:Multiply = staticmethod(Multiply)
    __swig_getmethods__["Multiply"] = lambda x: Multiply
    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_multiplyEqual(self, *args)

    def Divide(*args):
        """
        Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Divide(*args)

    if _newclass:Divide = staticmethod(Divide)
    __swig_getmethods__["Divide"] = lambda x: Divide
    def divideEqual(self, *args):
        """
        divideEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_divideEqual(self, *args)

    def Modulus(*args):
        """
        Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Modulus(*args)

    if _newclass:Modulus = staticmethod(Modulus)
    __swig_getmethods__["Modulus"] = lambda x: Modulus
    def modulusEqual(self, *args):
        """
        modulusEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingClient.DataArrayInt_modulusEqual(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.DataArrayInt_updateTime(self)

    def CheckAndPreparePermutation(*args):
        """
        CheckAndPreparePermutation(int start, int end) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_CheckAndPreparePermutation(*args)

    if _newclass:CheckAndPreparePermutation = staticmethod(CheckAndPreparePermutation)
    __swig_getmethods__["CheckAndPreparePermutation"] = lambda x: CheckAndPreparePermutation
    def Range(*args):
        """
        Range(int begin, int end, int step) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Range(*args)

    if _newclass:Range = staticmethod(Range)
    __swig_getmethods__["Range"] = lambda x: Range
    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_getTinySerializationIntInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingClient.DataArrayInt_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, svec tinyInfoS)

        1
        """
        return _MEDCouplingClient.DataArrayInt_finishUnserialization(self, *args)

    def getDifferentValues(self):
        """
        getDifferentValues(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_getDifferentValues(self)

    def partitionByDifferentValues(self):
        """
        partitionByDifferentValues(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_partitionByDifferentValues(self)

    def New(*args):
        """
        New() -> DataArrayInt
        New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
        New(PyObject elt0, PyObject elt1 = None) -> DataArrayInt
        New(PyObject elt0) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self) -> DataArrayInt
        __init__(self, PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
        __init__(self, PyObject elt0, PyObject elt1 = None) -> DataArrayInt
        __init__(self, PyObject elt0) -> DataArrayInt

        1
        """
        this = _MEDCouplingClient.new_DataArrayInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayInt___str__(self)

    def __len__(self):
        """
        __len__(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt___len__(self)

    def __int__(self):
        """
        __int__(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt___int__(self)

    def __iter__(self):
        """
        __iter__(self) -> DataArrayIntIterator

        1
        """
        return _MEDCouplingClient.DataArrayInt___iter__(self)

    def BuildOld2NewArrayFromSurjectiveFormat2(*args):
        """
        BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI, 
            int newNbOfTuples) -> DataArrayInt
        BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args)

    if _newclass:BuildOld2NewArrayFromSurjectiveFormat2 = staticmethod(BuildOld2NewArrayFromSurjectiveFormat2)
    __swig_getmethods__["BuildOld2NewArrayFromSurjectiveFormat2"] = lambda x: BuildOld2NewArrayFromSurjectiveFormat2
    def setValues(self, *args):
        """
        setValues(self, PyObject li, int nbOfTuples, int nbOfElsPerTuple)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setValues(self, *args)

    def getValues(self):
        """
        getValues(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_getValues(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, DataArrayInt other, string reason) -> bool
        isEqualIfNotWhy(self, DataArrayInt other) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_isEqualIfNotWhy(self, *args)

    def getValuesAsTuple(self):
        """
        getValuesAsTuple(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_getValuesAsTuple(self)

    def MakePartition(*args):
        """
        MakePartition(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> groups, 
            int newNb, 
            std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)> fidsOfGroups) -> DataArrayInt
        MakePartition(PyObject gps, int newNb) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_MakePartition(*args)

    if _newclass:MakePartition = staticmethod(MakePartition)
    __swig_getmethods__["MakePartition"] = lambda x: MakePartition
    def transformWithIndArr(self, *args):
        """
        transformWithIndArr(self, int indArrBg, int indArrEnd)
        transformWithIndArr(self, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayInt_transformWithIndArr(self, *args)

    def getIdsEqualList(self, *args):
        """
        getIdsEqualList(self, int valsBg, int valsEnd) -> DataArrayInt
        getIdsEqualList(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIdsEqualList(self, *args)

    def getIdsNotEqualList(self, *args):
        """
        getIdsNotEqualList(self, int valsBg, int valsEnd) -> DataArrayInt
        getIdsNotEqualList(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_getIdsNotEqualList(self, *args)

    def splitByValueRange(self, *args):
        """
        splitByValueRange(self, int arrBg, int arrEnd, DataArrayInt castArr, DataArrayInt rankInsideCast, 
            DataArrayInt castsPresent)
        splitByValueRange(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_splitByValueRange(self, *args)

    def transformWithIndArrR(self, *args):
        """
        transformWithIndArrR(self, int indArrBg, int indArrEnd) -> DataArrayInt
        transformWithIndArrR(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_transformWithIndArrR(self, *args)

    def renumberInPlace(self, *args):
        """
        renumberInPlace(self, int old2New)
        renumberInPlace(self, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayInt_renumberInPlace(self, *args)

    def renumberInPlaceR(self, *args):
        """
        renumberInPlaceR(self, int new2Old)
        renumberInPlaceR(self, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayInt_renumberInPlaceR(self, *args)

    def renumberAndReduce(self, *args):
        """
        renumberAndReduce(self, int old2NewBg, int newNbOfTuple) -> DataArrayInt
        renumberAndReduce(self, PyObject li, int newNbOfTuple) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_renumberAndReduce(self, *args)

    def renumber(self, *args):
        """
        renumber(self, int old2New) -> DataArrayInt
        renumber(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_renumber(self, *args)

    def renumberR(self, *args):
        """
        renumberR(self, int new2Old) -> DataArrayInt
        renumberR(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_renumberR(self, *args)

    def selectByTupleId(self, *args):
        """
        selectByTupleId(self, int new2OldBg, int new2OldEnd) -> DataArrayInt
        selectByTupleId(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_selectByTupleId(self, *args)

    def selectByTupleIdSafe(self, *args):
        """
        selectByTupleIdSafe(self, int new2OldBg, int new2OldEnd) -> DataArrayInt
        selectByTupleIdSafe(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_selectByTupleIdSafe(self, *args)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> DataArrayInt
        keepSelectedComponents(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, DataArrayInt a, ivec compoIds)
        setSelectedComponents(self, DataArrayInt a, PyObject li)

        1
        """
        return _MEDCouplingClient.DataArrayInt_setSelectedComponents(self, *args)

    def getTuple(self, *args):
        """
        getTuple(self, int tupleId, int res)
        getTuple(self, int tupleId) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_getTuple(self, *args)

    def changeSurjectiveFormat(self, *args):
        """
        changeSurjectiveFormat(self, int targetNb, DataArrayInt arr, DataArrayInt arrI)
        changeSurjectiveFormat(self, int targetNb) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_changeSurjectiveFormat(self, *args)

    def selectByTupleRanges(self, *args):
        """
        selectByTupleRanges(self, std::vector<(std::pair<(int,int)>,std::allocator<(std::pair<(int,int)>)>)> ranges) -> DataArrayInt
        selectByTupleRanges(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_selectByTupleRanges(self, *args)

    def Meld(*args):
        """
        Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        Meld(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Meld(*args)

    if _newclass:Meld = staticmethod(Meld)
    __swig_getmethods__["Meld"] = lambda x: Meld
    def Aggregate(*args):
        """
        Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
        Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        Aggregate(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_Aggregate(*args)

    if _newclass:Aggregate = staticmethod(Aggregate)
    __swig_getmethods__["Aggregate"] = lambda x: Aggregate
    def BuildUnion(*args):
        """
        BuildUnion(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        BuildUnion(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_BuildUnion(*args)

    if _newclass:BuildUnion = staticmethod(BuildUnion)
    __swig_getmethods__["BuildUnion"] = lambda x: BuildUnion
    def BuildIntersection(*args):
        """
        BuildIntersection(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        BuildIntersection(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt_BuildIntersection(*args)

    if _newclass:BuildIntersection = staticmethod(BuildIntersection)
    __swig_getmethods__["BuildIntersection"] = lambda x: BuildIntersection
    def getMaxValue(self, *args):
        """
        getMaxValue(self, int tupleId) -> int
        getMaxValue(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_getMaxValue(self, *args)

    def getMinValue(self, *args):
        """
        getMinValue(self, int tupleId) -> int
        getMinValue(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt_getMinValue(self, *args)

    def index(self, *args):
        """
        index(self, PyObject obj) -> int

        1
        """
        return _MEDCouplingClient.DataArrayInt_index(self, *args)

    def __contains__(self, *args):
        """
        __contains__(self, PyObject obj) -> bool

        1
        """
        return _MEDCouplingClient.DataArrayInt___contains__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___setitem__(self, *args)

    def __neg__(self):
        """
        __neg__(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___neg__(self)

    def __add__(self, *args):
        """
        __add__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___add__(self, *args)

    def __radd__(self, *args):
        """
        __radd__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___radd__(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt____iadd___(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___sub__(self, *args)

    def __rsub__(self, *args):
        """
        __rsub__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___rsub__(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt____isub___(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___mul__(self, *args)

    def __rmul__(self, *args):
        """
        __rmul__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___rmul__(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt____imul___(self, *args)

    def __div__(self, *args):
        """
        __div__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___div__(self, *args)

    def __rdiv__(self, *args):
        """
        __rdiv__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___rdiv__(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt____idiv___(self, *args)

    def __mod__(self, *args):
        """
        __mod__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___mod__(self, *args)

    def __rmod__(self, *args):
        """
        __rmod__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayInt___rmod__(self, *args)

    def ___imod___(self, *args):
        """
        ___imod___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayInt____imod___(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_DataArrayInt
    __del__ = lambda self : None;
DataArrayInt_swigregister = _MEDCouplingClient.DataArrayInt_swigregister
DataArrayInt_swigregister(DataArrayInt)

def DataArrayInt_Add(*args):
  """
    DataArrayInt_Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Add(*args)

def DataArrayInt_Substract(*args):
  """
    DataArrayInt_Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Substract(*args)

def DataArrayInt_Multiply(*args):
  """
    DataArrayInt_Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Multiply(*args)

def DataArrayInt_Divide(*args):
  """
    DataArrayInt_Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Divide(*args)

def DataArrayInt_Modulus(*args):
  """
    DataArrayInt_Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Modulus(*args)

def DataArrayInt_CheckAndPreparePermutation(*args):
  """
    DataArrayInt_CheckAndPreparePermutation(int start, int end) -> int

    1
    """
  return _MEDCouplingClient.DataArrayInt_CheckAndPreparePermutation(*args)

def DataArrayInt_Range(*args):
  """
    DataArrayInt_Range(int begin, int end, int step) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Range(*args)

def DataArrayInt_New(*args):
  """
    New() -> DataArrayInt
    New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
    New(PyObject elt0, PyObject elt1 = None) -> DataArrayInt
    DataArrayInt_New(PyObject elt0) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_New(*args)

def DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args):
  """
    BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI, 
        int newNbOfTuples) -> DataArrayInt
    DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI) -> PyObject

    1
    """
  return _MEDCouplingClient.DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args)

def DataArrayInt_MakePartition(*args):
  """
    MakePartition(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> groups, 
        int newNb, 
        std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)> fidsOfGroups) -> DataArrayInt
    DataArrayInt_MakePartition(PyObject gps, int newNb) -> PyObject

    1
    """
  return _MEDCouplingClient.DataArrayInt_MakePartition(*args)

def DataArrayInt_Meld(*args):
  """
    Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_Meld(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Meld(*args)

def DataArrayInt_Aggregate(*args):
  """
    Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
    Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_Aggregate(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_Aggregate(*args)

def DataArrayInt_BuildUnion(*args):
  """
    BuildUnion(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_BuildUnion(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_BuildUnion(*args)

def DataArrayInt_BuildIntersection(*args):
  """
    BuildIntersection(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_BuildIntersection(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayInt_BuildIntersection(*args)

class DataArrayIntIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DataArrayInt da) -> DataArrayIntIterator

        1
        """
        this = _MEDCouplingClient.new_DataArrayIntIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingClient.delete_DataArrayIntIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntIterator_next(self)

DataArrayIntIterator_swigregister = _MEDCouplingClient.DataArrayIntIterator_swigregister
DataArrayIntIterator_swigregister(DataArrayIntIterator)

class DataArrayIntTuple(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntTuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int pt, int nbOfComp) -> DataArrayIntTuple

        1
        """
        this = _MEDCouplingClient.new_DataArrayIntTuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCompo(self):
        """
        getNumberOfCompo(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple_getNumberOfCompo(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple_getConstPointer(self)

    def getPointer(self):
        """
        getPointer(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple_getPointer(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple___str__(self)

    def __int__(self):
        """
        __int__(self) -> int

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple___int__(self)

    def buildDAInt(self, *args):
        """
        buildDAInt(self, int nbOfTuples, int nbOfCompo) -> DataArrayInt
        buildDAInt(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple_buildDAInt(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple____idiv___(self, *args)

    def ___imod___(self, *args):
        """
        ___imod___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple____imod___(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayIntTuple

        1
        """
        return _MEDCouplingClient.DataArrayIntTuple___setitem__(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_DataArrayIntTuple
    __del__ = lambda self : None;
DataArrayIntTuple_swigregister = _MEDCouplingClient.DataArrayIntTuple_swigregister
DataArrayIntTuple_swigregister(DataArrayIntTuple)

ALL_C_MODE = _MEDCouplingClient.ALL_C_MODE
ALL_FORTRAN_MODE = _MEDCouplingClient.ALL_FORTRAN_MODE
NORM_POINT1 = _MEDCouplingClient.NORM_POINT1
NORM_SEG2 = _MEDCouplingClient.NORM_SEG2
NORM_SEG3 = _MEDCouplingClient.NORM_SEG3
NORM_SEG4 = _MEDCouplingClient.NORM_SEG4
NORM_POLYL = _MEDCouplingClient.NORM_POLYL
NORM_TRI3 = _MEDCouplingClient.NORM_TRI3
NORM_QUAD4 = _MEDCouplingClient.NORM_QUAD4
NORM_POLYGON = _MEDCouplingClient.NORM_POLYGON
NORM_TRI6 = _MEDCouplingClient.NORM_TRI6
NORM_TRI7 = _MEDCouplingClient.NORM_TRI7
NORM_QUAD8 = _MEDCouplingClient.NORM_QUAD8
NORM_QUAD9 = _MEDCouplingClient.NORM_QUAD9
NORM_QPOLYG = _MEDCouplingClient.NORM_QPOLYG
NORM_TETRA4 = _MEDCouplingClient.NORM_TETRA4
NORM_PYRA5 = _MEDCouplingClient.NORM_PYRA5
NORM_PENTA6 = _MEDCouplingClient.NORM_PENTA6
NORM_HEXA8 = _MEDCouplingClient.NORM_HEXA8
NORM_TETRA10 = _MEDCouplingClient.NORM_TETRA10
NORM_HEXGP12 = _MEDCouplingClient.NORM_HEXGP12
NORM_PYRA13 = _MEDCouplingClient.NORM_PYRA13
NORM_PENTA15 = _MEDCouplingClient.NORM_PENTA15
NORM_HEXA20 = _MEDCouplingClient.NORM_HEXA20
NORM_HEXA27 = _MEDCouplingClient.NORM_HEXA27
NORM_POLYHED = _MEDCouplingClient.NORM_POLYHED
NORM_ERROR = _MEDCouplingClient.NORM_ERROR
NORM_MAXTYPE = _MEDCouplingClient.NORM_MAXTYPE
class GenericMesh(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericMesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingClient.delete_GenericMesh
    __del__ = lambda self : None;
GenericMesh_swigregister = _MEDCouplingClient.GenericMesh_swigregister
GenericMesh_swigregister(GenericMesh)

NoNature = _MEDCouplingClient.NoNature
ConservativeVolumic = _MEDCouplingClient.ConservativeVolumic
Integral = _MEDCouplingClient.Integral
IntegralGlobConstraint = _MEDCouplingClient.IntegralGlobConstraint
RevIntegral = _MEDCouplingClient.RevIntegral
class MEDCouplingNatureOfField(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNatureOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNatureOfField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getRepr(*args):
        """
        getRepr(NatureOfField nat) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingNatureOfField_getRepr(*args)

    if _newclass:getRepr = staticmethod(getRepr)
    __swig_getmethods__["getRepr"] = lambda x: getRepr
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingNatureOfField
    __del__ = lambda self : None;
MEDCouplingNatureOfField_swigregister = _MEDCouplingClient.MEDCouplingNatureOfField_swigregister
MEDCouplingNatureOfField_swigregister(MEDCouplingNatureOfField)

def MEDCouplingNatureOfField_getRepr(*args):
  """
    MEDCouplingNatureOfField_getRepr(NatureOfField nat) -> char

    1
    """
  return _MEDCouplingClient.MEDCouplingNatureOfField_getRepr(*args)

class MEDCouplingTimeDiscretization(TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingTimeDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingTimeDiscretization, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_updateTime(self)

    def New(*args):
        """
        New(TypeOfTimeDiscretization type) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTimeUnit(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_copyTinyAttrFrom(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_copyTinyStringsFrom(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_checkCoherency(self)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_areCompatibleForMeld(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_isEqualIfNotWhy(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_isEqualWithoutConsideringStr(self, *args)

    def buildNewTimeReprFromThis(self, *args):
        """
        buildNewTimeReprFromThis(self, TypeOfTimeDiscretization type, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_buildNewTimeReprFromThis(self, *args)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_divideEqual(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTinySerializationDbleInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_performCpy(self, *args)

    def setTimeTolerance(self, *args):
        """
        setTimeTolerance(self, double val)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setTimeTolerance(self, *args)

    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTimeTolerance(self)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_checkTimePresence(self, *args)

    def setArray(self, *args):
        """
        setArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setArray(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setEndArray(self, *args)

    def setArrays(self, *args):
        """
        setArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            TimeLabel owner)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setArrays(self, *args)

    def getArray(self, *args):
        """
        getArray(self) -> DataArrayDouble
        getArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getArray(self, *args)

    def getEndArray(self, *args):
        """
        getEndArray(self) -> DataArrayDouble
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getEndArray(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getValueForTime(self, *args)

    def getArrays(self, *args):
        """
        getArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getArrays(self, *args)

    def isBefore(self, *args):
        """
        isBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_isBefore(self, *args)

    def isStrictlyBefore(self, *args):
        """
        isStrictlyBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_isStrictlyBefore(self, *args)

    def getTime(self, *args):
        """
        getTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getEndTime(self, *args)

    def setTime(self, *args):
        """
        setTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setTime(self, *args)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setIteration(self, *args)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setOrder(self, *args)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double val)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setTimeValue(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setEndTimeValue(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setEndTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_getValueOnDiscTime(self, *args)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_inverse(self)

    def trace(self):
        """
        trace(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_trace(self)

    def deviator(self):
        """
        deviator(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_maxPerTuple(self)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, MEDCouplingTimeDiscretization other, ivec compoIds)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setSelectedComponents(self, *args)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_changeNbOfComponents(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_sortPerTuple(self, *args)

    def setUniformValue(self, *args):
        """
        setUniformValue(self, int nbOfTuple, int nbOfCompo, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_setUniformValue(self, *args)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_applyLin(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_applyFunc3(self, *args)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, FunctionToEvaluate func)
        applyFunc(self, int nbOfComp, char func)
        applyFunc(self, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_applyFunc(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_applyFuncFast64(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, DataArrayDouble loc, int nbOfComp, FunctionToEvaluate func)
        fillFromAnalytic(self, DataArrayDouble loc, int nbOfComp, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, DataArrayDouble loc, int nbOfComp, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, DataArrayDouble loc, int nbOfComp, svec varsOrder, 
            char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingTimeDiscretization_fillFromAnalytic3(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingTimeDiscretization
    __del__ = lambda self : None;
MEDCouplingTimeDiscretization_swigregister = _MEDCouplingClient.MEDCouplingTimeDiscretization_swigregister
MEDCouplingTimeDiscretization_swigregister(MEDCouplingTimeDiscretization)

def MEDCouplingTimeDiscretization_New(*args):
  """
    MEDCouplingTimeDiscretization_New(TypeOfTimeDiscretization type) -> MEDCouplingTimeDiscretization

    1
    """
  return _MEDCouplingClient.MEDCouplingTimeDiscretization_New(*args)

class MEDCouplingNoTimeLabel(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNoTimeLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNoTimeLabel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingNoTimeLabel
        __init__(self, MEDCouplingTimeDiscretization other, bool deepCpy) -> MEDCouplingNoTimeLabel

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingNoTimeLabel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_divideEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_isEqualWithoutConsideringStr(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_areCompatibleForMeld(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_performCpy(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_checkTimePresence(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getValueForTime(self, *args)

    def isBefore(self, *args):
        """
        isBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_isBefore(self, *args)

    def isStrictlyBefore(self, *args):
        """
        isStrictlyBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_isStrictlyBefore(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setEndTimeValue(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_setEndTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getValueOnDiscTime(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingClient.MEDCouplingNoTimeLabel_finishUnserialization2(self, *args)

    DISCRETIZATION = _MEDCouplingClient.MEDCouplingNoTimeLabel_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingNoTimeLabel
    __del__ = lambda self : None;
MEDCouplingNoTimeLabel_swigregister = _MEDCouplingClient.MEDCouplingNoTimeLabel_swigregister
MEDCouplingNoTimeLabel_swigregister(MEDCouplingNoTimeLabel)
cvar = _MEDCouplingClient.cvar
MEDCouplingNoTimeLabel.REPR = _MEDCouplingClient.cvar.MEDCouplingNoTimeLabel_REPR

class MEDCouplingWithTimeStep(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingWithTimeStep, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingWithTimeStep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingWithTimeStep

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingWithTimeStep()
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getStringRepr(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_copyTinyAttrFrom(self, *args)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_divideEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_isEqualWithoutConsideringStr(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_areCompatibleForMeld(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_performCpy(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_checkTimePresence(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_setEndTimeValue(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingWithTimeStep_getValueOnDiscTime(self, *args)

    DISCRETIZATION = _MEDCouplingClient.MEDCouplingWithTimeStep_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingWithTimeStep
    __del__ = lambda self : None;
MEDCouplingWithTimeStep_swigregister = _MEDCouplingClient.MEDCouplingWithTimeStep_swigregister
MEDCouplingWithTimeStep_swigregister(MEDCouplingWithTimeStep)
MEDCouplingWithTimeStep.REPR = _MEDCouplingClient.cvar.MEDCouplingWithTimeStep_REPR

class MEDCouplingConstOnTimeInterval(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingConstOnTimeInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingConstOnTimeInterval, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingConstOnTimeInterval

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingConstOnTimeInterval()
        try: self.this.append(this)
        except: self.this = this
    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_copyTinyAttrFrom(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_performCpy(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_areCompatibleForMeld(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_isEqualWithoutConsideringStr(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getValueOnDiscTime(self, *args)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getEnum(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getStringRepr(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_divideEqual(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_setEndTimeValue(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingConstOnTimeInterval_checkTimePresence(self, *args)

    DISCRETIZATION = _MEDCouplingClient.MEDCouplingConstOnTimeInterval_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingConstOnTimeInterval
    __del__ = lambda self : None;
MEDCouplingConstOnTimeInterval_swigregister = _MEDCouplingClient.MEDCouplingConstOnTimeInterval_swigregister
MEDCouplingConstOnTimeInterval_swigregister(MEDCouplingConstOnTimeInterval)
MEDCouplingConstOnTimeInterval.REPR = _MEDCouplingClient.cvar.MEDCouplingConstOnTimeInterval_REPR

class MEDCouplingTwoTimeSteps(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingTwoTimeSteps, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingTwoTimeSteps, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_updateTime(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_copyTinyAttrFrom(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_copyTinyStringsFrom(self, *args)

    def getEndArray(self, *args):
        """
        getEndArray(self) -> DataArrayDouble
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getEndArray(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_checkCoherency(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_isEqualWithoutConsideringStr(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_checkTimePresence(self, *args)

    def getArrays(self, *args):
        """
        getArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getArrays(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setEndArray(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setEndTimeValue(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getTinySerializationDbleInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_finishUnserialization2(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_getArraysForTime(self, *args)

    def setArrays(self, *args):
        """
        setArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            TimeLabel owner)

        1
        """
        return _MEDCouplingClient.MEDCouplingTwoTimeSteps_setArrays(self, *args)

MEDCouplingTwoTimeSteps_swigregister = _MEDCouplingClient.MEDCouplingTwoTimeSteps_swigregister
MEDCouplingTwoTimeSteps_swigregister(MEDCouplingTwoTimeSteps)

class MEDCouplingLinearTime(MEDCouplingTwoTimeSteps):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTwoTimeSteps]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingLinearTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTwoTimeSteps]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingLinearTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingLinearTime

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingLinearTime()
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_getEnum(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_checkCoherency(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_performCpy(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_areCompatibleForMeld(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_getValueOnDiscTime(self, *args)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingClient.MEDCouplingLinearTime_divideEqual(self, *args)

    DISCRETIZATION = _MEDCouplingClient.MEDCouplingLinearTime_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingLinearTime
    __del__ = lambda self : None;
MEDCouplingLinearTime_swigregister = _MEDCouplingClient.MEDCouplingLinearTime_swigregister
MEDCouplingLinearTime_swigregister(MEDCouplingLinearTime)
MEDCouplingLinearTime.REPR = _MEDCouplingClient.cvar.MEDCouplingLinearTime_REPR

class MEDCouplingFieldDiscretization(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretization, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(TypeOfField type) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def getPrecision(self):
        """
        getPrecision(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getPrecision(self)

    def setPrecision(self, *args):
        """
        setPrecision(self, double val)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_setPrecision(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_updateTime(self)

    def getTypeOfFieldFromStringRepr(*args):
        """
        getTypeOfFieldFromStringRepr(char repr) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args)

    if _newclass:getTypeOfFieldFromStringRepr = staticmethod(getTypeOfFieldFromStringRepr)
    __swig_getmethods__["getTypeOfFieldFromStringRepr"] = lambda x: getTypeOfFieldFromStringRepr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getEnum(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_isEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_isEqualWithoutConsideringStr(self, *args)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getRepr(self)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getOffsetArr(self, *args)

    def normL1(self, *args):
        """
        normL1(self, MEDCouplingMesh mesh, DataArrayDouble arr, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_normL1(self, *args)

    def normL2(self, *args):
        """
        normL2(self, MEDCouplingMesh mesh, DataArrayDouble arr, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_normL2(self, *args)

    def integral(self, *args):
        """
        integral(self, MEDCouplingMesh mesh, DataArrayDouble arr, bool isWAbs, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_integral(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_checkCompatibilityWithNature(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, int old2NewBg, bool check = True)
        renumberCells(self, int old2NewBg)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_renumberCells(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_renumberArraysForCell(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getValueOnMulti(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_computeTupleIdsToSelectFromCellIds(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_buildSubMeshData(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_renumberValuesOnCellsR(self, *args)

    def getSerializationIntArray(self, *args):
        """
        getSerializationIntArray(self, DataArrayInt arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getSerializationIntArray(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_finishUnserialization(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_resizeForUnserialization(self, *args)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, MEDCouplingMesh m, NormalizedCellType type, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_setGaussLocalizationOnType(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, MEDCouplingMesh m, int begin, int end, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_setGaussLocalizationOnCells(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneType(self, *args)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> std::set<(int)>

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getGaussLocalizationIdsOfOneType(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId, ivec cellIds)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getCellIdsHavingGaussLocalization(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_getGaussLocalization(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretization
    __del__ = lambda self : None;
    def clonePart(self, *args):
        """
        clonePart(self, PyObject li) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretization_clonePart(self, *args)

MEDCouplingFieldDiscretization_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretization_swigregister
MEDCouplingFieldDiscretization_swigregister(MEDCouplingFieldDiscretization)

def MEDCouplingFieldDiscretization_New(*args):
  """
    MEDCouplingFieldDiscretization_New(TypeOfField type) -> MEDCouplingFieldDiscretization

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDiscretization_New(*args)

def MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args):
  """
    MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(char repr) -> TypeOfField

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args)

class MEDCouplingFieldDiscretizationP0(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP0, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP0, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getRepr(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_isEqualIfNotWhy(self, *args)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getLocalizationOfDiscValues(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_checkCompatibilityWithNature(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_getValueOnMulti(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_renumberValuesOnCellsR(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_computeTupleIdsToSelectFromCellIds(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretizationP0
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationP0_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationP0_swigregister
MEDCouplingFieldDiscretizationP0_swigregister(MEDCouplingFieldDiscretizationP0)
MEDCouplingFieldDiscretizationP0.REPR = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationP0_REPR
MEDCouplingFieldDiscretizationP0.TYPE = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationP0_TYPE

class MEDCouplingFieldDiscretizationOnNodes(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationOnNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationOnNodes, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_checkCoherencyBetween(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnCellsR(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_getValueOnPos(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretizationOnNodes
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationOnNodes_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationOnNodes_swigregister
MEDCouplingFieldDiscretizationOnNodes_swigregister(MEDCouplingFieldDiscretizationOnNodes)

class MEDCouplingFieldDiscretizationP1(MEDCouplingFieldDiscretizationOnNodes):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP1, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP1, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_getRepr(self)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_checkCompatibilityWithNature(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_isEqualIfNotWhy(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_getValueOn(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_getValueOnMulti(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretizationP1
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationP1_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationP1_swigregister
MEDCouplingFieldDiscretizationP1_swigregister(MEDCouplingFieldDiscretizationP1)
MEDCouplingFieldDiscretizationP1.REPR = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationP1_REPR
MEDCouplingFieldDiscretizationP1.TYPE = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationP1_TYPE

class MEDCouplingFieldDiscretizationPerCell(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationPerCell, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationPerCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getArrayOfDiscIds(self):
        """
        getArrayOfDiscIds(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationPerCell_getArrayOfDiscIds(self)

MEDCouplingFieldDiscretizationPerCell_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationPerCell_swigregister
MEDCouplingFieldDiscretizationPerCell_swigregister(MEDCouplingFieldDiscretizationPerCell)

class MEDCouplingFieldDiscretizationGauss(MEDCouplingFieldDiscretizationPerCell):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGauss, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingFieldDiscretizationGauss

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingFieldDiscretizationGauss()
        try: self.this.append(this)
        except: self.this = this
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getEnum(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_isEqualWithoutConsideringStr(self, *args)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getRepr(self)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_checkCompatibilityWithNature(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_finishUnserialization(self, *args)

    def getSerializationIntArray(self, *args):
        """
        getSerializationIntArray(self, DataArrayInt arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getSerializationIntArray(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_resizeForUnserialization(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getValueOnMulti(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_renumberValuesOnCellsR(self, *args)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, MEDCouplingMesh m, NormalizedCellType type, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_setGaussLocalizationOnType(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, MEDCouplingMesh m, int begin, int end, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_setGaussLocalizationOnCells(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdOfOneType(self, *args)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> std::set<(int)>

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdsOfOneType(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId, ivec cellIds)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getCellIdsHavingGaussLocalization(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_getGaussLocalization(self, *args)

    def splitIntoSingleGaussDicrPerCellType(self, *args):
        """
        splitIntoSingleGaussDicrPerCellType(self, ivec locIds) -> std::vector<(p.ParaMEDMEM::DataArrayInt,std::allocator<(p.ParaMEDMEM::DataArrayInt)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_splitIntoSingleGaussDicrPerCellType(self, *args)

    def buildNbOfGaussPointPerCellField(self):
        """
        buildNbOfGaussPointPerCellField(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_buildNbOfGaussPointPerCellField(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretizationGauss
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationGauss_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationGauss_swigregister
MEDCouplingFieldDiscretizationGauss_swigregister(MEDCouplingFieldDiscretizationGauss)
MEDCouplingFieldDiscretizationGauss.REPR = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationGauss_REPR
MEDCouplingFieldDiscretizationGauss.TYPE = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationGauss_TYPE

class MEDCouplingFieldDiscretizationGaussNE(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGaussNE, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGaussNE, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingFieldDiscretizationGaussNE

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingFieldDiscretizationGaussNE()
        try: self.this.append(this)
        except: self.this = this
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getRepr(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_isEqualIfNotWhy(self, *args)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_checkCompatibilityWithNature(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_getValueOnMulti(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnCellsR(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretizationGaussNE
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationGaussNE_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationGaussNE_swigregister
MEDCouplingFieldDiscretizationGaussNE_swigregister(MEDCouplingFieldDiscretizationGaussNE)
MEDCouplingFieldDiscretizationGaussNE.REPR = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationGaussNE_REPR
MEDCouplingFieldDiscretizationGaussNE.TYPE = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationGaussNE_TYPE

class MEDCouplingFieldDiscretizationKriging(MEDCouplingFieldDiscretizationOnNodes):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationKriging, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationKriging, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_getEnum(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_getRepr(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_getStringRepr(self)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_checkCompatibilityWithNature(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_isEqualIfNotWhy(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_getValueOn(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_getValueOnMulti(self, *args)

    def computeVectorOfCoefficients(self, *args):
        """
        computeVectorOfCoefficients(self, MEDCouplingMesh mesh, DataArrayDouble arr, int isDrift) -> DataArrayDouble
        computeVectorOfCoefficients(self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_computeVectorOfCoefficients(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDiscretizationKriging
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationKriging_swigregister = _MEDCouplingClient.MEDCouplingFieldDiscretizationKriging_swigregister
MEDCouplingFieldDiscretizationKriging_swigregister(MEDCouplingFieldDiscretizationKriging)
MEDCouplingFieldDiscretizationKriging.REPR = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationKriging_REPR
MEDCouplingFieldDiscretizationKriging.TYPE = _MEDCouplingClient.cvar.MEDCouplingFieldDiscretizationKriging_TYPE

class MEDCouplingGaussLocalization(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingGaussLocalization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingGaussLocalization, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec w) -> MEDCouplingGaussLocalization

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingGaussLocalization(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getType(self)

    def getNumberOfGaussPt(self):
        """
        getNumberOfGaussPt(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getNumberOfGaussPt(self)

    def getDimension(self):
        """
        getDimension(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getDimension(self)

    def getNumberOfPtsInRefCell(self):
        """
        getNumberOfPtsInRefCell(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getNumberOfPtsInRefCell(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getStringRepr(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_checkCoherency(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingGaussLocalization other, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_isEqual(self, *args)

    def getRefCoords(self):
        """
        getRefCoords(self) -> dvec

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getRefCoords(self)

    def getRefCoord(self, *args):
        """
        getRefCoord(self, int ptIdInCell, int comp) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getRefCoord(self, *args)

    def getGaussCoords(self):
        """
        getGaussCoords(self) -> dvec

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getGaussCoords(self)

    def getGaussCoord(self, *args):
        """
        getGaussCoord(self, int gaussPtIdInCell, int comp) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getGaussCoord(self, *args)

    def getWeights(self):
        """
        getWeights(self) -> dvec

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getWeights(self)

    def getWeight(self, *args):
        """
        getWeight(self, int gaussPtIdInCell, double newVal) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_getWeight(self, *args)

    def setRefCoord(self, *args):
        """
        setRefCoord(self, int ptIdInCell, int comp, double newVal)

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_setRefCoord(self, *args)

    def setGaussCoord(self, *args):
        """
        setGaussCoord(self, int gaussPtIdInCell, int comp, double newVal)

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_setGaussCoord(self, *args)

    def setWeight(self, *args):
        """
        setWeight(self, int gaussPtIdInCell, double newVal)

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_setWeight(self, *args)

    def BuildNewInstanceFromTinyInfo(*args):
        """
        BuildNewInstanceFromTinyInfo(int dim, ivec tinyData) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args)

    if _newclass:BuildNewInstanceFromTinyInfo = staticmethod(BuildNewInstanceFromTinyInfo)
    __swig_getmethods__["BuildNewInstanceFromTinyInfo"] = lambda x: BuildNewInstanceFromTinyInfo
    def AreAlmostEqual(*args):
        """
        AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingGaussLocalization_AreAlmostEqual(*args)

    if _newclass:AreAlmostEqual = staticmethod(AreAlmostEqual)
    __swig_getmethods__["AreAlmostEqual"] = lambda x: AreAlmostEqual
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingGaussLocalization
    __del__ = lambda self : None;
MEDCouplingGaussLocalization_swigregister = _MEDCouplingClient.MEDCouplingGaussLocalization_swigregister
MEDCouplingGaussLocalization_swigregister(MEDCouplingGaussLocalization)

def MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args):
  """
    MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(int dim, ivec tinyData) -> MEDCouplingGaussLocalization

    1
    """
  return _MEDCouplingClient.MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args)

def MEDCouplingGaussLocalization_AreAlmostEqual(*args):
  """
    MEDCouplingGaussLocalization_AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

    1
    """
  return _MEDCouplingClient.MEDCouplingGaussLocalization_AreAlmostEqual(*args)

class MEDCouplingPointSet(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingPointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingPointSet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_updateTime(self)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coords)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_setCoords(self, *args)

    def getCoordinatesAndOwner(self):
        """
        getCoordinatesAndOwner(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getCoordinatesAndOwner(self)

    def areCoordsEqual(self, *args):
        """
        areCoordsEqual(self, MEDCouplingPointSet other, double prec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_areCoordsEqual(self, *args)

    def zipCoords(self):
        """
        zipCoords(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_zipCoords(self)

    def getCaracteristicDimension(self):
        """
        getCaracteristicDimension(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getCaracteristicDimension(self)

    def recenterForMaxPrecision(self, *args):
        """
        recenterForMaxPrecision(self, double eps)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_recenterForMaxPrecision(self, *args)

    def changeSpaceDimension(self, *args):
        """
        changeSpaceDimension(self, int newSpaceDim, double dftVal = 0.)
        changeSpaceDimension(self, int newSpaceDim)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_changeSpaceDimension(self, *args)

    def tryToShareSameCoords(self, *args):
        """
        tryToShareSameCoords(self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_tryToShareSameCoords(self, *args)

    def buildPartOfMySelf2(self, *args):
        """
        buildPartOfMySelf2(self, int start, int end, int step) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_buildPartOfMySelf2(self, *args)

    def tryToShareSameCoordsPermute(self, *args):
        """
        tryToShareSameCoordsPermute(self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_tryToShareSameCoordsPermute(self, *args)

    def MergeNodesArray(*args):
        """
        MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_MergeNodesArray(*args)

    if _newclass:MergeNodesArray = staticmethod(MergeNodesArray)
    __swig_getmethods__["MergeNodesArray"] = lambda x: MergeNodesArray
    def BuildInstanceFromMeshType(*args):
        """
        BuildInstanceFromMeshType(MEDCouplingMeshType type) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_BuildInstanceFromMeshType(*args)

    if _newclass:BuildInstanceFromMeshType = staticmethod(BuildInstanceFromMeshType)
    __swig_getmethods__["BuildInstanceFromMeshType"] = lambda x: BuildInstanceFromMeshType
    def buildBoundaryMesh(self, *args):
        """
        buildBoundaryMesh(self, bool keepCoords) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_buildBoundaryMesh(self, *args)

    def isEmptyMesh(self, *args):
        """
        isEmptyMesh(self, ivec tinyInfo) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_isEmptyMesh(self, *args)

    def getTinySerializationInformation(self, *args):
        """
        getTinySerializationInformation(self, dvec tinyInfoD, ivec tinyInfo, svec littleStrings)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getTinySerializationInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, 
            svec littleStrings)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_resizeForUnserialization(self, *args)

    def serialize(self, *args):
        """
        serialize(self, DataArrayInt a1, DataArrayDouble a2)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_serialize(self, *args)

    def unserialization(self, *args):
        """
        unserialization(self, dvec tinyInfoD, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, 
            svec littleStrings)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_unserialization(self, *args)

    def zipCoordsTraducer(self):
        """
        zipCoordsTraducer(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_zipCoordsTraducer(self)

    def findBoundaryNodes(self):
        """
        findBoundaryNodes(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_findBoundaryNodes(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet___str__(self)

    def buildNewNumberingFromCommonNodesFormat(self, *args):
        """
        buildNewNumberingFromCommonNodesFormat(self, DataArrayInt comm, DataArrayInt commIndex) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_buildNewNumberingFromCommonNodesFormat(self, *args)

    def findCommonNodes(self, *args):
        """
        findCommonNodes(self, double prec, int limitTupleId = -1) -> PyObject
        findCommonNodes(self, double prec) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_findCommonNodes(self, *args)

    def getCoords(self):
        """
        getCoords(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getCoords(self)

    def buildPartOfMySelf(self, *args):
        """
        buildPartOfMySelf(self, PyObject li, bool keepCoords = True) -> PyObject
        buildPartOfMySelf(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_buildPartOfMySelf(self, *args)

    def buildPartOfMySelfNode(self, *args):
        """
        buildPartOfMySelfNode(self, PyObject li, bool fullyIn) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_buildPartOfMySelfNode(self, *args)

    def buildFacePartOfMySelfNode(self, *args):
        """
        buildFacePartOfMySelfNode(self, PyObject li, bool fullyIn) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_buildFacePartOfMySelfNode(self, *args)

    def renumberNodes(self, *args):
        """
        renumberNodes(self, PyObject li, int newNbOfNodes)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_renumberNodes(self, *args)

    def renumberNodes2(self, *args):
        """
        renumberNodes2(self, PyObject li, int newNbOfNodes)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_renumberNodes2(self, *args)

    def findNodesOnLine(self, *args):
        """
        findNodesOnLine(self, PyObject pt, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_findNodesOnLine(self, *args)

    def findNodesOnPlane(self, *args):
        """
        findNodesOnPlane(self, PyObject pt, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_findNodesOnPlane(self, *args)

    def getNodeIdsNearPoint(self, *args):
        """
        getNodeIdsNearPoint(self, PyObject pt, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getNodeIdsNearPoint(self, *args)

    def getNodeIdsNearPoints(self, *args):
        """
        getNodeIdsNearPoints(self, PyObject pt, int nbOfNodes, double eps) -> PyObject
        getNodeIdsNearPoints(self, PyObject pt, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getNodeIdsNearPoints(self, *args)

    def getCellsInBoundingBox(self, *args):
        """
        getCellsInBoundingBox(self, INTERP_KERNEL::DirectedBoundingBox bbox, double eps, 
            ivec elems)
        getCellsInBoundingBox(self, PyObject bbox, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_getCellsInBoundingBox(self, *args)

    def duplicateNodesInCoords(self, *args):
        """
        duplicateNodesInCoords(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_duplicateNodesInCoords(self, *args)

    def Rotate2DAlg(*args):
        """
        Rotate2DAlg(PyObject center, double angle, int nbNodes, PyObject coords)
        Rotate2DAlg(PyObject center, double angle, PyObject coords)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_Rotate2DAlg(*args)

    if _newclass:Rotate2DAlg = staticmethod(Rotate2DAlg)
    __swig_getmethods__["Rotate2DAlg"] = lambda x: Rotate2DAlg
    def Rotate3DAlg(*args):
        """
        Rotate3DAlg(PyObject center, PyObject vect, double angle, int nbNodes, 
            PyObject coords)
        Rotate3DAlg(PyObject center, PyObject vect, double angle, PyObject coords)

        1
        """
        return _MEDCouplingClient.MEDCouplingPointSet_Rotate3DAlg(*args)

    if _newclass:Rotate3DAlg = staticmethod(Rotate3DAlg)
    __swig_getmethods__["Rotate3DAlg"] = lambda x: Rotate3DAlg
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingPointSet
    __del__ = lambda self : None;
MEDCouplingPointSet_swigregister = _MEDCouplingClient.MEDCouplingPointSet_swigregister
MEDCouplingPointSet_swigregister(MEDCouplingPointSet)

def MEDCouplingPointSet_MergeNodesArray(*args):
  """
    MEDCouplingPointSet_MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingPointSet_MergeNodesArray(*args)

def MEDCouplingPointSet_BuildInstanceFromMeshType(*args):
  """
    MEDCouplingPointSet_BuildInstanceFromMeshType(MEDCouplingMeshType type) -> MEDCouplingPointSet

    1
    """
  return _MEDCouplingClient.MEDCouplingPointSet_BuildInstanceFromMeshType(*args)

def MEDCouplingPointSet_Rotate2DAlg(*args):
  """
    Rotate2DAlg(PyObject center, double angle, int nbNodes, PyObject coords)
    MEDCouplingPointSet_Rotate2DAlg(PyObject center, double angle, PyObject coords)

    1
    """
  return _MEDCouplingClient.MEDCouplingPointSet_Rotate2DAlg(*args)

def MEDCouplingPointSet_Rotate3DAlg(*args):
  """
    Rotate3DAlg(PyObject center, PyObject vect, double angle, int nbNodes, 
        PyObject coords)
    MEDCouplingPointSet_Rotate3DAlg(PyObject center, PyObject vect, double angle, PyObject coords)

    1
    """
  return _MEDCouplingClient.MEDCouplingPointSet_Rotate3DAlg(*args)

class MEDCouplingUMeshCell(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCell_getType(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCell___str__(self)

    def getAllConn(self):
        """
        getAllConn(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCell_getAllConn(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingUMeshCell
    __del__ = lambda self : None;
MEDCouplingUMeshCell_swigregister = _MEDCouplingClient.MEDCouplingUMeshCell_swigregister
MEDCouplingUMeshCell_swigregister(MEDCouplingUMeshCell)

class MEDCouplingUMeshCellIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCellIterator_next(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingUMeshCellIterator
    __del__ = lambda self : None;
MEDCouplingUMeshCellIterator_swigregister = _MEDCouplingClient.MEDCouplingUMeshCellIterator_swigregister
MEDCouplingUMeshCellIterator_swigregister(MEDCouplingUMeshCellIterator)

class MEDCouplingUMeshCellByTypeIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingUMeshCellByTypeIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCellByTypeIterator_next(self)

MEDCouplingUMeshCellByTypeIterator_swigregister = _MEDCouplingClient.MEDCouplingUMeshCellByTypeIterator_swigregister
MEDCouplingUMeshCellByTypeIterator_swigregister(MEDCouplingUMeshCellByTypeIterator)

class MEDCouplingUMeshCellByTypeEntry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingUMeshCellByTypeEntry
    __del__ = lambda self : None;
    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellByTypeIterator

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCellByTypeEntry___iter__(self)

MEDCouplingUMeshCellByTypeEntry_swigregister = _MEDCouplingClient.MEDCouplingUMeshCellByTypeEntry_swigregister
MEDCouplingUMeshCellByTypeEntry_swigregister(MEDCouplingUMeshCellByTypeEntry)

class MEDCouplingUMeshCellEntry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCellEntry_getType(self)

    def getNumberOfElems(self):
        """
        getNumberOfElems(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCellEntry_getNumberOfElems(self)

    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshCellEntry___iter__(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingUMeshCellEntry
    __del__ = lambda self : None;
MEDCouplingUMeshCellEntry_swigregister = _MEDCouplingClient.MEDCouplingUMeshCellEntry_swigregister
MEDCouplingUMeshCellEntry_swigregister(MEDCouplingUMeshCellEntry)

class MEDCouplingUMesh(MEDCouplingPointSet):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingPointSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingPointSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDCouplingUMesh
        New(char meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_clone(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_updateTime(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_checkCoherency(self)

    def setMeshDimension(self, *args):
        """
        setMeshDimension(self, int meshDim)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_setMeshDimension(self, *args)

    def allocateCells(self, *args):
        """
        allocateCells(self, int nbOfCells)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_allocateCells(self, *args)

    def finishInsertingCells(self):
        """
        finishInsertingCells(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_finishInsertingCells(self)

    def cellsByType(self):
        """
        cellsByType(self) -> MEDCouplingUMeshCellByTypeEntry

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_cellsByType(self)

    def setConnectivity(self, *args):
        """
        setConnectivity(self, DataArrayInt conn, DataArrayInt connIndex, bool isComputingTypes = True)
        setConnectivity(self, DataArrayInt conn, DataArrayInt connIndex)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_setConnectivity(self, *args)

    def getTypeOfCell(self, *args):
        """
        getTypeOfCell(self, int cellId) -> NormalizedCellType

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getTypeOfCell(self, *args)

    def setPartOfMySelf2(self, *args):
        """
        setPartOfMySelf2(self, int start, int end, int step, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_setPartOfMySelf2(self, *args)

    def getNumberOfNodesInCell(self, *args):
        """
        getNumberOfNodesInCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getNumberOfNodesInCell(self, *args)

    def getMeshLength(self):
        """
        getMeshLength(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getMeshLength(self)

    def computeTypes(self):
        """
        computeTypes(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_computeTypes(self)

    def giveCellsWithType(self, *args):
        """
        giveCellsWithType(self, NormalizedCellType type) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_giveCellsWithType(self, *args)

    def reprConnectivityOfThis(self):
        """
        reprConnectivityOfThis(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_reprConnectivityOfThis(self)

    def buildSetInstanceFromThis(self, *args):
        """
        buildSetInstanceFromThis(self, int spaceDim) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildSetInstanceFromThis(self, *args)

    def shiftNodeNumbersInConn(self, *args):
        """
        shiftNodeNumbersInConn(self, int delta)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_shiftNodeNumbersInConn(self, *args)

    def getQuadraticStatus(self):
        """
        getQuadraticStatus(self) -> std::vector<(bool,std::allocator<(bool)>)>

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getQuadraticStatus(self)

    def findCellIdsOnBoundary(self):
        """
        findCellIdsOnBoundary(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_findCellIdsOnBoundary(self)

    def computeSkin(self):
        """
        computeSkin(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_computeSkin(self)

    def checkConsecutiveCellTypes(self):
        """
        checkConsecutiveCellTypes(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_checkConsecutiveCellTypes(self)

    def rearrange2ConsecutiveCellTypes(self):
        """
        rearrange2ConsecutiveCellTypes(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_rearrange2ConsecutiveCellTypes(self)

    def sortCellsInMEDFileFrmt(self):
        """
        sortCellsInMEDFileFrmt(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_sortCellsInMEDFileFrmt(self)

    def convertCellArrayPerGeoType(self, *args):
        """
        convertCellArrayPerGeoType(self, DataArrayInt da) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convertCellArrayPerGeoType(self, *args)

    def computeFetchedNodeIds(self):
        """
        computeFetchedNodeIds(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_computeFetchedNodeIds(self)

    def zipConnectivityTraducer(self, *args):
        """
        zipConnectivityTraducer(self, int compType) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_zipConnectivityTraducer(self, *args)

    def computeNbOfNodesPerCell(self):
        """
        computeNbOfNodesPerCell(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_computeNbOfNodesPerCell(self)

    def orientCorrectlyPolyhedrons(self):
        """
        orientCorrectlyPolyhedrons(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_orientCorrectlyPolyhedrons(self)

    def isPresenceOfQuadratic(self):
        """
        isPresenceOfQuadratic(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_isPresenceOfQuadratic(self)

    def buildDirectionVectorField(self):
        """
        buildDirectionVectorField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildDirectionVectorField(self)

    def isContiguous1D(self):
        """
        isContiguous1D(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_isContiguous1D(self)

    def tessellate2D(self, *args):
        """
        tessellate2D(self, double eps)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_tessellate2D(self, *args)

    def tessellate2DCurve(self, *args):
        """
        tessellate2DCurve(self, double eps)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_tessellate2DCurve(self, *args)

    def convertQuadraticCellsToLinear(self):
        """
        convertQuadraticCellsToLinear(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convertQuadraticCellsToLinear(self)

    def convertDegeneratedCells(self):
        """
        convertDegeneratedCells(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convertDegeneratedCells(self)

    def areOnlySimplexCells(self):
        """
        areOnlySimplexCells(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_areOnlySimplexCells(self)

    def getEdgeRatioField(self):
        """
        getEdgeRatioField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getEdgeRatioField(self)

    def getAspectRatioField(self):
        """
        getAspectRatioField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getAspectRatioField(self)

    def getWarpField(self):
        """
        getWarpField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getWarpField(self)

    def getSkewField(self):
        """
        getSkewField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getSkewField(self)

    def convexEnvelop2D(self):
        """
        convexEnvelop2D(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convexEnvelop2D(self)

    def cppRepr(self):
        """
        cppRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_cppRepr(self)

    def Build0DMeshFromCoords(*args):
        """
        Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_Build0DMeshFromCoords(*args)

    if _newclass:Build0DMeshFromCoords = staticmethod(Build0DMeshFromCoords)
    __swig_getmethods__["Build0DMeshFromCoords"] = lambda x: Build0DMeshFromCoords
    def ComputeSpreadZoneGradually(*args):
        """
        ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_ComputeSpreadZoneGradually(*args)

    if _newclass:ComputeSpreadZoneGradually = staticmethod(ComputeSpreadZoneGradually)
    __swig_getmethods__["ComputeSpreadZoneGradually"] = lambda x: ComputeSpreadZoneGradually
    def ComputeRangesFromTypeDistribution(*args):
        """
        ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args)

    if _newclass:ComputeRangesFromTypeDistribution = staticmethod(ComputeRangesFromTypeDistribution)
    __swig_getmethods__["ComputeRangesFromTypeDistribution"] = lambda x: ComputeRangesFromTypeDistribution
    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingUMesh
        __init__(self, char meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingUMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh___str__(self)

    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh___iter__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject listOrDataArrI) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh___getitem__(self, *args)

    def setPartOfMySelf(self, *args):
        """
        setPartOfMySelf(self, PyObject li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_setPartOfMySelf(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh___setitem__(self, *args)

    def insertNextCell(self, *args):
        """
        insertNextCell(self, NormalizedCellType type, int size, PyObject li)
        insertNextCell(self, NormalizedCellType type, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_insertNextCell(self, *args)

    def getNodalConnectivity(self):
        """
        getNodalConnectivity(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getNodalConnectivity(self)

    def getNodalConnectivityIndex(self):
        """
        getNodalConnectivityIndex(self) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getNodalConnectivityIndex(self)

    def getAllTypes(self):
        """
        getAllTypes(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getAllTypes(self)

    def mergeNodes(self, *args):
        """
        mergeNodes(self, double precision) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_mergeNodes(self, *args)

    def mergeNodes2(self, *args):
        """
        mergeNodes2(self, double precision) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_mergeNodes2(self, *args)

    def checkButterflyCells(self, eps = 1e-12):
        """
        checkButterflyCells(self, double eps = 1e-12) -> PyObject
        checkButterflyCells(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_checkButterflyCells(self, eps)

    def splitByType(self):
        """
        splitByType(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_splitByType(self)

    def partitionBySpreadZone(self):
        """
        partitionBySpreadZone(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_partitionBySpreadZone(self)

    def keepSpecifiedCells(self, *args):
        """
        keepSpecifiedCells(self, NormalizedCellType type, PyObject ids) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_keepSpecifiedCells(self, *args)

    def checkConsecutiveCellTypesAndOrder(self, *args):
        """
        checkConsecutiveCellTypesAndOrder(self, PyObject li) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_checkConsecutiveCellTypesAndOrder(self, *args)

    def getRenumArrForConsecutiveCellTypesSpec(self, *args):
        """
        getRenumArrForConsecutiveCellTypesSpec(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getRenumArrForConsecutiveCellTypesSpec(self, *args)

    def findNodesToDuplicate(self, *args):
        """
        findNodesToDuplicate(self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_findNodesToDuplicate(self, *args)

    def findCellIdsLyingOn(self, *args):
        """
        findCellIdsLyingOn(self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_findCellIdsLyingOn(self, *args)

    def duplicateNodes(self, *args):
        """
        duplicateNodes(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_duplicateNodes(self, *args)

    def duplicateNodesInConn(self, *args):
        """
        duplicateNodesInConn(self, PyObject li, int offset)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_duplicateNodesInConn(self, *args)

    def renumberNodesInConn(self, *args):
        """
        renumberNodesInConn(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_renumberNodesInConn(self, *args)

    def getLevArrPerCellTypes(self, *args):
        """
        getLevArrPerCellTypes(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getLevArrPerCellTypes(self, *args)

    def AggregateSortedByTypeMeshesOnSameCoords(*args):
        """
        AggregateSortedByTypeMeshesOnSameCoords(PyObject ms) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args)

    if _newclass:AggregateSortedByTypeMeshesOnSameCoords = staticmethod(AggregateSortedByTypeMeshesOnSameCoords)
    __swig_getmethods__["AggregateSortedByTypeMeshesOnSameCoords"] = lambda x: AggregateSortedByTypeMeshesOnSameCoords
    def MergeUMeshesOnSameCoords(*args):
        """
        MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshesOnSameCoords(PyObject ms) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

    if _newclass:MergeUMeshesOnSameCoords = staticmethod(MergeUMeshesOnSameCoords)
    __swig_getmethods__["MergeUMeshesOnSameCoords"] = lambda x: MergeUMeshesOnSameCoords
    def FuseUMeshesOnSameCoords(*args):
        """
        FuseUMeshesOnSameCoords(PyObject ms, int compType) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args)

    if _newclass:FuseUMeshesOnSameCoords = staticmethod(FuseUMeshesOnSameCoords)
    __swig_getmethods__["FuseUMeshesOnSameCoords"] = lambda x: FuseUMeshesOnSameCoords
    def PutUMeshesOnSameAggregatedCoords(*args):
        """
        PutUMeshesOnSameAggregatedCoords(PyObject ms)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args)

    if _newclass:PutUMeshesOnSameAggregatedCoords = staticmethod(PutUMeshesOnSameAggregatedCoords)
    __swig_getmethods__["PutUMeshesOnSameAggregatedCoords"] = lambda x: PutUMeshesOnSameAggregatedCoords
    def MergeNodesOnUMeshesSharingSameCoords(*args):
        """
        MergeNodesOnUMeshesSharingSameCoords(PyObject ms, double eps)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args)

    if _newclass:MergeNodesOnUMeshesSharingSameCoords = staticmethod(MergeNodesOnUMeshesSharingSameCoords)
    __swig_getmethods__["MergeNodesOnUMeshesSharingSameCoords"] = lambda x: MergeNodesOnUMeshesSharingSameCoords
    def RemoveIdsFromIndexedArrays(*args):
        """
        RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx, 
            int offsetForRemoval = 0) -> bool
        RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args)

    if _newclass:RemoveIdsFromIndexedArrays = staticmethod(RemoveIdsFromIndexedArrays)
    __swig_getmethods__["RemoveIdsFromIndexedArrays"] = lambda x: RemoveIdsFromIndexedArrays
    def ExtractFromIndexedArrays(*args):
        """
        ExtractFromIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_ExtractFromIndexedArrays(*args)

    if _newclass:ExtractFromIndexedArrays = staticmethod(ExtractFromIndexedArrays)
    __swig_getmethods__["ExtractFromIndexedArrays"] = lambda x: ExtractFromIndexedArrays
    def SetPartOfIndexedArrays(*args):
        """
        SetPartOfIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
            DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_SetPartOfIndexedArrays(*args)

    if _newclass:SetPartOfIndexedArrays = staticmethod(SetPartOfIndexedArrays)
    __swig_getmethods__["SetPartOfIndexedArrays"] = lambda x: SetPartOfIndexedArrays
    def SetPartOfIndexedArraysSameIdx(*args):
        """
        SetPartOfIndexedArraysSameIdx(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
            DataArrayInt srcArr, DataArrayInt srcArrIndex)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args)

    if _newclass:SetPartOfIndexedArraysSameIdx = staticmethod(SetPartOfIndexedArraysSameIdx)
    __swig_getmethods__["SetPartOfIndexedArraysSameIdx"] = lambda x: SetPartOfIndexedArraysSameIdx
    def are2DCellsNotCorrectlyOriented(self, *args):
        """
        are2DCellsNotCorrectlyOriented(self, PyObject vec, bool polyOnly) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_are2DCellsNotCorrectlyOriented(self, *args)

    def orientCorrectly2DCells(self, *args):
        """
        orientCorrectly2DCells(self, PyObject vec, bool polyOnly)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_orientCorrectly2DCells(self, *args)

    def arePolyhedronsNotCorrectlyOriented(self):
        """
        arePolyhedronsNotCorrectlyOriented(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_arePolyhedronsNotCorrectlyOriented(self)

    def findAndCorrectBadOriented3DExtrudedCells(self):
        """
        findAndCorrectBadOriented3DExtrudedCells(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_findAndCorrectBadOriented3DExtrudedCells(self)

    def getFastAveragePlaneOfThis(self):
        """
        getFastAveragePlaneOfThis(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getFastAveragePlaneOfThis(self)

    def MergeUMeshes(*args):
        """
        MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshes(PyObject li) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_MergeUMeshes(*args)

    if _newclass:MergeUMeshes = staticmethod(MergeUMeshes)
    __swig_getmethods__["MergeUMeshes"] = lambda x: MergeUMeshes
    def areCellsIncludedIn(self, *args):
        """
        areCellsIncludedIn(self, MEDCouplingUMesh other, int compType) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_areCellsIncludedIn(self, *args)

    def areCellsIncludedIn2(self, *args):
        """
        areCellsIncludedIn2(self, MEDCouplingUMesh other) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_areCellsIncludedIn2(self, *args)

    def buildDescendingConnectivity(self, *args):
        """
        buildDescendingConnectivity(self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, 
            DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildDescendingConnectivity(self, *args)

    def buildDescendingConnectivity2(self, *args):
        """
        buildDescendingConnectivity2(self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, 
            DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity2(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildDescendingConnectivity2(self, *args)

    def computeNeighborsOfCells(self):
        """
        computeNeighborsOfCells(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_computeNeighborsOfCells(self)

    def ComputeNeighborsOfCellsAdv(*args):
        """
        ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, 
            DataArrayInt revDescI) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args)

    if _newclass:ComputeNeighborsOfCellsAdv = staticmethod(ComputeNeighborsOfCellsAdv)
    __swig_getmethods__["ComputeNeighborsOfCellsAdv"] = lambda x: ComputeNeighborsOfCellsAdv
    def emulateMEDMEMBDC(self, *args):
        """
        emulateMEDMEMBDC(self, MEDCouplingUMesh nM1LevMesh) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_emulateMEDMEMBDC(self, *args)

    def getReverseNodalConnectivity(self):
        """
        getReverseNodalConnectivity(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getReverseNodalConnectivity(self)

    def getPartBarycenterAndOwner(self, *args):
        """
        getPartBarycenterAndOwner(self, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getPartBarycenterAndOwner(self, *args)

    def getPartMeasureField(self, *args):
        """
        getPartMeasureField(self, bool isAbs, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getPartMeasureField(self, *args)

    def buildPartOrthogonalField(self, *args):
        """
        buildPartOrthogonalField(self, DataArrayInt da) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildPartOrthogonalField(self, *args)

    def getTypesOfPart(self, *args):
        """
        getTypesOfPart(self, DataArrayInt da) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getTypesOfPart(self, *args)

    def keepCellIdsByType(self, *args):
        """
        keepCellIdsByType(self, NormalizedCellType type, DataArrayInt da) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_keepCellIdsByType(self, *args)

    def getCellIdsLyingOnNodes(self, *args):
        """
        getCellIdsLyingOnNodes(self, PyObject li, bool fullyIn) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getCellIdsLyingOnNodes(self, *args)

    def getNodeIdsInUse(self):
        """
        getNodeIdsInUse(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getNodeIdsInUse(self)

    def Intersect2DMeshes(*args):
        """
        Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_Intersect2DMeshes(*args)

    if _newclass:Intersect2DMeshes = staticmethod(Intersect2DMeshes)
    __swig_getmethods__["Intersect2DMeshes"] = lambda x: Intersect2DMeshes
    def buildSlice3D(self, *args):
        """
        buildSlice3D(self, PyObject origin, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildSlice3D(self, *args)

    def buildSlice3DSurf(self, *args):
        """
        buildSlice3DSurf(self, PyObject origin, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildSlice3DSurf(self, *args)

    def getCellIdsCrossingPlane(self, *args):
        """
        getCellIdsCrossingPlane(self, PyObject origin, PyObject vec, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_getCellIdsCrossingPlane(self, *args)

    def convertToPolyTypes(self, *args):
        """
        convertToPolyTypes(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convertToPolyTypes(self, *args)

    def convertAllToPoly(self):
        """
        convertAllToPoly(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convertAllToPoly(self)

    def convertExtrudedPolyhedra(self):
        """
        convertExtrudedPolyhedra(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_convertExtrudedPolyhedra(self)

    def unPolyze(self):
        """
        unPolyze(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_unPolyze(self)

    def simplifyPolyhedra(self, *args):
        """
        simplifyPolyhedra(self, double eps)

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_simplifyPolyhedra(self, *args)

    def buildSpreadZonesWithPoly(self):
        """
        buildSpreadZonesWithPoly(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildSpreadZonesWithPoly(self)

    def buildExtrudedMesh(self, *args):
        """
        buildExtrudedMesh(self, MEDCouplingUMesh mesh1D, int policy) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMesh_buildExtrudedMesh(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingUMesh
    __del__ = lambda self : None;
MEDCouplingUMesh_swigregister = _MEDCouplingClient.MEDCouplingUMesh_swigregister
MEDCouplingUMesh_swigregister(MEDCouplingUMesh)

def MEDCouplingUMesh_New(*args):
  """
    New() -> MEDCouplingUMesh
    MEDCouplingUMesh_New(char meshName, int meshDim) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_New(*args)

def MEDCouplingUMesh_Build0DMeshFromCoords(*args):
  """
    MEDCouplingUMesh_Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_Build0DMeshFromCoords(*args)

def MEDCouplingUMesh_ComputeSpreadZoneGradually(*args):
  """
    MEDCouplingUMesh_ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_ComputeSpreadZoneGradually(*args)

def MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args):
  """
    MEDCouplingUMesh_ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args)

def MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args):
  """
    MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(PyObject ms) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args)

def MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args):
  """
    MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshesOnSameCoords(PyObject ms) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args):
  """
    MEDCouplingUMesh_FuseUMeshesOnSameCoords(PyObject ms, int compType) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args):
  """
    MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(PyObject ms)

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args)

def MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args):
  """
    MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(PyObject ms, double eps)

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args)

def MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args):
  """
    RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx, 
        int offsetForRemoval = 0) -> bool
    MEDCouplingUMesh_RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args)

def MEDCouplingUMesh_ExtractFromIndexedArrays(*args):
  """
    MEDCouplingUMesh_ExtractFromIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_ExtractFromIndexedArrays(*args)

def MEDCouplingUMesh_SetPartOfIndexedArrays(*args):
  """
    MEDCouplingUMesh_SetPartOfIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
        DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_SetPartOfIndexedArrays(*args)

def MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args):
  """
    MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
        DataArrayInt srcArr, DataArrayInt srcArrIndex)

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args)

def MEDCouplingUMesh_MergeUMeshes(*args):
  """
    MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshes(PyObject li) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_MergeUMeshes(*args)

def MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args):
  """
    MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, 
        DataArrayInt revDescI) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args)

def MEDCouplingUMesh_Intersect2DMeshes(*args):
  """
    MEDCouplingUMesh_Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingUMesh_Intersect2DMeshes(*args)

class MEDCouplingExtrudedMesh(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingExtrudedMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingExtrudedMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def build3DUnstructuredMesh(self):
        """
        build3DUnstructuredMesh(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh_build3DUnstructuredMesh(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingExtrudedMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh___str__(self)

    def getMesh2D(self):
        """
        getMesh2D(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh_getMesh2D(self)

    def getMesh1D(self):
        """
        getMesh1D(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh_getMesh1D(self)

    def getMesh3DIds(self):
        """
        getMesh3DIds(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMesh_getMesh3DIds(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingExtrudedMesh
    __del__ = lambda self : None;
MEDCouplingExtrudedMesh_swigregister = _MEDCouplingClient.MEDCouplingExtrudedMesh_swigregister
MEDCouplingExtrudedMesh_swigregister(MEDCouplingExtrudedMesh)

def MEDCouplingExtrudedMesh_New(*args):
  """
    MEDCouplingExtrudedMesh_New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingExtrudedMesh_New(*args)

class MEDCouplingCMesh(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDCouplingCMesh
        New(char meshName) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh_clone(self, *args)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coordsX, DataArrayDouble coordsY = None, 
            DataArrayDouble coordsZ = None)
        setCoords(self, DataArrayDouble coordsX, DataArrayDouble coordsY = None)
        setCoords(self, DataArrayDouble coordsX)

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh_setCoords(self, *args)

    def setCoordsAt(self, *args):
        """
        setCoordsAt(self, int i, DataArrayDouble arr)

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh_setCoordsAt(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingCMesh
        __init__(self, char meshName) -> MEDCouplingCMesh

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingCMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh___str__(self)

    def getCoordsAt(self, *args):
        """
        getCoordsAt(self, int i) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingCMesh_getCoordsAt(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingCMesh
    __del__ = lambda self : None;
MEDCouplingCMesh_swigregister = _MEDCouplingClient.MEDCouplingCMesh_swigregister
MEDCouplingCMesh_swigregister(MEDCouplingCMesh)

def MEDCouplingCMesh_New(*args):
  """
    New() -> MEDCouplingCMesh
    MEDCouplingCMesh_New(char meshName) -> MEDCouplingCMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingCMesh_New(*args)

class MEDCouplingField(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingField, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_checkCoherency(self)

    def areCompatibleForMerge(self, *args):
        """
        areCompatibleForMerge(self, MEDCouplingField other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingField_areCompatibleForMerge(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingField other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingField_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingField other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingField_isEqualWithoutConsideringStr(self, *args)

    def setMesh(self, *args):
        """
        setMesh(self, MEDCouplingMesh mesh)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setMesh(self, *args)

    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setName(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getDescription(self)

    def setDescription(self, *args):
        """
        setDescription(self, char desc)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setDescription(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getName(self)

    def getTypeOfField(self):
        """
        getTypeOfField(self) -> TypeOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getTypeOfField(self)

    def getNature(self):
        """
        getNature(self) -> NatureOfField

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getNature(self)

    def setNature(self, *args):
        """
        setNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setNature(self, *args)

    def getLocalizationOfDiscr(self):
        """
        getLocalizationOfDiscr(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getLocalizationOfDiscr(self)

    def buildMeasureField(self, *args):
        """
        buildMeasureField(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingField_buildMeasureField(self, *args)

    def getNumberOfTuplesExpected(self):
        """
        getNumberOfTuplesExpected(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getNumberOfTuplesExpected(self)

    def getNumberOfMeshPlacesExpected(self):
        """
        getNumberOfMeshPlacesExpected(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getNumberOfMeshPlacesExpected(self)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setGaussLocalizationOnType(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getGaussLocalization(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getGaussLocalizationIdOfOneType(self, *args)

    def setDiscretization(self, *args):
        """
        setDiscretization(self, MEDCouplingFieldDiscretization newDisc)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setDiscretization(self, *args)

    def getMesh(self):
        """
        getMesh(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getMesh(self)

    def getDiscretization(self):
        """
        getDiscretization(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getDiscretization(self)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getGaussLocalizationIdsOfOneType(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingField other, double meshPrec, double valsPrec) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingField_isEqualIfNotWhy(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingField_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingField_computeTupleIdsToSelectFromCellIds(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, PyObject li, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingClient.MEDCouplingField_setGaussLocalizationOnCells(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingField_getCellIdsHavingGaussLocalization(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingField
    __del__ = lambda self : None;
MEDCouplingField_swigregister = _MEDCouplingClient.MEDCouplingField_swigregister
MEDCouplingField_swigregister(MEDCouplingField)

class MEDCouplingFieldDouble(MEDCouplingField):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDouble, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        New(TypeOfField type) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getTimeUnit(self)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingFieldDouble other)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_copyTinyStringsFrom(self, *args)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingFieldDouble other)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_copyTinyAttrFrom(self, *args)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_advancedRepr(self)

    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_clone(self, *args)

    def cloneWithMesh(self, *args):
        """
        cloneWithMesh(self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_cloneWithMesh(self, *args)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_deepCpy(self)

    def buildNewTimeReprFromThis(self, *args):
        """
        buildNewTimeReprFromThis(self, TypeOfTimeDiscretization td, bool deepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_buildNewTimeReprFromThis(self, *args)

    def getTimeDiscretization(self):
        """
        getTimeDiscretization(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getTimeDiscretization(self)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getIJ(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, int cellId, int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getIJK(self, *args)

    def setArray(self, *args):
        """
        setArray(self, DataArrayDouble array)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setArray(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setEndArray(self, *args)

    def setTime(self, *args):
        """
        setTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setTime(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setEndTime(self, *args)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_applyLin(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        """
        getNumberOfTuples(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getNumberOfTuples(self)

    def getNumberOfValues(self):
        """
        getNumberOfValues(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getNumberOfValues(self)

    def setTimeTolerance(self, *args):
        """
        setTimeTolerance(self, double val)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setTimeTolerance(self, *args)

    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getTimeTolerance(self)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setEndIteration(self, *args)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setEndOrder(self, *args)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double val)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double val)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setEndTimeValue(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_updateTime(self)

    def changeUnderlyingMesh(self, *args):
        """
        changeUnderlyingMesh(self, MEDCouplingMesh other, int levOfCheck, double prec)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_changeUnderlyingMesh(self, *args)

    def substractInPlaceDM(self, *args):
        """
        substractInPlaceDM(self, MEDCouplingFieldDouble f, int levOfCheck, double prec)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_substractInPlaceDM(self, *args)

    def mergeNodes(self, *args):
        """
        mergeNodes(self, double eps, double epsOnVals = 1e-15) -> bool
        mergeNodes(self, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_mergeNodes(self, *args)

    def mergeNodes2(self, *args):
        """
        mergeNodes2(self, double eps, double epsOnVals = 1e-15) -> bool
        mergeNodes2(self, double eps) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_mergeNodes2(self, *args)

    def zipCoords(self, epsOnVals = 1e-15):
        """
        zipCoords(self, double epsOnVals = 1e-15) -> bool
        zipCoords(self) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_zipCoords(self, epsOnVals)

    def zipConnectivity(self, *args):
        """
        zipConnectivity(self, int compType, double epsOnVals = 1e-15) -> bool
        zipConnectivity(self, int compType) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_zipConnectivity(self, *args)

    def simplexize(self, *args):
        """
        simplexize(self, int policy) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_simplexize(self, *args)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_inverse(self)

    def trace(self):
        """
        trace(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_trace(self)

    def deviator(self):
        """
        deviator(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_maxPerTuple(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue = 0.)
        changeNbOfComponents(self, int newNbOfComp)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_changeNbOfComponents(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_sortPerTuple(self, *args)

    def assign(self, *args):
        """
        assign(self, double value) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_assign(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_fillFromAnalytic3(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_applyFunc3(self, *args)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, char func)
        applyFunc(self, int nbOfComp, double val)
        applyFunc(self, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_applyFunc(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_applyFuncFast64(self, *args)

    def getMaxValue(self):
        """
        getMaxValue(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getMaxValue(self)

    def getMinValue(self):
        """
        getMinValue(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getMinValue(self)

    def getAverageValue(self):
        """
        getAverageValue(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getAverageValue(self)

    def norm2(self):
        """
        norm2(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_norm2(self)

    def normMax(self):
        """
        normMax(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_normMax(self)

    def getWeightedAverageValue(self):
        """
        getWeightedAverageValue(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getWeightedAverageValue(self)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getIdsInRange(self, *args)

    def MeldFields(*args):
        """
        MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_MeldFields(*args)

    if _newclass:MeldFields = staticmethod(MeldFields)
    __swig_getmethods__["MeldFields"] = lambda x: MeldFields
    def DotFields(*args):
        """
        DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_DotFields(*args)

    if _newclass:DotFields = staticmethod(DotFields)
    __swig_getmethods__["DotFields"] = lambda x: DotFields
    def dot(self, *args):
        """
        dot(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_dot(self, *args)

    def CrossProductFields(*args):
        """
        CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_CrossProductFields(*args)

    if _newclass:CrossProductFields = staticmethod(CrossProductFields)
    __swig_getmethods__["CrossProductFields"] = lambda x: CrossProductFields
    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_crossProduct(self, *args)

    def MaxFields(*args):
        """
        MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_MaxFields(*args)

    if _newclass:MaxFields = staticmethod(MaxFields)
    __swig_getmethods__["MaxFields"] = lambda x: MaxFields
    def max(self, *args):
        """
        max(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_max(self, *args)

    def MinFields(*args):
        """
        MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_MinFields(*args)

    if _newclass:MinFields = staticmethod(MinFields)
    __swig_getmethods__["MinFields"] = lambda x: MinFields
    def AddFields(*args):
        """
        AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_AddFields(*args)

    if _newclass:AddFields = staticmethod(AddFields)
    __swig_getmethods__["AddFields"] = lambda x: AddFields
    def SubstractFields(*args):
        """
        SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_SubstractFields(*args)

    if _newclass:SubstractFields = staticmethod(SubstractFields)
    __swig_getmethods__["SubstractFields"] = lambda x: SubstractFields
    def MultiplyFields(*args):
        """
        MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_MultiplyFields(*args)

    if _newclass:MultiplyFields = staticmethod(MultiplyFields)
    __swig_getmethods__["MultiplyFields"] = lambda x: MultiplyFields
    def DivideFields(*args):
        """
        DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_DivideFields(*args)

    if _newclass:DivideFields = staticmethod(DivideFields)
    __swig_getmethods__["DivideFields"] = lambda x: DivideFields
    def min(self, *args):
        """
        min(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_min(self, *args)

    def __add__(self, *args):
        """
        __add__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble___div__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        __init__(self, TypeOfField type) -> MEDCouplingFieldDouble
        __init__(self, MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        __init__(self, MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingFieldDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble___str__(self)

    def getArray(self):
        """
        getArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getArray(self)

    def getArrays(self):
        """
        getArrays(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getArrays(self)

    def setArrays(self, *args):
        """
        setArrays(self, PyObject ls)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setArrays(self, *args)

    def getEndArray(self):
        """
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getEndArray(self)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, int i, int j, int k) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getValueOnMulti(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, PyObject sl) -> PyObject
        getValueOn(self, PyObject sl, double time) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getValueOn(self, *args)

    def setValues(self, *args):
        """
        setValues(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setValues(self, *args)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getTime(self)

    def getStartTime(self):
        """
        getStartTime(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getStartTime(self)

    def getEndTime(self):
        """
        getEndTime(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getEndTime(self)

    def accumulate(self, *args):
        """
        accumulate(self, int compId) -> double
        accumulate(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_accumulate(self, *args)

    def integral(self, *args):
        """
        integral(self, int compId, bool isWAbs) -> double
        integral(self, bool isWAbs) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_integral(self, *args)

    def normL1(self, *args):
        """
        normL1(self, int compId) -> double
        normL1(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_normL1(self, *args)

    def normL2(self, *args):
        """
        normL2(self, int compId) -> double
        normL2(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_normL2(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, PyObject li, bool check = True)
        renumberCells(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_renumberCells(self, *args)

    def renumberNodes(self, *args):
        """
        renumberNodes(self, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_renumberNodes(self, *args)

    def buildSubPart(self, *args):
        """
        buildSubPart(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_buildSubPart(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble___getitem__(self, *args)

    def getMaxValue2(self):
        """
        getMaxValue2(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getMaxValue2(self)

    def getMinValue2(self):
        """
        getMinValue2(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_getMinValue2(self)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, MEDCouplingFieldDouble f, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_setSelectedComponents(self, *args)

    def extractSlice3D(self, *args):
        """
        extractSlice3D(self, PyObject origin, PyObject vec, double eps) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_extractSlice3D(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble____idiv___(self, *args)

    def MergeFields(*args):
        """
        MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        MergeFields(PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_MergeFields(*args)

    if _newclass:MergeFields = staticmethod(MergeFields)
    __swig_getmethods__["MergeFields"] = lambda x: MergeFields
    def WriteVTK(*args):
        """
        WriteVTK(char fileName, PyObject li)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDouble_WriteVTK(*args)

    if _newclass:WriteVTK = staticmethod(WriteVTK)
    __swig_getmethods__["WriteVTK"] = lambda x: WriteVTK
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldDouble
    __del__ = lambda self : None;
MEDCouplingFieldDouble_swigregister = _MEDCouplingClient.MEDCouplingFieldDouble_swigregister
MEDCouplingFieldDouble_swigregister(MEDCouplingFieldDouble)

def MEDCouplingFieldDouble_New(*args):
  """
    New(TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
    New(TypeOfField type) -> MEDCouplingFieldDouble
    New(MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_New(*args)

def MEDCouplingFieldDouble_MeldFields(*args):
  """
    MEDCouplingFieldDouble_MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_MeldFields(*args)

def MEDCouplingFieldDouble_DotFields(*args):
  """
    MEDCouplingFieldDouble_DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_DotFields(*args)

def MEDCouplingFieldDouble_CrossProductFields(*args):
  """
    MEDCouplingFieldDouble_CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_CrossProductFields(*args)

def MEDCouplingFieldDouble_MaxFields(*args):
  """
    MEDCouplingFieldDouble_MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_MaxFields(*args)

def MEDCouplingFieldDouble_MinFields(*args):
  """
    MEDCouplingFieldDouble_MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_MinFields(*args)

def MEDCouplingFieldDouble_AddFields(*args):
  """
    MEDCouplingFieldDouble_AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_AddFields(*args)

def MEDCouplingFieldDouble_SubstractFields(*args):
  """
    MEDCouplingFieldDouble_SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_SubstractFields(*args)

def MEDCouplingFieldDouble_MultiplyFields(*args):
  """
    MEDCouplingFieldDouble_MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_MultiplyFields(*args)

def MEDCouplingFieldDouble_DivideFields(*args):
  """
    MEDCouplingFieldDouble_DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_DivideFields(*args)

def MEDCouplingFieldDouble_MergeFields(*args):
  """
    MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_MergeFields(PyObject li) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_MergeFields(*args)

def MEDCouplingFieldDouble_WriteVTK(*args):
  """
    MEDCouplingFieldDouble_WriteVTK(char fileName, PyObject li)

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDouble_WriteVTK(*args)

class MEDCouplingFieldTemplate(MEDCouplingField):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTemplate, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        New(TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldTemplate_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldTemplate_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldTemplate_advancedRepr(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldTemplate_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        __init__(self, TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingFieldTemplate(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldTemplate___str__(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldTemplate
    __del__ = lambda self : None;
MEDCouplingFieldTemplate_swigregister = _MEDCouplingClient.MEDCouplingFieldTemplate_swigregister
MEDCouplingFieldTemplate_swigregister(MEDCouplingFieldTemplate)

def MEDCouplingFieldTemplate_New(*args):
  """
    New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(TypeOfField type) -> MEDCouplingFieldTemplate

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldTemplate_New(*args)

class MEDCouplingMultiFields(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMultiFields, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMultiFields, name)
    __repr__ = _swig_repr
    def getNumberOfFields(self):
        """
        getNumberOfFields(self) -> int

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getNumberOfFields(self)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_deepCpy(self)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_advancedRepr(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_isEqualWithoutConsideringStr(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_checkCoherency(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_updateTime(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields___str__(self)

    def New(*args):
        """
        New(PyObject li) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self, PyObject li) -> MEDCouplingMultiFields

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingMultiFields(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFields(self):
        """
        getFields(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getFields(self)

    def getFieldAtPos(self, *args):
        """
        getFieldAtPos(self, int id) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getFieldAtPos(self, *args)

    def getMeshes(self):
        """
        getMeshes(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getMeshes(self)

    def getDifferentMeshes(self):
        """
        getDifferentMeshes(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getDifferentMeshes(self)

    def getArrays(self):
        """
        getArrays(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getArrays(self)

    def getDifferentArrays(self):
        """
        getDifferentArrays(self) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFields_getDifferentArrays(self)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingMultiFields
    __del__ = lambda self : None;
MEDCouplingMultiFields_swigregister = _MEDCouplingClient.MEDCouplingMultiFields_swigregister
MEDCouplingMultiFields_swigregister(MEDCouplingMultiFields)

def MEDCouplingMultiFields_New(*args):
  """
    MEDCouplingMultiFields_New(PyObject li) -> MEDCouplingMultiFields

    1
    """
  return _MEDCouplingClient.MEDCouplingMultiFields_New(*args)

class MEDCouplingDefinitionTime(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingDefinitionTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingDefinitionTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingDefinitionTime

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingDefinitionTime()
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args):
        """
        assign(self, MEDCouplingDefinitionTime other)

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime_assign(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingDefinitionTime other) -> bool

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime_isEqual(self, *args)

    def getTimeResolution(self):
        """
        getTimeResolution(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime_getTimeResolution(self)

    def getHotSpotsTime(self):
        """
        getHotSpotsTime(self) -> dvec

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime_getHotSpotsTime(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime___str__(self)

    def getIdsOnTimeRight(self, *args):
        """
        getIdsOnTimeRight(self, double tm) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime_getIdsOnTimeRight(self, *args)

    def getIdsOnTimeLeft(self, *args):
        """
        getIdsOnTimeLeft(self, double tm) -> PyObject

        1
        """
        return _MEDCouplingClient.MEDCouplingDefinitionTime_getIdsOnTimeLeft(self, *args)

    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingDefinitionTime
    __del__ = lambda self : None;
MEDCouplingDefinitionTime_swigregister = _MEDCouplingClient.MEDCouplingDefinitionTime_swigregister
MEDCouplingDefinitionTime_swigregister(MEDCouplingDefinitionTime)

class MEDCouplingFieldOverTime(MEDCouplingMultiFields):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMultiFields]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldOverTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMultiFields]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldOverTime, name)
    __repr__ = _swig_repr
    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldOverTime_getTimeTolerance(self)

    def getDefinitionTimeZone(self):
        """
        getDefinitionTimeZone(self) -> MEDCouplingDefinitionTime

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldOverTime_getDefinitionTimeZone(self)

    def __init__(self, *args): 
        """
        __init__(self, PyObject li) -> MEDCouplingFieldOverTime

        1
        """
        this = _MEDCouplingClient.new_MEDCouplingFieldOverTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldOverTime___str__(self)

    def New(*args):
        """
        New(PyObject li) -> MEDCouplingFieldOverTime

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldOverTime_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _MEDCouplingClient.delete_MEDCouplingFieldOverTime
    __del__ = lambda self : None;
MEDCouplingFieldOverTime_swigregister = _MEDCouplingClient.MEDCouplingFieldOverTime_swigregister
MEDCouplingFieldOverTime_swigregister(MEDCouplingFieldOverTime)

def MEDCouplingFieldOverTime_New(*args):
  """
    MEDCouplingFieldOverTime_New(PyObject li) -> MEDCouplingFieldOverTime

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldOverTime_New(*args)


def MEDCouplingVersionMajMinRel():
  """
    MEDCouplingVersionMajMinRel() -> PyObject

    1
    """
  return _MEDCouplingClient.MEDCouplingVersionMajMinRel()
import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
  execfile(__filename)
  pass

class MEDCouplingFieldDoubleClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDoubleClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDoubleClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject fieldPtr) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldDoubleClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingFieldDoubleClient_swigregister = _MEDCouplingClient.MEDCouplingFieldDoubleClient_swigregister
MEDCouplingFieldDoubleClient_swigregister(MEDCouplingFieldDoubleClient)

def MEDCouplingFieldDoubleClient_New(*args):
  """
    MEDCouplingFieldDoubleClient_New(PyObject fieldPtr) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldDoubleClient_New(*args)

class MEDCouplingFieldTemplateClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTemplateClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTemplateClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject fieldPtr) -> MEDCouplingFieldTemplate

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldTemplateClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingFieldTemplateClient_swigregister = _MEDCouplingClient.MEDCouplingFieldTemplateClient_swigregister
MEDCouplingFieldTemplateClient_swigregister(MEDCouplingFieldTemplateClient)

def MEDCouplingFieldTemplateClient_New(*args):
  """
    MEDCouplingFieldTemplateClient_New(PyObject fieldPtr) -> MEDCouplingFieldTemplate

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldTemplateClient_New(*args)

class MEDCouplingMultiFieldsClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMultiFieldsClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMultiFieldsClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject fieldPtr) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingClient.MEDCouplingMultiFieldsClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingMultiFieldsClient_swigregister = _MEDCouplingClient.MEDCouplingMultiFieldsClient_swigregister
MEDCouplingMultiFieldsClient_swigregister(MEDCouplingMultiFieldsClient)

def MEDCouplingMultiFieldsClient_New(*args):
  """
    MEDCouplingMultiFieldsClient_New(PyObject fieldPtr) -> MEDCouplingMultiFields

    1
    """
  return _MEDCouplingClient.MEDCouplingMultiFieldsClient_New(*args)

class MEDCouplingFieldOverTimeClient(MEDCouplingFieldOverTime):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldOverTime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldOverTimeClient, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldOverTime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldOverTimeClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getTimeSteps(self):
        """
        getTimeSteps(self) -> dvec

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldOverTimeClient_getTimeSteps(self)

    def New(*args):
        """
        New(PyObject fieldPtr) -> MEDCouplingFieldOverTimeClient

        1
        """
        return _MEDCouplingClient.MEDCouplingFieldOverTimeClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingFieldOverTimeClient_swigregister = _MEDCouplingClient.MEDCouplingFieldOverTimeClient_swigregister
MEDCouplingFieldOverTimeClient_swigregister(MEDCouplingFieldOverTimeClient)

def MEDCouplingFieldOverTimeClient_New(*args):
  """
    MEDCouplingFieldOverTimeClient_New(PyObject fieldPtr) -> MEDCouplingFieldOverTimeClient

    1
    """
  return _MEDCouplingClient.MEDCouplingFieldOverTimeClient_New(*args)

class MEDCouplingUMeshClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject meshPtr) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingUMeshClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingUMeshClient_swigregister = _MEDCouplingClient.MEDCouplingUMeshClient_swigregister
MEDCouplingUMeshClient_swigregister(MEDCouplingUMeshClient)

def MEDCouplingUMeshClient_New(*args):
  """
    MEDCouplingUMeshClient_New(PyObject meshPtr) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingUMeshClient_New(*args)

class MEDCouplingExtrudedMeshClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingExtrudedMeshClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingExtrudedMeshClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject meshPtr) -> MEDCouplingExtrudedMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingExtrudedMeshClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingExtrudedMeshClient_swigregister = _MEDCouplingClient.MEDCouplingExtrudedMeshClient_swigregister
MEDCouplingExtrudedMeshClient_swigregister(MEDCouplingExtrudedMeshClient)

def MEDCouplingExtrudedMeshClient_New(*args):
  """
    MEDCouplingExtrudedMeshClient_New(PyObject meshPtr) -> MEDCouplingExtrudedMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingExtrudedMeshClient_New(*args)

class MEDCouplingCMeshClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCMeshClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCMeshClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject meshPtr) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingClient.MEDCouplingCMeshClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
MEDCouplingCMeshClient_swigregister = _MEDCouplingClient.MEDCouplingCMeshClient_swigregister
MEDCouplingCMeshClient_swigregister(MEDCouplingCMeshClient)

def MEDCouplingCMeshClient_New(*args):
  """
    MEDCouplingCMeshClient_New(PyObject meshPtr) -> MEDCouplingCMesh

    1
    """
  return _MEDCouplingClient.MEDCouplingCMeshClient_New(*args)

class DataArrayDoubleClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject meshPtr) -> DataArrayDouble

        1
        """
        return _MEDCouplingClient.DataArrayDoubleClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
DataArrayDoubleClient_swigregister = _MEDCouplingClient.DataArrayDoubleClient_swigregister
DataArrayDoubleClient_swigregister(DataArrayDoubleClient)

def DataArrayDoubleClient_New(*args):
  """
    DataArrayDoubleClient_New(PyObject meshPtr) -> DataArrayDouble

    1
    """
  return _MEDCouplingClient.DataArrayDoubleClient_New(*args)

class DataArrayIntClient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(PyObject meshPtr) -> DataArrayInt

        1
        """
        return _MEDCouplingClient.DataArrayIntClient_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
DataArrayIntClient_swigregister = _MEDCouplingClient.DataArrayIntClient_swigregister
DataArrayIntClient_swigregister(DataArrayIntClient)

def DataArrayIntClient_New(*args):
  """
    DataArrayIntClient_New(PyObject meshPtr) -> DataArrayInt

    1
    """
  return _MEDCouplingClient.DataArrayIntClient_New(*args)

def ParaMEDMEMDataArrayDoubleIadd(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDouble____iadd___(self, self, *args)
def ParaMEDMEMDataArrayDoubleIsub(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDouble____isub___(self, self, *args)
def ParaMEDMEMDataArrayDoubleImul(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDouble____imul___(self, self, *args)
def ParaMEDMEMDataArrayDoubleIdiv(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDouble____idiv___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIadd(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.MEDCouplingFieldDouble____iadd___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIsub(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.MEDCouplingFieldDouble____isub___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleImul(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.MEDCouplingFieldDouble____imul___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIdiv(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.MEDCouplingFieldDouble____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntIadd(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayInt____iadd___(self, self, *args)
def ParaMEDMEMDataArrayIntIsub(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayInt____isub___(self, self, *args)
def ParaMEDMEMDataArrayIntImul(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayInt____imul___(self, self, *args)
def ParaMEDMEMDataArrayIntIdiv(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayInt____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntImod(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayInt____imod___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleIadd(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDoubleTuple____iadd___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleIsub(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDoubleTuple____isub___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleImul(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDoubleTuple____imul___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleIdiv(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayDoubleTuple____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleIadd(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayIntTuple____iadd___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleIsub(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayIntTuple____isub___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleImul(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayIntTuple____imul___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleIdiv(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayIntTuple____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleImod(self,*args):
    import _MEDCouplingClient
    return _MEDCouplingClient.DataArrayIntTuple____imod___(self, self, *args)

DataArrayDouble.__iadd__=ParaMEDMEMDataArrayDoubleIadd
DataArrayDouble.__isub__=ParaMEDMEMDataArrayDoubleIsub
DataArrayDouble.__imul__=ParaMEDMEMDataArrayDoubleImul
DataArrayDouble.__idiv__=ParaMEDMEMDataArrayDoubleIdiv

DataArrayInt.__iadd__=ParaMEDMEMDataArrayIntIadd
DataArrayInt.__isub__=ParaMEDMEMDataArrayIntIsub
DataArrayInt.__imul__=ParaMEDMEMDataArrayIntImul
DataArrayInt.__idiv__=ParaMEDMEMDataArrayIntIdiv
DataArrayInt.__imod__=ParaMEDMEMDataArrayIntImod

MEDCouplingFieldDouble.__iadd__=ParaMEDMEMMEDCouplingFieldDoubleIadd
MEDCouplingFieldDouble.__isub__=ParaMEDMEMMEDCouplingFieldDoubleIsub
MEDCouplingFieldDouble.__imul__=ParaMEDMEMMEDCouplingFieldDoubleImul
MEDCouplingFieldDouble.__idiv__=ParaMEDMEMMEDCouplingFieldDoubleIdiv

DataArrayDoubleTuple.__iadd__=ParaMEDMEMDataArrayDoubleTupleIadd
DataArrayDoubleTuple.__isub__=ParaMEDMEMDataArrayDoubleTupleIsub
DataArrayDoubleTuple.__imul__=ParaMEDMEMDataArrayDoubleTupleImul
DataArrayDoubleTuple.__idiv__=ParaMEDMEMDataArrayDoubleTupleIdiv

DataArrayIntTuple.__iadd__=ParaMEDMEMDataArrayIntTupleIadd
DataArrayIntTuple.__isub__=ParaMEDMEMDataArrayIntTupleIsub
DataArrayIntTuple.__imul__=ParaMEDMEMDataArrayIntTupleImul
DataArrayIntTuple.__idiv__=ParaMEDMEMDataArrayIntTupleIdiv
DataArrayIntTuple.__imod__=ParaMEDMEMDataArrayIntTupleImod

del ParaMEDMEMDataArrayDoubleIadd
del ParaMEDMEMDataArrayDoubleIsub
del ParaMEDMEMDataArrayDoubleImul
del ParaMEDMEMDataArrayDoubleIdiv
del ParaMEDMEMMEDCouplingFieldDoubleIadd
del ParaMEDMEMMEDCouplingFieldDoubleIsub
del ParaMEDMEMMEDCouplingFieldDoubleImul
del ParaMEDMEMMEDCouplingFieldDoubleIdiv
del ParaMEDMEMDataArrayIntIadd
del ParaMEDMEMDataArrayIntIsub
del ParaMEDMEMDataArrayIntImul
del ParaMEDMEMDataArrayIntIdiv
del ParaMEDMEMDataArrayIntImod
del ParaMEDMEMDataArrayDoubleTupleIadd
del ParaMEDMEMDataArrayDoubleTupleIsub
del ParaMEDMEMDataArrayDoubleTupleImul
del ParaMEDMEMDataArrayDoubleTupleIdiv
del ParaMEDMEMDataArrayIntTupleIadd
del ParaMEDMEMDataArrayIntTupleIsub
del ParaMEDMEMDataArrayIntTupleImul
del ParaMEDMEMDataArrayIntTupleIdiv
del ParaMEDMEMDataArrayIntTupleImod



