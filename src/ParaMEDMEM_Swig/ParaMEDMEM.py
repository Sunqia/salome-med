# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ParaMEDMEM', [dirname(__file__)])
        except ImportError:
            import _ParaMEDMEM
            return _ParaMEDMEM
        if fp is not None:
            try:
                _mod = imp.load_module('_ParaMEDMEM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ParaMEDMEM = swig_import_helper()
    del swig_import_helper
else:
    import _ParaMEDMEM
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ParaMEDMEM.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ParaMEDMEM.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ParaMEDMEM.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ParaMEDMEM.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ParaMEDMEM.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ParaMEDMEM.SwigPyIterator_equal(self, *args)
    def copy(self): return _ParaMEDMEM.SwigPyIterator_copy(self)
    def next(self): return _ParaMEDMEM.SwigPyIterator_next(self)
    def __next__(self): return _ParaMEDMEM.SwigPyIterator___next__(self)
    def previous(self): return _ParaMEDMEM.SwigPyIterator_previous(self)
    def advance(self, *args): return _ParaMEDMEM.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ParaMEDMEM.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ParaMEDMEM.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ParaMEDMEM.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ParaMEDMEM.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ParaMEDMEM.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ParaMEDMEM.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ParaMEDMEM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr
    def iterator(self): return _ParaMEDMEM.ivec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ParaMEDMEM.ivec___nonzero__(self)
    def __bool__(self): return _ParaMEDMEM.ivec___bool__(self)
    def __len__(self): return _ParaMEDMEM.ivec___len__(self)
    def pop(self): return _ParaMEDMEM.ivec_pop(self)
    def __getslice__(self, *args): return _ParaMEDMEM.ivec___getslice__(self, *args)
    def __setslice__(self, *args): return _ParaMEDMEM.ivec___setslice__(self, *args)
    def __delslice__(self, *args): return _ParaMEDMEM.ivec___delslice__(self, *args)
    def __delitem__(self, *args): return _ParaMEDMEM.ivec___delitem__(self, *args)
    def __getitem__(self, *args): return _ParaMEDMEM.ivec___getitem__(self, *args)
    def __setitem__(self, *args): return _ParaMEDMEM.ivec___setitem__(self, *args)
    def append(self, *args): return _ParaMEDMEM.ivec_append(self, *args)
    def empty(self): return _ParaMEDMEM.ivec_empty(self)
    def size(self): return _ParaMEDMEM.ivec_size(self)
    def clear(self): return _ParaMEDMEM.ivec_clear(self)
    def swap(self, *args): return _ParaMEDMEM.ivec_swap(self, *args)
    def get_allocator(self): return _ParaMEDMEM.ivec_get_allocator(self)
    def begin(self): return _ParaMEDMEM.ivec_begin(self)
    def end(self): return _ParaMEDMEM.ivec_end(self)
    def rbegin(self): return _ParaMEDMEM.ivec_rbegin(self)
    def rend(self): return _ParaMEDMEM.ivec_rend(self)
    def pop_back(self): return _ParaMEDMEM.ivec_pop_back(self)
    def erase(self, *args): return _ParaMEDMEM.ivec_erase(self, *args)
    def __init__(self, *args): 
        this = _ParaMEDMEM.new_ivec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ParaMEDMEM.ivec_push_back(self, *args)
    def front(self): return _ParaMEDMEM.ivec_front(self)
    def back(self): return _ParaMEDMEM.ivec_back(self)
    def assign(self, *args): return _ParaMEDMEM.ivec_assign(self, *args)
    def resize(self, *args): return _ParaMEDMEM.ivec_resize(self, *args)
    def insert(self, *args): return _ParaMEDMEM.ivec_insert(self, *args)
    def reserve(self, *args): return _ParaMEDMEM.ivec_reserve(self, *args)
    def capacity(self): return _ParaMEDMEM.ivec_capacity(self)
    __swig_destroy__ = _ParaMEDMEM.delete_ivec
    __del__ = lambda self : None;
ivec_swigregister = _ParaMEDMEM.ivec_swigregister
ivec_swigregister(ivec)

class dvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvec, name)
    __repr__ = _swig_repr
    def iterator(self): return _ParaMEDMEM.dvec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ParaMEDMEM.dvec___nonzero__(self)
    def __bool__(self): return _ParaMEDMEM.dvec___bool__(self)
    def __len__(self): return _ParaMEDMEM.dvec___len__(self)
    def pop(self): return _ParaMEDMEM.dvec_pop(self)
    def __getslice__(self, *args): return _ParaMEDMEM.dvec___getslice__(self, *args)
    def __setslice__(self, *args): return _ParaMEDMEM.dvec___setslice__(self, *args)
    def __delslice__(self, *args): return _ParaMEDMEM.dvec___delslice__(self, *args)
    def __delitem__(self, *args): return _ParaMEDMEM.dvec___delitem__(self, *args)
    def __getitem__(self, *args): return _ParaMEDMEM.dvec___getitem__(self, *args)
    def __setitem__(self, *args): return _ParaMEDMEM.dvec___setitem__(self, *args)
    def append(self, *args): return _ParaMEDMEM.dvec_append(self, *args)
    def empty(self): return _ParaMEDMEM.dvec_empty(self)
    def size(self): return _ParaMEDMEM.dvec_size(self)
    def clear(self): return _ParaMEDMEM.dvec_clear(self)
    def swap(self, *args): return _ParaMEDMEM.dvec_swap(self, *args)
    def get_allocator(self): return _ParaMEDMEM.dvec_get_allocator(self)
    def begin(self): return _ParaMEDMEM.dvec_begin(self)
    def end(self): return _ParaMEDMEM.dvec_end(self)
    def rbegin(self): return _ParaMEDMEM.dvec_rbegin(self)
    def rend(self): return _ParaMEDMEM.dvec_rend(self)
    def pop_back(self): return _ParaMEDMEM.dvec_pop_back(self)
    def erase(self, *args): return _ParaMEDMEM.dvec_erase(self, *args)
    def __init__(self, *args): 
        this = _ParaMEDMEM.new_dvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ParaMEDMEM.dvec_push_back(self, *args)
    def front(self): return _ParaMEDMEM.dvec_front(self)
    def back(self): return _ParaMEDMEM.dvec_back(self)
    def assign(self, *args): return _ParaMEDMEM.dvec_assign(self, *args)
    def resize(self, *args): return _ParaMEDMEM.dvec_resize(self, *args)
    def insert(self, *args): return _ParaMEDMEM.dvec_insert(self, *args)
    def reserve(self, *args): return _ParaMEDMEM.dvec_reserve(self, *args)
    def capacity(self): return _ParaMEDMEM.dvec_capacity(self)
    __swig_destroy__ = _ParaMEDMEM.delete_dvec
    __del__ = lambda self : None;
dvec_swigregister = _ParaMEDMEM.dvec_swigregister
dvec_swigregister(dvec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr
    def iterator(self): return _ParaMEDMEM.svec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ParaMEDMEM.svec___nonzero__(self)
    def __bool__(self): return _ParaMEDMEM.svec___bool__(self)
    def __len__(self): return _ParaMEDMEM.svec___len__(self)
    def pop(self): return _ParaMEDMEM.svec_pop(self)
    def __getslice__(self, *args): return _ParaMEDMEM.svec___getslice__(self, *args)
    def __setslice__(self, *args): return _ParaMEDMEM.svec___setslice__(self, *args)
    def __delslice__(self, *args): return _ParaMEDMEM.svec___delslice__(self, *args)
    def __delitem__(self, *args): return _ParaMEDMEM.svec___delitem__(self, *args)
    def __getitem__(self, *args): return _ParaMEDMEM.svec___getitem__(self, *args)
    def __setitem__(self, *args): return _ParaMEDMEM.svec___setitem__(self, *args)
    def append(self, *args): return _ParaMEDMEM.svec_append(self, *args)
    def empty(self): return _ParaMEDMEM.svec_empty(self)
    def size(self): return _ParaMEDMEM.svec_size(self)
    def clear(self): return _ParaMEDMEM.svec_clear(self)
    def swap(self, *args): return _ParaMEDMEM.svec_swap(self, *args)
    def get_allocator(self): return _ParaMEDMEM.svec_get_allocator(self)
    def begin(self): return _ParaMEDMEM.svec_begin(self)
    def end(self): return _ParaMEDMEM.svec_end(self)
    def rbegin(self): return _ParaMEDMEM.svec_rbegin(self)
    def rend(self): return _ParaMEDMEM.svec_rend(self)
    def pop_back(self): return _ParaMEDMEM.svec_pop_back(self)
    def erase(self, *args): return _ParaMEDMEM.svec_erase(self, *args)
    def __init__(self, *args): 
        this = _ParaMEDMEM.new_svec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ParaMEDMEM.svec_push_back(self, *args)
    def front(self): return _ParaMEDMEM.svec_front(self)
    def back(self): return _ParaMEDMEM.svec_back(self)
    def assign(self, *args): return _ParaMEDMEM.svec_assign(self, *args)
    def resize(self, *args): return _ParaMEDMEM.svec_resize(self, *args)
    def insert(self, *args): return _ParaMEDMEM.svec_insert(self, *args)
    def reserve(self, *args): return _ParaMEDMEM.svec_reserve(self, *args)
    def capacity(self): return _ParaMEDMEM.svec_capacity(self)
    __swig_destroy__ = _ParaMEDMEM.delete_svec
    __del__ = lambda self : None;
svec_swigregister = _ParaMEDMEM.svec_swigregister
svec_swigregister(svec)

class InterpKernelException(Exception):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpKernelException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpKernelException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char what) -> InterpKernelException

        1
        """
        this = _ParaMEDMEM.new_InterpKernelException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_InterpKernelException
    __del__ = lambda self : None;
    def what(self):
        """
        what(self) -> char

        1
        """
        return _ParaMEDMEM.InterpKernelException_what(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.InterpKernelException___str__(self)

InterpKernelException_swigregister = _ParaMEDMEM.InterpKernelException_swigregister
InterpKernelException_swigregister(InterpKernelException)

class TimeLabel(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeLabel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def assign(self, *args):
        """
        assign(self, TimeLabel other) -> TimeLabel

        1
        """
        return _ParaMEDMEM.TimeLabel_assign(self, *args)

    def declareAsNew(self):
        """
        declareAsNew(self)

        1
        """
        return _ParaMEDMEM.TimeLabel_declareAsNew(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.TimeLabel_updateTime(self)

    def getTimeOfThis(self):
        """
        getTimeOfThis(self) -> unsigned int

        1
        """
        return _ParaMEDMEM.TimeLabel_getTimeOfThis(self)

TimeLabel_swigregister = _ParaMEDMEM.TimeLabel_swigregister
TimeLabel_swigregister(TimeLabel)

C_DEALLOC = _ParaMEDMEM.C_DEALLOC
CPP_DEALLOC = _ParaMEDMEM.CPP_DEALLOC
ON_CELLS = _ParaMEDMEM.ON_CELLS
ON_NODES = _ParaMEDMEM.ON_NODES
ON_GAUSS_PT = _ParaMEDMEM.ON_GAUSS_PT
ON_GAUSS_NE = _ParaMEDMEM.ON_GAUSS_NE
ON_NODES_KR = _ParaMEDMEM.ON_NODES_KR
NO_TIME = _ParaMEDMEM.NO_TIME
ONE_TIME = _ParaMEDMEM.ONE_TIME
LINEAR_TIME = _ParaMEDMEM.LINEAR_TIME
CONST_ON_TIME_INTERVAL = _ParaMEDMEM.CONST_ON_TIME_INTERVAL

def MEDCouplingVersionStr():
  """
    MEDCouplingVersionStr() -> char

    1
    """
  return _ParaMEDMEM.MEDCouplingVersionStr()

def MEDCouplingVersion():
  """
    MEDCouplingVersion() -> int

    1
    """
  return _ParaMEDMEM.MEDCouplingVersion()
class RefCountObject(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCountObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefCountObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def incrRef(self):
        """
        incrRef(self)

        1
        """
        return _ParaMEDMEM.RefCountObject_incrRef(self)

    def getHiddenCppPointer(self):
        """
        getHiddenCppPointer(self) -> string

        1
        """
        return _ParaMEDMEM.RefCountObject_getHiddenCppPointer(self)

RefCountObject_swigregister = _ParaMEDMEM.RefCountObject_swigregister
RefCountObject_swigregister(RefCountObject)

UNSTRUCTURED = _ParaMEDMEM.UNSTRUCTURED
UNSTRUCTURED_DESC = _ParaMEDMEM.UNSTRUCTURED_DESC
CARTESIAN = _ParaMEDMEM.CARTESIAN
EXTRUDED = _ParaMEDMEM.EXTRUDED
class MEDCouplingMesh(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_setName(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getName(self)

    def setDescription(self, *args):
        """
        setDescription(self, char descr)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_setDescription(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getDescription(self)

    def setTime(self, *args):
        """
        setTime(self, double val, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_setTime(self, *args)

    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getTimeUnit(self)

    def getType(self):
        """
        getType(self) -> MEDCouplingMeshType

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getType(self)

    def isStructured(self):
        """
        isStructured(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_isStructured(self)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_deepCpy(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_isEqualWithoutConsideringStr(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingMesh other)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_copyTinyStringsFrom(self, *args)

    def copyTinyInfoFrom(self, *args):
        """
        copyTinyInfoFrom(self, MEDCouplingMesh other)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_copyTinyInfoFrom(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_checkCoherency(self)

    def checkCoherency1(self, eps = 1e-12):
        """
        checkCoherency1(self, double eps = 1e-12)
        checkCoherency1(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_checkCoherency1(self, eps)

    def checkCoherency2(self, eps = 1e-12):
        """
        checkCoherency2(self, double eps = 1e-12)
        checkCoherency2(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_checkCoherency2(self, eps)

    def getNumberOfCells(self):
        """
        getNumberOfCells(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getNumberOfCells(self)

    def getNumberOfNodes(self):
        """
        getNumberOfNodes(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getNumberOfNodes(self)

    def getSpaceDimension(self):
        """
        getSpaceDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getSpaceDimension(self)

    def getMeshDimension(self):
        """
        getMeshDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getMeshDimension(self)

    def getCoordinatesAndOwner(self):
        """
        getCoordinatesAndOwner(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getCoordinatesAndOwner(self)

    def getBarycenterAndOwner(self):
        """
        getBarycenterAndOwner(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getBarycenterAndOwner(self)

    def getNumberOfCellsWithType(self, *args):
        """
        getNumberOfCellsWithType(self, NormalizedCellType type) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getNumberOfCellsWithType(self, *args)

    def getTypeOfCell(self, *args):
        """
        getTypeOfCell(self, int cellId) -> NormalizedCellType

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getTypeOfCell(self, *args)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_advancedRepr(self)

    def writeVTK(self, *args):
        """
        writeVTK(self, char fileName)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_writeVTK(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getMeasureField(self, *args)

    def getMeasureFieldOnNode(self, *args):
        """
        getMeasureFieldOnNode(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getMeasureFieldOnNode(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, TypeOfField t, int nbOfComp, char func) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, TypeOfField t, int nbOfComp, char func) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, TypeOfField t, int nbOfComp, svec varsOrder, char func) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_fillFromAnalytic3(self, *args)

    def buildOrthogonalField(self):
        """
        buildOrthogonalField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_buildOrthogonalField(self)

    def buildUnstructured(self):
        """
        buildUnstructured(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_buildUnstructured(self)

    def mergeMyselfWith(self, *args):
        """
        mergeMyselfWith(self, MEDCouplingMesh other) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_mergeMyselfWith(self, *args)

    def areCompatibleForMerge(self, *args):
        """
        areCompatibleForMerge(self, MEDCouplingMesh other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_areCompatibleForMerge(self, *args)

    def simplexize(self, *args):
        """
        simplexize(self, int policy) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_simplexize(self, *args)

    def GetDimensionOfGeometricType(*args):
        """
        GetDimensionOfGeometricType(NormalizedCellType type) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_GetDimensionOfGeometricType(*args)

    if _newclass:GetDimensionOfGeometricType = staticmethod(GetDimensionOfGeometricType)
    __swig_getmethods__["GetDimensionOfGeometricType"] = lambda x: GetDimensionOfGeometricType
    def GetReprOfGeometricType(*args):
        """
        GetReprOfGeometricType(NormalizedCellType type) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_GetReprOfGeometricType(*args)

    if _newclass:GetReprOfGeometricType = staticmethod(GetReprOfGeometricType)
    __swig_getmethods__["GetReprOfGeometricType"] = lambda x: GetReprOfGeometricType
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh___str__(self)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getTime(self)

    def getCellContainingPoint(self, *args):
        """
        getCellContainingPoint(self, PyObject p, double eps) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getCellContainingPoint(self, *args)

    def getCellsContainingPoints(self, *args):
        """
        getCellsContainingPoints(self, PyObject p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPoints(self, PyObject p, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getCellsContainingPoints(self, *args)

    def getCellsContainingPoint(self, *args):
        """
        getCellsContainingPoint(self, PyObject p, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getCellsContainingPoint(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, PyObject li, bool check = True)
        renumberCells(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_renumberCells(self, *args)

    def checkGeoEquivalWith(self, *args):
        """
        checkGeoEquivalWith(self, MEDCouplingMesh other, int levOfCheck, double prec) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_checkGeoEquivalWith(self, *args)

    def getCellIdsFullyIncludedInNodeIds(self, *args):
        """
        getCellIdsFullyIncludedInNodeIds(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getCellIdsFullyIncludedInNodeIds(self, *args)

    def getNodeIdsOfCell(self, *args):
        """
        getNodeIdsOfCell(self, int cellId) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getNodeIdsOfCell(self, *args)

    def getCoordinatesOfNode(self, *args):
        """
        getCoordinatesOfNode(self, int nodeId) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getCoordinatesOfNode(self, *args)

    def scale(self, *args):
        """
        scale(self, PyObject point, double factor)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_scale(self, *args)

    def getBoundingBox(self):
        """
        getBoundingBox(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getBoundingBox(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingMesh other, double prec) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_isEqualIfNotWhy(self, *args)

    def buildPart(self, *args):
        """
        buildPart(self, PyObject li) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_buildPart(self, *args)

    def buildPartAndReduceNodes(self, *args):
        """
        buildPartAndReduceNodes(self, PyObject li) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_buildPartAndReduceNodes(self, *args)

    def getDistributionOfTypes(self):
        """
        getDistributionOfTypes(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getDistributionOfTypes(self)

    def checkTypeConsistencyAndContig(self, *args):
        """
        checkTypeConsistencyAndContig(self, PyObject li, PyObject li2) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_checkTypeConsistencyAndContig(self, *args)

    def splitProfilePerType(self, *args):
        """
        splitProfilePerType(self, DataArrayInt profile) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_splitProfilePerType(self, *args)

    def translate(self, *args):
        """
        translate(self, PyObject vector)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_translate(self, *args)

    def rotate(self, *args):
        """
        rotate(self, PyObject center, double alpha)
        rotate(self, PyObject center, PyObject vector, double alpha)

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_rotate(self, *args)

    def getAllGeoTypes(self):
        """
        getAllGeoTypes(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_getAllGeoTypes(self)

    def MergeMeshes(*args):
        """
        MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
        MergeMeshes(PyObject li) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingMesh_MergeMeshes(*args)

    if _newclass:MergeMeshes = staticmethod(MergeMeshes)
    __swig_getmethods__["MergeMeshes"] = lambda x: MergeMeshes
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingMesh
    __del__ = lambda self : None;
MEDCouplingMesh_swigregister = _ParaMEDMEM.MEDCouplingMesh_swigregister
MEDCouplingMesh_swigregister(MEDCouplingMesh)

def MEDCouplingMesh_GetDimensionOfGeometricType(*args):
  """
    MEDCouplingMesh_GetDimensionOfGeometricType(NormalizedCellType type) -> int

    1
    """
  return _ParaMEDMEM.MEDCouplingMesh_GetDimensionOfGeometricType(*args)

def MEDCouplingMesh_GetReprOfGeometricType(*args):
  """
    MEDCouplingMesh_GetReprOfGeometricType(NormalizedCellType type) -> char

    1
    """
  return _ParaMEDMEM.MEDCouplingMesh_GetReprOfGeometricType(*args)

def MEDCouplingMesh_MergeMeshes(*args):
  """
    MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
    MEDCouplingMesh_MergeMeshes(PyObject li) -> MEDCouplingMesh

    1
    """
  return _ParaMEDMEM.MEDCouplingMesh_MergeMeshes(*args)

class DataArray(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArray, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArray, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _ParaMEDMEM.DataArray_setName(self, *args)

    def copyStringInfoFrom(self, *args):
        """
        copyStringInfoFrom(self, DataArray other)

        1
        """
        return _ParaMEDMEM.DataArray_copyStringInfoFrom(self, *args)

    def areInfoEqualsIfNotWhy(self, *args):
        """
        areInfoEqualsIfNotWhy(self, DataArray other, string reason) -> bool

        1
        """
        return _ParaMEDMEM.DataArray_areInfoEqualsIfNotWhy(self, *args)

    def areInfoEquals(self, *args):
        """
        areInfoEquals(self, DataArray other) -> bool

        1
        """
        return _ParaMEDMEM.DataArray_areInfoEquals(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArray_reprWithoutNameStream(self, *args)

    def cppRepr(self, *args):
        """
        cppRepr(self, char varName) -> string

        1
        """
        return _ParaMEDMEM.DataArray_cppRepr(self, *args)

    def getName(self):
        """
        getName(self) -> string

        1
        """
        return _ParaMEDMEM.DataArray_getName(self)

    def setInfoOnComponents(self, *args):
        """
        setInfoOnComponents(self, svec info)

        1
        """
        return _ParaMEDMEM.DataArray_setInfoOnComponents(self, *args)

    def getVarsOnComponent(self):
        """
        getVarsOnComponent(self) -> svec

        1
        """
        return _ParaMEDMEM.DataArray_getVarsOnComponent(self)

    def getUnitsOnComponent(self):
        """
        getUnitsOnComponent(self) -> svec

        1
        """
        return _ParaMEDMEM.DataArray_getUnitsOnComponent(self)

    def getInfoOnComponent(self, *args):
        """
        getInfoOnComponent(self, int i) -> string

        1
        """
        return _ParaMEDMEM.DataArray_getInfoOnComponent(self, *args)

    def getVarOnComponent(self, *args):
        """
        getVarOnComponent(self, int i) -> string

        1
        """
        return _ParaMEDMEM.DataArray_getVarOnComponent(self, *args)

    def getUnitOnComponent(self, *args):
        """
        getUnitOnComponent(self, int i) -> string

        1
        """
        return _ParaMEDMEM.DataArray_getUnitOnComponent(self, *args)

    def setInfoOnComponent(self, *args):
        """
        setInfoOnComponent(self, int i, char info)

        1
        """
        return _ParaMEDMEM.DataArray_setInfoOnComponent(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _ParaMEDMEM.DataArray_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        """
        getNumberOfTuples(self) -> int

        1
        """
        return _ParaMEDMEM.DataArray_getNumberOfTuples(self)

    def getNbOfElems(self):
        """
        getNbOfElems(self) -> int

        1
        """
        return _ParaMEDMEM.DataArray_getNbOfElems(self)

    def checkNbOfTuples(self, *args):
        """
        checkNbOfTuples(self, int nbOfTuples, char msg)

        1
        """
        return _ParaMEDMEM.DataArray_checkNbOfTuples(self, *args)

    def checkNbOfComps(self, *args):
        """
        checkNbOfComps(self, int nbOfCompo, char msg)

        1
        """
        return _ParaMEDMEM.DataArray_checkNbOfComps(self, *args)

    def checkNbOfTuplesAndComp(self, *args):
        """
        checkNbOfTuplesAndComp(self, DataArray other, char msg)
        checkNbOfTuplesAndComp(self, int nbOfTuples, int nbOfCompo, char msg)

        1
        """
        return _ParaMEDMEM.DataArray_checkNbOfTuplesAndComp(self, *args)

    def checkNbOfElems(self, *args):
        """
        checkNbOfElems(self, int nbOfElems, char msg)

        1
        """
        return _ParaMEDMEM.DataArray_checkNbOfElems(self, *args)

    def GetNumberOfItemGivenBES(*args):
        """
        GetNumberOfItemGivenBES(int begin, int end, int step, char msg) -> int

        1
        """
        return _ParaMEDMEM.DataArray_GetNumberOfItemGivenBES(*args)

    if _newclass:GetNumberOfItemGivenBES = staticmethod(GetNumberOfItemGivenBES)
    __swig_getmethods__["GetNumberOfItemGivenBES"] = lambda x: GetNumberOfItemGivenBES
    def GetNumberOfItemGivenBESRelative(*args):
        """
        GetNumberOfItemGivenBESRelative(int begin, int end, int step, char msg) -> int

        1
        """
        return _ParaMEDMEM.DataArray_GetNumberOfItemGivenBESRelative(*args)

    if _newclass:GetNumberOfItemGivenBESRelative = staticmethod(GetNumberOfItemGivenBESRelative)
    __swig_getmethods__["GetNumberOfItemGivenBESRelative"] = lambda x: GetNumberOfItemGivenBESRelative
    def GetPosOfItemGivenBESRelativeNoThrow(*args):
        """
        GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

        1
        """
        return _ParaMEDMEM.DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args)

    if _newclass:GetPosOfItemGivenBESRelativeNoThrow = staticmethod(GetPosOfItemGivenBESRelativeNoThrow)
    __swig_getmethods__["GetPosOfItemGivenBESRelativeNoThrow"] = lambda x: GetPosOfItemGivenBESRelativeNoThrow
    def GetVarNameFromInfo(*args):
        """
        GetVarNameFromInfo(string info) -> string

        1
        """
        return _ParaMEDMEM.DataArray_GetVarNameFromInfo(*args)

    if _newclass:GetVarNameFromInfo = staticmethod(GetVarNameFromInfo)
    __swig_getmethods__["GetVarNameFromInfo"] = lambda x: GetVarNameFromInfo
    def GetUnitFromInfo(*args):
        """
        GetUnitFromInfo(string info) -> string

        1
        """
        return _ParaMEDMEM.DataArray_GetUnitFromInfo(*args)

    if _newclass:GetUnitFromInfo = staticmethod(GetUnitFromInfo)
    __swig_getmethods__["GetUnitFromInfo"] = lambda x: GetUnitFromInfo
    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArray_reprCppStream(self, *args)

    def getInfoOnComponents(self):
        """
        getInfoOnComponents(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArray_getInfoOnComponents(self)

    def copyPartOfStringInfoFrom(self, *args):
        """
        copyPartOfStringInfoFrom(self, DataArray other, ivec compoIds)
        copyPartOfStringInfoFrom(self, DataArray other, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArray_copyPartOfStringInfoFrom(self, *args)

    def copyPartOfStringInfoFrom2(self, *args):
        """
        copyPartOfStringInfoFrom2(self, ivec compoIds, DataArray other)
        copyPartOfStringInfoFrom2(self, PyObject li, DataArray other)

        1
        """
        return _ParaMEDMEM.DataArray_copyPartOfStringInfoFrom2(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_DataArray
    __del__ = lambda self : None;
DataArray_swigregister = _ParaMEDMEM.DataArray_swigregister
DataArray_swigregister(DataArray)

def DataArray_GetNumberOfItemGivenBES(*args):
  """
    DataArray_GetNumberOfItemGivenBES(int begin, int end, int step, char msg) -> int

    1
    """
  return _ParaMEDMEM.DataArray_GetNumberOfItemGivenBES(*args)

def DataArray_GetNumberOfItemGivenBESRelative(*args):
  """
    DataArray_GetNumberOfItemGivenBESRelative(int begin, int end, int step, char msg) -> int

    1
    """
  return _ParaMEDMEM.DataArray_GetNumberOfItemGivenBESRelative(*args)

def DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args):
  """
    DataArray_GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

    1
    """
  return _ParaMEDMEM.DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args)

def DataArray_GetVarNameFromInfo(*args):
  """
    DataArray_GetVarNameFromInfo(string info) -> string

    1
    """
  return _ParaMEDMEM.DataArray_GetVarNameFromInfo(*args)

def DataArray_GetUnitFromInfo(*args):
  """
    DataArray_GetUnitFromInfo(string info) -> string

    1
    """
  return _ParaMEDMEM.DataArray_GetUnitFromInfo(*args)

class DataArrayDouble(DataArray):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DataArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDouble, name)
    __repr__ = _swig_repr
    def isAllocated(self):
        """
        isAllocated(self) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_isAllocated(self)

    def checkAllocated(self):
        """
        checkAllocated(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_checkAllocated(self)

    def setInfoAndChangeNbOfCompo(self, *args):
        """
        setInfoAndChangeNbOfCompo(self, svec info)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setInfoAndChangeNbOfCompo(self, *args)

    def doubleValue(self):
        """
        doubleValue(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_doubleValue(self)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_empty(self)

    def deepCpy(self):
        """
        deepCpy(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_deepCpy(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_performCpy(self, *args)

    def cpyFrom(self, *args):
        """
        cpyFrom(self, DataArrayDouble other)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_cpyFrom(self, *args)

    def alloc(self, *args):
        """
        alloc(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_alloc(self, *args)

    def allocIfNecessary(self, *args):
        """
        allocIfNecessary(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_allocIfNecessary(self, *args)

    def fillWithZero(self):
        """
        fillWithZero(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_fillWithZero(self)

    def fillWithValue(self, *args):
        """
        fillWithValue(self, double val)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_fillWithValue(self, *args)

    def iota(self, init = 0.):
        """
        iota(self, double init = 0.)
        iota(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_iota(self, init)

    def isUniform(self, *args):
        """
        isUniform(self, double val, double eps) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_isUniform(self, *args)

    def sort(self, asc = True):
        """
        sort(self, bool asc = True)
        sort(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_sort(self, asc)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reverse(self)

    def checkMonotonic(self, *args):
        """
        checkMonotonic(self, bool increasing, double eps)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_checkMonotonic(self, *args)

    def isMonotonic(self, *args):
        """
        isMonotonic(self, bool increasing, double eps) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_isMonotonic(self, *args)

    def repr(self):
        """
        repr(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayDouble_repr(self)

    def reprZip(self):
        """
        reprZip(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reprZip(self)

    def reprStream(self, *args):
        """
        reprStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reprStream(self, *args)

    def reprZipStream(self, *args):
        """
        reprZipStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reprZipStream(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reprWithoutNameStream(self, *args)

    def reprZipWithoutNameStream(self, *args):
        """
        reprZipWithoutNameStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reprZipWithoutNameStream(self, *args)

    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reprCppStream(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_isEqualWithoutConsideringStr(self, *args)

    def reAlloc(self, *args):
        """
        reAlloc(self, int nbOfTuples)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_reAlloc(self, *args)

    def convertToIntArr(self):
        """
        convertToIntArr(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayDouble_convertToIntArr(self)

    def fromNoInterlace(self):
        """
        fromNoInterlace(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_fromNoInterlace(self)

    def toNoInterlace(self):
        """
        toNoInterlace(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_toNoInterlace(self)

    def selectByTupleId2(self, *args):
        """
        selectByTupleId2(self, int bg, int end2, int step) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_selectByTupleId2(self, *args)

    def substr(self, *args):
        """
        substr(self, int tupleIdBg, int tupleIdEnd = -1) -> DataArrayDouble
        substr(self, int tupleIdBg) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_substr(self, *args)

    def rearrange(self, *args):
        """
        rearrange(self, int newNbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_rearrange(self, *args)

    def transpose(self):
        """
        transpose(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_transpose(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_changeNbOfComponents(self, *args)

    def meldWith(self, *args):
        """
        meldWith(self, DataArrayDouble other)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_meldWith(self, *args)

    def duplicateEachTupleNTimes(self, *args):
        """
        duplicateEachTupleNTimes(self, int nbTimes) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_duplicateEachTupleNTimes(self, *args)

    def getDifferentValues(self, *args):
        """
        getDifferentValues(self, double prec, int limitTupleId = -1) -> DataArrayDouble
        getDifferentValues(self, double prec) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getDifferentValues(self, *args)

    def setPartOfValues1(self, *args):
        """
        setPartOfValues1(self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp, 
            bool strictCompoCompare = True)
        setPartOfValues1(self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValues1(self, *args)

    def setPartOfValuesSimple1(self, *args):
        """
        setPartOfValuesSimple1(self, double a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValuesSimple1(self, *args)

    def setPartOfValues2(self, *args):
        """
        setPartOfValues2(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, bool strictCompoCompare = True)
        setPartOfValues2(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValues2(self, *args)

    def setPartOfValuesSimple2(self, *args):
        """
        setPartOfValuesSimple2(self, double a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValuesSimple2(self, *args)

    def setPartOfValues3(self, *args):
        """
        setPartOfValues3(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp, bool strictCompoCompare = True)
        setPartOfValues3(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValues3(self, *args)

    def setPartOfValuesSimple3(self, *args):
        """
        setPartOfValuesSimple3(self, double a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValuesSimple3(self, *args)

    def setPartOfValuesAdv(self, *args):
        """
        setPartOfValuesAdv(self, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setPartOfValuesAdv(self, *args)

    def setContigPartOfSelectedValues(self, *args):
        """
        setContigPartOfSelectedValues(self, int tupleIdStart, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setContigPartOfSelectedValues(self, *args)

    def setContigPartOfSelectedValues2(self, *args):
        """
        setContigPartOfSelectedValues2(self, int tupleIdStart, DataArrayDouble a, int bg, int end2, 
            int step)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setContigPartOfSelectedValues2(self, *args)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getIJ(self, *args)

    def back(self):
        """
        back(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_back(self)

    def getIJSafe(self, *args):
        """
        getIJSafe(self, int tupleId, int compoId) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getIJSafe(self, *args)

    def setIJ(self, *args):
        """
        setIJ(self, int tupleId, int compoId, double newVal)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setIJ(self, *args)

    def setIJSilent(self, *args):
        """
        setIJSilent(self, int tupleId, int compoId, double newVal)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setIJSilent(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getPointer(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getConstPointer(self)

    def iterator(self):
        """
        iterator(self) -> DataArrayDoubleIterator

        1
        """
        return _ParaMEDMEM.DataArrayDouble_iterator(self)

    def begin(self):
        """
        begin(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_begin(self)

    def end(self):
        """
        end(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_end(self)

    def useArray(self, *args):
        """
        useArray(self, double array, bool ownership, DeallocType type, int nbOfTuple, 
            int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_useArray(self, *args)

    def useExternalArrayWithRWAccess(self, *args):
        """
        useExternalArrayWithRWAccess(self, double array, int nbOfTuple, int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_useExternalArrayWithRWAccess(self, *args)

    def writeOnPlace(self, *args):
        """
        writeOnPlace(self, int id, double element0, double others, int sizeOfOthers)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_writeOnPlace(self, *args)

    def checkNoNullValues(self):
        """
        checkNoNullValues(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_checkNoNullValues(self)

    def computeBBoxPerTuple(self, epsilon = 0.0):
        """
        computeBBoxPerTuple(self, double epsilon = 0.0) -> DataArrayDouble
        computeBBoxPerTuple(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_computeBBoxPerTuple(self, epsilon)

    def recenterForMaxPrecision(self, *args):
        """
        recenterForMaxPrecision(self, double eps)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_recenterForMaxPrecision(self, *args)

    def getMaxValueInArray(self):
        """
        getMaxValueInArray(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMaxValueInArray(self)

    def getMinValueInArray(self):
        """
        getMinValueInArray(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMinValueInArray(self)

    def getAverageValue(self):
        """
        getAverageValue(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getAverageValue(self)

    def norm2(self):
        """
        norm2(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_norm2(self)

    def normMax(self):
        """
        normMax(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble_normMax(self)

    def fromPolarToCart(self):
        """
        fromPolarToCart(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_fromPolarToCart(self)

    def fromCylToCart(self):
        """
        fromCylToCart(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_fromCylToCart(self)

    def fromSpherToCart(self):
        """
        fromSpherToCart(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_fromSpherToCart(self)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_inverse(self)

    def trace(self):
        """
        trace(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_trace(self)

    def deviator(self):
        """
        deviator(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_maxPerTuple(self)

    def buildEuclidianDistanceDenseMatrix(self):
        """
        buildEuclidianDistanceDenseMatrix(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_buildEuclidianDistanceDenseMatrix(self)

    def buildEuclidianDistanceDenseMatrixWith(self, *args):
        """
        buildEuclidianDistanceDenseMatrixWith(self, DataArrayDouble other) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_buildEuclidianDistanceDenseMatrixWith(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_sortPerTuple(self, *args)

    def abs(self):
        """
        abs(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_abs(self)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)
        applyLin(self, double a, double b)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyLin(self, *args)

    def applyInv(self, *args):
        """
        applyInv(self, double numerator)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyInv(self, *args)

    def negate(self):
        """
        negate(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_negate(self)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, FunctionToEvaluate func) -> DataArrayDouble
        applyFunc(self, int nbOfComp, char func) -> DataArrayDouble
        applyFunc(self, char func) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyFunc(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyFunc3(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_applyFuncFast64(self, *args)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getIdsInRange(self, *args)

    def Dot(*args):
        """
        Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Dot(*args)

    if _newclass:Dot = staticmethod(Dot)
    __swig_getmethods__["Dot"] = lambda x: Dot
    def CrossProduct(*args):
        """
        CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_CrossProduct(*args)

    if _newclass:CrossProduct = staticmethod(CrossProduct)
    __swig_getmethods__["CrossProduct"] = lambda x: CrossProduct
    def Max(*args):
        """
        Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Max(*args)

    if _newclass:Max = staticmethod(Max)
    __swig_getmethods__["Max"] = lambda x: Max
    def Min(*args):
        """
        Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Min(*args)

    if _newclass:Min = staticmethod(Min)
    __swig_getmethods__["Min"] = lambda x: Min
    def Add(*args):
        """
        Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Add(*args)

    if _newclass:Add = staticmethod(Add)
    __swig_getmethods__["Add"] = lambda x: Add
    def addEqual(self, *args):
        """
        addEqual(self, DataArrayDouble other)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_addEqual(self, *args)

    def Substract(*args):
        """
        Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Substract(*args)

    if _newclass:Substract = staticmethod(Substract)
    __swig_getmethods__["Substract"] = lambda x: Substract
    def substractEqual(self, *args):
        """
        substractEqual(self, DataArrayDouble other)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_substractEqual(self, *args)

    def Multiply(*args):
        """
        Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Multiply(*args)

    if _newclass:Multiply = staticmethod(Multiply)
    __swig_getmethods__["Multiply"] = lambda x: Multiply
    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, DataArrayDouble other)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_multiplyEqual(self, *args)

    def Divide(*args):
        """
        Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Divide(*args)

    if _newclass:Divide = staticmethod(Divide)
    __swig_getmethods__["Divide"] = lambda x: Divide
    def divideEqual(self, *args):
        """
        divideEqual(self, DataArrayDouble other)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_divideEqual(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_updateTime(self)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getTinySerializationIntInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayDouble_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, svec tinyInfoS)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_finishUnserialization(self, *args)

    def New(*args):
        """
        New() -> DataArrayDouble
        New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
        New(PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
        New(PyObject elt0) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self) -> DataArrayDouble
        __init__(self, PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
        __init__(self, PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
        __init__(self, PyObject elt0) -> DataArrayDouble

        1
        """
        this = _ParaMEDMEM.new_DataArrayDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayDouble___str__(self)

    def __float__(self):
        """
        __float__(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDouble___float__(self)

    def __len__(self):
        """
        __len__(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayDouble___len__(self)

    def __iter__(self):
        """
        __iter__(self) -> DataArrayDoubleIterator

        1
        """
        return _ParaMEDMEM.DataArrayDouble___iter__(self)

    def setValues(self, *args):
        """
        setValues(self, PyObject li, int nbOfTuples, int nbOfElsPerTuple)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setValues(self, *args)

    def getValues(self):
        """
        getValues(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getValues(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, DataArrayDouble other, double prec, string reason) -> bool
        isEqualIfNotWhy(self, DataArrayDouble other, double prec) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_isEqualIfNotWhy(self, *args)

    def getValuesAsTuple(self):
        """
        getValuesAsTuple(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getValuesAsTuple(self)

    def renumber(self, *args):
        """
        renumber(self, int old2New) -> DataArrayDouble
        renumber(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_renumber(self, *args)

    def renumberR(self, *args):
        """
        renumberR(self, int new2Old) -> DataArrayDouble
        renumberR(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_renumberR(self, *args)

    def renumberAndReduce(self, *args):
        """
        renumberAndReduce(self, int old2New, int newNbOfTuple) -> DataArrayDouble
        renumberAndReduce(self, PyObject li, int newNbOfTuple) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_renumberAndReduce(self, *args)

    def renumberInPlace(self, *args):
        """
        renumberInPlace(self, int old2New)
        renumberInPlace(self, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_renumberInPlace(self, *args)

    def renumberInPlaceR(self, *args):
        """
        renumberInPlaceR(self, int new2Old)
        renumberInPlaceR(self, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_renumberInPlaceR(self, *args)

    def selectByTupleId(self, *args):
        """
        selectByTupleId(self, int new2OldBg, int new2OldEnd) -> DataArrayDouble
        selectByTupleId(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_selectByTupleId(self, *args)

    def selectByTupleIdSafe(self, *args):
        """
        selectByTupleIdSafe(self, int new2OldBg, int new2OldEnd) -> DataArrayDouble
        selectByTupleIdSafe(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_selectByTupleIdSafe(self, *args)

    def getMaxValue(self, *args):
        """
        getMaxValue(self, int tupleId) -> double
        getMaxValue(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMaxValue(self, *args)

    def getMaxValue2(self, *args):
        """
        getMaxValue2(self, DataArrayInt tupleIds) -> double
        getMaxValue2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMaxValue2(self, *args)

    def getMinValue(self, *args):
        """
        getMinValue(self, int tupleId) -> double
        getMinValue(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMinValue(self, *args)

    def getMinValue2(self, *args):
        """
        getMinValue2(self, DataArrayInt tupleIds) -> double
        getMinValue2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMinValue2(self, *args)

    def getMinMaxPerComponent(self, *args):
        """
        getMinMaxPerComponent(self, double bounds)
        getMinMaxPerComponent(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getMinMaxPerComponent(self, *args)

    def accumulate(self, *args):
        """
        accumulate(self, double res)
        accumulate(self, int compId) -> double
        accumulate(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_accumulate(self, *args)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> DataArrayDouble
        keepSelectedComponents(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_keepSelectedComponents(self, *args)

    def findCommonTuples(self, *args):
        """
        findCommonTuples(self, double prec, int limitTupleId, DataArrayInt comm, DataArrayInt commIndex)
        findCommonTuples(self, double prec, int limitNodeId = -1) -> PyObject
        findCommonTuples(self, double prec) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_findCommonTuples(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, DataArrayDouble a, ivec compoIds)
        setSelectedComponents(self, DataArrayDouble a, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayDouble_setSelectedComponents(self, *args)

    def getTuple(self, *args):
        """
        getTuple(self, int tupleId, double res)
        getTuple(self, int tupleId) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_getTuple(self, *args)

    def Aggregate(*args):
        """
        Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
        Aggregate(PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Aggregate(*args)

    if _newclass:Aggregate = staticmethod(Aggregate)
    __swig_getmethods__["Aggregate"] = lambda x: Aggregate
    def Meld(*args):
        """
        Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
        Meld(PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_Meld(*args)

    if _newclass:Meld = staticmethod(Meld)
    __swig_getmethods__["Meld"] = lambda x: Meld
    def selectByTupleRanges(self, *args):
        """
        selectByTupleRanges(self, std::vector<(std::pair<(int,int)>,std::allocator<(std::pair<(int,int)>)>)> ranges) -> DataArrayDouble
        selectByTupleRanges(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble_selectByTupleRanges(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___setitem__(self, *args)

    def __neg__(self):
        """
        __neg__(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___neg__(self)

    def __add__(self, *args):
        """
        __add__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___add__(self, *args)

    def __radd__(self, *args):
        """
        __radd__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___radd__(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble____iadd___(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___sub__(self, *args)

    def __rsub__(self, *args):
        """
        __rsub__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___rsub__(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble____isub___(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___mul__(self, *args)

    def __rmul__(self, *args):
        """
        __rmul__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___rmul__(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble____imul___(self, *args)

    def __div__(self, *args):
        """
        __div__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___div__(self, *args)

    def __rdiv__(self, *args):
        """
        __rdiv__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDouble___rdiv__(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble____idiv___(self, *args)

    def computeTupleIdsNearTuples(self, *args):
        """
        computeTupleIdsNearTuples(self, DataArrayDouble other, double eps, ivec c, ivec cI)
        computeTupleIdsNearTuples(self, PyObject pt, double eps) -> PyObject
        computeTupleIdsNearTuples(self, DataArrayDouble other, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDouble_computeTupleIdsNearTuples(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_DataArrayDouble
    __del__ = lambda self : None;
DataArrayDouble_swigregister = _ParaMEDMEM.DataArrayDouble_swigregister
DataArrayDouble_swigregister(DataArrayDouble)

def DataArrayDouble_Dot(*args):
  """
    DataArrayDouble_Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Dot(*args)

def DataArrayDouble_CrossProduct(*args):
  """
    DataArrayDouble_CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_CrossProduct(*args)

def DataArrayDouble_Max(*args):
  """
    DataArrayDouble_Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Max(*args)

def DataArrayDouble_Min(*args):
  """
    DataArrayDouble_Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Min(*args)

def DataArrayDouble_Add(*args):
  """
    DataArrayDouble_Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Add(*args)

def DataArrayDouble_Substract(*args):
  """
    DataArrayDouble_Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Substract(*args)

def DataArrayDouble_Multiply(*args):
  """
    DataArrayDouble_Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Multiply(*args)

def DataArrayDouble_Divide(*args):
  """
    DataArrayDouble_Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Divide(*args)

def DataArrayDouble_New(*args):
  """
    New() -> DataArrayDouble
    New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
    New(PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
    DataArrayDouble_New(PyObject elt0) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_New(*args)

def DataArrayDouble_Aggregate(*args):
  """
    Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
    DataArrayDouble_Aggregate(PyObject li) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Aggregate(*args)

def DataArrayDouble_Meld(*args):
  """
    Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
    DataArrayDouble_Meld(PyObject li) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.DataArrayDouble_Meld(*args)

class DataArrayDoubleIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DataArrayDouble da) -> DataArrayDoubleIterator

        1
        """
        this = _ParaMEDMEM.new_DataArrayDoubleIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_DataArrayDoubleIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDoubleIterator_next(self)

DataArrayDoubleIterator_swigregister = _ParaMEDMEM.DataArrayDoubleIterator_swigregister
DataArrayDoubleIterator_swigregister(DataArrayDoubleIterator)

class DataArrayDoubleTuple(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleTuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double pt, int nbOfComp) -> DataArrayDoubleTuple

        1
        """
        this = _ParaMEDMEM.new_DataArrayDoubleTuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCompo(self):
        """
        getNumberOfCompo(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple_getNumberOfCompo(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple_getConstPointer(self)

    def getPointer(self):
        """
        getPointer(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple_getPointer(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple___str__(self)

    def __float__(self):
        """
        __float__(self) -> double

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple___float__(self)

    def buildDADouble(self, *args):
        """
        buildDADouble(self, int nbOfTuples, int nbOfCompo) -> DataArrayDouble
        buildDADouble(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple_buildDADouble(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple____idiv___(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayDoubleTuple

        1
        """
        return _ParaMEDMEM.DataArrayDoubleTuple___setitem__(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_DataArrayDoubleTuple
    __del__ = lambda self : None;
DataArrayDoubleTuple_swigregister = _ParaMEDMEM.DataArrayDoubleTuple_swigregister
DataArrayDoubleTuple_swigregister(DataArrayDoubleTuple)

class DataArrayInt(DataArray):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DataArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayInt, name)
    __repr__ = _swig_repr
    def isAllocated(self):
        """
        isAllocated(self) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_isAllocated(self)

    def checkAllocated(self):
        """
        checkAllocated(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_checkAllocated(self)

    def setInfoAndChangeNbOfCompo(self, *args):
        """
        setInfoAndChangeNbOfCompo(self, svec info)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setInfoAndChangeNbOfCompo(self, *args)

    def intValue(self):
        """
        intValue(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_intValue(self)

    def getHashCode(self):
        """
        getHashCode(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getHashCode(self)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_empty(self)

    def deepCpy(self):
        """
        deepCpy(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_deepCpy(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_performCpy(self, *args)

    def cpyFrom(self, *args):
        """
        cpyFrom(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_cpyFrom(self, *args)

    def alloc(self, *args):
        """
        alloc(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_alloc(self, *args)

    def allocIfNecessary(self, *args):
        """
        allocIfNecessary(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_allocIfNecessary(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, DataArrayInt other) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, DataArrayInt other) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_isEqualWithoutConsideringStr(self, *args)

    def isEqualWithoutConsideringStrAndOrder(self, *args):
        """
        isEqualWithoutConsideringStrAndOrder(self, DataArrayInt other) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_isEqualWithoutConsideringStrAndOrder(self, *args)

    def buildPermutationArr(self, *args):
        """
        buildPermutationArr(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildPermutationArr(self, *args)

    def sort(self, asc = True):
        """
        sort(self, bool asc = True)
        sort(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_sort(self, asc)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reverse(self)

    def fillWithZero(self):
        """
        fillWithZero(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_fillWithZero(self)

    def fillWithValue(self, *args):
        """
        fillWithValue(self, int val)

        1
        """
        return _ParaMEDMEM.DataArrayInt_fillWithValue(self, *args)

    def iota(self, init = 0):
        """
        iota(self, int init = 0)
        iota(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_iota(self, init)

    def repr(self):
        """
        repr(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayInt_repr(self)

    def reprZip(self):
        """
        reprZip(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayInt_reprZip(self)

    def reprStream(self, *args):
        """
        reprStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reprStream(self, *args)

    def reprZipStream(self, *args):
        """
        reprZipStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reprZipStream(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reprWithoutNameStream(self, *args)

    def reprZipWithoutNameStream(self, *args):
        """
        reprZipWithoutNameStream(self, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reprZipWithoutNameStream(self, *args)

    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reprCppStream(self, *args)

    def invertArrayO2N2N2O(self, *args):
        """
        invertArrayO2N2N2O(self, int newNbOfElem) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_invertArrayO2N2N2O(self, *args)

    def invertArrayN2O2O2N(self, *args):
        """
        invertArrayN2O2O2N(self, int oldNbOfElem) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_invertArrayN2O2O2N(self, *args)

    def reAlloc(self, *args):
        """
        reAlloc(self, int nbOfTuples)

        1
        """
        return _ParaMEDMEM.DataArrayInt_reAlloc(self, *args)

    def convertToDblArr(self):
        """
        convertToDblArr(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.DataArrayInt_convertToDblArr(self)

    def fromNoInterlace(self):
        """
        fromNoInterlace(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_fromNoInterlace(self)

    def toNoInterlace(self):
        """
        toNoInterlace(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_toNoInterlace(self)

    def selectByTupleId2(self, *args):
        """
        selectByTupleId2(self, int bg, int end, int step) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_selectByTupleId2(self, *args)

    def checkAndPreparePermutation(self):
        """
        checkAndPreparePermutation(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_checkAndPreparePermutation(self)

    def buildPermArrPerLevel(self):
        """
        buildPermArrPerLevel(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildPermArrPerLevel(self)

    def isIdentity(self):
        """
        isIdentity(self) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_isIdentity(self)

    def isUniform(self, *args):
        """
        isUniform(self, int val) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_isUniform(self, *args)

    def substr(self, *args):
        """
        substr(self, int tupleIdBg, int tupleIdEnd = -1) -> DataArrayInt
        substr(self, int tupleIdBg) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_substr(self, *args)

    def rearrange(self, *args):
        """
        rearrange(self, int newNbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_rearrange(self, *args)

    def transpose(self):
        """
        transpose(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_transpose(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, int dftValue) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_changeNbOfComponents(self, *args)

    def meldWith(self, *args):
        """
        meldWith(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_meldWith(self, *args)

    def setPartOfValues1(self, *args):
        """
        setPartOfValues1(self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp, 
            bool strictCompoCompare = True)
        setPartOfValues1(self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValues1(self, *args)

    def setPartOfValuesSimple1(self, *args):
        """
        setPartOfValuesSimple1(self, int a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValuesSimple1(self, *args)

    def setPartOfValues2(self, *args):
        """
        setPartOfValues2(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, bool strictCompoCompare = True)
        setPartOfValues2(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValues2(self, *args)

    def setPartOfValuesSimple2(self, *args):
        """
        setPartOfValuesSimple2(self, int a, int bgTuples, int endTuples, int bgComp, int endComp)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValuesSimple2(self, *args)

    def setPartOfValues3(self, *args):
        """
        setPartOfValues3(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp, bool strictCompoCompare = True)
        setPartOfValues3(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValues3(self, *args)

    def setPartOfValuesSimple3(self, *args):
        """
        setPartOfValuesSimple3(self, int a, int bgTuples, int endTuples, int bgComp, int endComp, 
            int stepComp)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValuesSimple3(self, *args)

    def setPartOfValuesAdv(self, *args):
        """
        setPartOfValuesAdv(self, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setPartOfValuesAdv(self, *args)

    def setContigPartOfSelectedValues(self, *args):
        """
        setContigPartOfSelectedValues(self, int tupleIdStart, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setContigPartOfSelectedValues(self, *args)

    def setContigPartOfSelectedValues2(self, *args):
        """
        setContigPartOfSelectedValues2(self, int tupleIdStart, DataArrayInt a, int bg, int end2, 
            int step)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setContigPartOfSelectedValues2(self, *args)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIJ(self, *args)

    def getIJSafe(self, *args):
        """
        getIJSafe(self, int tupleId, int compoId) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIJSafe(self, *args)

    def back(self):
        """
        back(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_back(self)

    def setIJ(self, *args):
        """
        setIJ(self, int tupleId, int compoId, int newVal)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setIJ(self, *args)

    def setIJSilent(self, *args):
        """
        setIJSilent(self, int tupleId, int compoId, int newVal)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setIJSilent(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getPointer(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getConstPointer(self)

    def iterator(self):
        """
        iterator(self) -> DataArrayIntIterator

        1
        """
        return _ParaMEDMEM.DataArrayInt_iterator(self)

    def begin(self):
        """
        begin(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_begin(self)

    def end(self):
        """
        end(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_end(self)

    def getIdsEqual(self, *args):
        """
        getIdsEqual(self, int val) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIdsEqual(self, *args)

    def getIdsNotEqual(self, *args):
        """
        getIdsNotEqual(self, int val) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIdsNotEqual(self, *args)

    def changeValue(self, *args):
        """
        changeValue(self, int oldValue, int newValue) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_changeValue(self, *args)

    def locateTuple(self, *args):
        """
        locateTuple(self, ivec tupl) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_locateTuple(self, *args)

    def locateValue(self, *args):
        """
        locateValue(self, int value) -> int
        locateValue(self, ivec vals) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_locateValue(self, *args)

    def search(self, *args):
        """
        search(self, ivec vals) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_search(self, *args)

    def presenceOfTuple(self, *args):
        """
        presenceOfTuple(self, ivec tupl) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_presenceOfTuple(self, *args)

    def presenceOfValue(self, *args):
        """
        presenceOfValue(self, int value) -> bool
        presenceOfValue(self, ivec vals) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_presenceOfValue(self, *args)

    def getMaxValueInArray(self):
        """
        getMaxValueInArray(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getMaxValueInArray(self)

    def getMinValueInArray(self):
        """
        getMinValueInArray(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_getMinValueInArray(self)

    def abs(self):
        """
        abs(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_abs(self)

    def applyLin(self, *args):
        """
        applyLin(self, int a, int b, int compoId)
        applyLin(self, int a, int b)

        1
        """
        return _ParaMEDMEM.DataArrayInt_applyLin(self, *args)

    def applyInv(self, *args):
        """
        applyInv(self, int numerator)

        1
        """
        return _ParaMEDMEM.DataArrayInt_applyInv(self, *args)

    def negate(self):
        """
        negate(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_negate(self)

    def applyDivideBy(self, *args):
        """
        applyDivideBy(self, int val)

        1
        """
        return _ParaMEDMEM.DataArrayInt_applyDivideBy(self, *args)

    def applyModulus(self, *args):
        """
        applyModulus(self, int val)

        1
        """
        return _ParaMEDMEM.DataArrayInt_applyModulus(self, *args)

    def applyRModulus(self, *args):
        """
        applyRModulus(self, int val)

        1
        """
        return _ParaMEDMEM.DataArrayInt_applyRModulus(self, *args)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, int vmin, int vmax) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIdsInRange(self, *args)

    def buildComplement(self, *args):
        """
        buildComplement(self, int nbOfElement) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildComplement(self, *args)

    def buildSubstraction(self, *args):
        """
        buildSubstraction(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildSubstraction(self, *args)

    def buildUnion(self, *args):
        """
        buildUnion(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildUnion(self, *args)

    def buildIntersection(self, *args):
        """
        buildIntersection(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildIntersection(self, *args)

    def buildUnique(self):
        """
        buildUnique(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildUnique(self)

    def deltaShiftIndex(self):
        """
        deltaShiftIndex(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_deltaShiftIndex(self)

    def computeOffsets(self):
        """
        computeOffsets(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_computeOffsets(self)

    def computeOffsets2(self):
        """
        computeOffsets2(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_computeOffsets2(self)

    def buildExplicitArrByRanges(self, *args):
        """
        buildExplicitArrByRanges(self, DataArrayInt offsets) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_buildExplicitArrByRanges(self, *args)

    def findRangeIdForEachTuple(self, *args):
        """
        findRangeIdForEachTuple(self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_findRangeIdForEachTuple(self, *args)

    def findIdInRangeForEachTuple(self, *args):
        """
        findIdInRangeForEachTuple(self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_findIdInRangeForEachTuple(self, *args)

    def duplicateEachTupleNTimes(self, *args):
        """
        duplicateEachTupleNTimes(self, int nbTimes) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_duplicateEachTupleNTimes(self, *args)

    def useArray(self, *args):
        """
        useArray(self, int array, bool ownership, DeallocType type, int nbOfTuple, 
            int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_useArray(self, *args)

    def useExternalArrayWithRWAccess(self, *args):
        """
        useExternalArrayWithRWAccess(self, int array, int nbOfTuple, int nbOfCompo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_useExternalArrayWithRWAccess(self, *args)

    def writeOnPlace(self, *args):
        """
        writeOnPlace(self, int id, int element0, int others, int sizeOfOthers)

        1
        """
        return _ParaMEDMEM.DataArrayInt_writeOnPlace(self, *args)

    def Add(*args):
        """
        Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Add(*args)

    if _newclass:Add = staticmethod(Add)
    __swig_getmethods__["Add"] = lambda x: Add
    def addEqual(self, *args):
        """
        addEqual(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_addEqual(self, *args)

    def Substract(*args):
        """
        Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Substract(*args)

    if _newclass:Substract = staticmethod(Substract)
    __swig_getmethods__["Substract"] = lambda x: Substract
    def substractEqual(self, *args):
        """
        substractEqual(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_substractEqual(self, *args)

    def Multiply(*args):
        """
        Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Multiply(*args)

    if _newclass:Multiply = staticmethod(Multiply)
    __swig_getmethods__["Multiply"] = lambda x: Multiply
    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_multiplyEqual(self, *args)

    def Divide(*args):
        """
        Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Divide(*args)

    if _newclass:Divide = staticmethod(Divide)
    __swig_getmethods__["Divide"] = lambda x: Divide
    def divideEqual(self, *args):
        """
        divideEqual(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_divideEqual(self, *args)

    def Modulus(*args):
        """
        Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Modulus(*args)

    if _newclass:Modulus = staticmethod(Modulus)
    __swig_getmethods__["Modulus"] = lambda x: Modulus
    def modulusEqual(self, *args):
        """
        modulusEqual(self, DataArrayInt other)

        1
        """
        return _ParaMEDMEM.DataArrayInt_modulusEqual(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.DataArrayInt_updateTime(self)

    def CheckAndPreparePermutation(*args):
        """
        CheckAndPreparePermutation(int start, int end) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_CheckAndPreparePermutation(*args)

    if _newclass:CheckAndPreparePermutation = staticmethod(CheckAndPreparePermutation)
    __swig_getmethods__["CheckAndPreparePermutation"] = lambda x: CheckAndPreparePermutation
    def Range(*args):
        """
        Range(int begin, int end, int step) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Range(*args)

    if _newclass:Range = staticmethod(Range)
    __swig_getmethods__["Range"] = lambda x: Range
    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_getTinySerializationIntInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _ParaMEDMEM.DataArrayInt_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, svec tinyInfoS)

        1
        """
        return _ParaMEDMEM.DataArrayInt_finishUnserialization(self, *args)

    def getDifferentValues(self):
        """
        getDifferentValues(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_getDifferentValues(self)

    def partitionByDifferentValues(self):
        """
        partitionByDifferentValues(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_partitionByDifferentValues(self)

    def New(*args):
        """
        New() -> DataArrayInt
        New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
        New(PyObject elt0, PyObject elt1 = None) -> DataArrayInt
        New(PyObject elt0) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self) -> DataArrayInt
        __init__(self, PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
        __init__(self, PyObject elt0, PyObject elt1 = None) -> DataArrayInt
        __init__(self, PyObject elt0) -> DataArrayInt

        1
        """
        this = _ParaMEDMEM.new_DataArrayInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayInt___str__(self)

    def __len__(self):
        """
        __len__(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt___len__(self)

    def __int__(self):
        """
        __int__(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt___int__(self)

    def __iter__(self):
        """
        __iter__(self) -> DataArrayIntIterator

        1
        """
        return _ParaMEDMEM.DataArrayInt___iter__(self)

    def BuildOld2NewArrayFromSurjectiveFormat2(*args):
        """
        BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI, 
            int newNbOfTuples) -> DataArrayInt
        BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args)

    if _newclass:BuildOld2NewArrayFromSurjectiveFormat2 = staticmethod(BuildOld2NewArrayFromSurjectiveFormat2)
    __swig_getmethods__["BuildOld2NewArrayFromSurjectiveFormat2"] = lambda x: BuildOld2NewArrayFromSurjectiveFormat2
    def setValues(self, *args):
        """
        setValues(self, PyObject li, int nbOfTuples, int nbOfElsPerTuple)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setValues(self, *args)

    def getValues(self):
        """
        getValues(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_getValues(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, DataArrayInt other, string reason) -> bool
        isEqualIfNotWhy(self, DataArrayInt other) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_isEqualIfNotWhy(self, *args)

    def getValuesAsTuple(self):
        """
        getValuesAsTuple(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_getValuesAsTuple(self)

    def MakePartition(*args):
        """
        MakePartition(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> groups, 
            int newNb, 
            std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)> fidsOfGroups) -> DataArrayInt
        MakePartition(PyObject gps, int newNb) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_MakePartition(*args)

    if _newclass:MakePartition = staticmethod(MakePartition)
    __swig_getmethods__["MakePartition"] = lambda x: MakePartition
    def transformWithIndArr(self, *args):
        """
        transformWithIndArr(self, int indArrBg, int indArrEnd)
        transformWithIndArr(self, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayInt_transformWithIndArr(self, *args)

    def getIdsEqualList(self, *args):
        """
        getIdsEqualList(self, int valsBg, int valsEnd) -> DataArrayInt
        getIdsEqualList(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIdsEqualList(self, *args)

    def getIdsNotEqualList(self, *args):
        """
        getIdsNotEqualList(self, int valsBg, int valsEnd) -> DataArrayInt
        getIdsNotEqualList(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_getIdsNotEqualList(self, *args)

    def splitByValueRange(self, *args):
        """
        splitByValueRange(self, int arrBg, int arrEnd, DataArrayInt castArr, DataArrayInt rankInsideCast, 
            DataArrayInt castsPresent)
        splitByValueRange(self, PyObject li) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_splitByValueRange(self, *args)

    def transformWithIndArrR(self, *args):
        """
        transformWithIndArrR(self, int indArrBg, int indArrEnd) -> DataArrayInt
        transformWithIndArrR(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_transformWithIndArrR(self, *args)

    def renumberInPlace(self, *args):
        """
        renumberInPlace(self, int old2New)
        renumberInPlace(self, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayInt_renumberInPlace(self, *args)

    def renumberInPlaceR(self, *args):
        """
        renumberInPlaceR(self, int new2Old)
        renumberInPlaceR(self, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayInt_renumberInPlaceR(self, *args)

    def renumberAndReduce(self, *args):
        """
        renumberAndReduce(self, int old2NewBg, int newNbOfTuple) -> DataArrayInt
        renumberAndReduce(self, PyObject li, int newNbOfTuple) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_renumberAndReduce(self, *args)

    def renumber(self, *args):
        """
        renumber(self, int old2New) -> DataArrayInt
        renumber(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_renumber(self, *args)

    def renumberR(self, *args):
        """
        renumberR(self, int new2Old) -> DataArrayInt
        renumberR(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_renumberR(self, *args)

    def selectByTupleId(self, *args):
        """
        selectByTupleId(self, int new2OldBg, int new2OldEnd) -> DataArrayInt
        selectByTupleId(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_selectByTupleId(self, *args)

    def selectByTupleIdSafe(self, *args):
        """
        selectByTupleIdSafe(self, int new2OldBg, int new2OldEnd) -> DataArrayInt
        selectByTupleIdSafe(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_selectByTupleIdSafe(self, *args)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> DataArrayInt
        keepSelectedComponents(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, DataArrayInt a, ivec compoIds)
        setSelectedComponents(self, DataArrayInt a, PyObject li)

        1
        """
        return _ParaMEDMEM.DataArrayInt_setSelectedComponents(self, *args)

    def getTuple(self, *args):
        """
        getTuple(self, int tupleId, int res)
        getTuple(self, int tupleId) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_getTuple(self, *args)

    def changeSurjectiveFormat(self, *args):
        """
        changeSurjectiveFormat(self, int targetNb, DataArrayInt arr, DataArrayInt arrI)
        changeSurjectiveFormat(self, int targetNb) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_changeSurjectiveFormat(self, *args)

    def selectByTupleRanges(self, *args):
        """
        selectByTupleRanges(self, std::vector<(std::pair<(int,int)>,std::allocator<(std::pair<(int,int)>)>)> ranges) -> DataArrayInt
        selectByTupleRanges(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_selectByTupleRanges(self, *args)

    def Meld(*args):
        """
        Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        Meld(PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Meld(*args)

    if _newclass:Meld = staticmethod(Meld)
    __swig_getmethods__["Meld"] = lambda x: Meld
    def Aggregate(*args):
        """
        Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
        Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        Aggregate(PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_Aggregate(*args)

    if _newclass:Aggregate = staticmethod(Aggregate)
    __swig_getmethods__["Aggregate"] = lambda x: Aggregate
    def BuildUnion(*args):
        """
        BuildUnion(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        BuildUnion(PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_BuildUnion(*args)

    if _newclass:BuildUnion = staticmethod(BuildUnion)
    __swig_getmethods__["BuildUnion"] = lambda x: BuildUnion
    def BuildIntersection(*args):
        """
        BuildIntersection(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        BuildIntersection(PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt_BuildIntersection(*args)

    if _newclass:BuildIntersection = staticmethod(BuildIntersection)
    __swig_getmethods__["BuildIntersection"] = lambda x: BuildIntersection
    def getMaxValue(self, *args):
        """
        getMaxValue(self, int tupleId) -> int
        getMaxValue(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_getMaxValue(self, *args)

    def getMinValue(self, *args):
        """
        getMinValue(self, int tupleId) -> int
        getMinValue(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt_getMinValue(self, *args)

    def index(self, *args):
        """
        index(self, PyObject obj) -> int

        1
        """
        return _ParaMEDMEM.DataArrayInt_index(self, *args)

    def __contains__(self, *args):
        """
        __contains__(self, PyObject obj) -> bool

        1
        """
        return _ParaMEDMEM.DataArrayInt___contains__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___setitem__(self, *args)

    def __neg__(self):
        """
        __neg__(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___neg__(self)

    def __add__(self, *args):
        """
        __add__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___add__(self, *args)

    def __radd__(self, *args):
        """
        __radd__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___radd__(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt____iadd___(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___sub__(self, *args)

    def __rsub__(self, *args):
        """
        __rsub__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___rsub__(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt____isub___(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___mul__(self, *args)

    def __rmul__(self, *args):
        """
        __rmul__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___rmul__(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt____imul___(self, *args)

    def __div__(self, *args):
        """
        __div__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___div__(self, *args)

    def __rdiv__(self, *args):
        """
        __rdiv__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___rdiv__(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt____idiv___(self, *args)

    def __mod__(self, *args):
        """
        __mod__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___mod__(self, *args)

    def __rmod__(self, *args):
        """
        __rmod__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayInt___rmod__(self, *args)

    def ___imod___(self, *args):
        """
        ___imod___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayInt____imod___(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_DataArrayInt
    __del__ = lambda self : None;
DataArrayInt_swigregister = _ParaMEDMEM.DataArrayInt_swigregister
DataArrayInt_swigregister(DataArrayInt)

def DataArrayInt_Add(*args):
  """
    DataArrayInt_Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Add(*args)

def DataArrayInt_Substract(*args):
  """
    DataArrayInt_Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Substract(*args)

def DataArrayInt_Multiply(*args):
  """
    DataArrayInt_Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Multiply(*args)

def DataArrayInt_Divide(*args):
  """
    DataArrayInt_Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Divide(*args)

def DataArrayInt_Modulus(*args):
  """
    DataArrayInt_Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Modulus(*args)

def DataArrayInt_CheckAndPreparePermutation(*args):
  """
    DataArrayInt_CheckAndPreparePermutation(int start, int end) -> int

    1
    """
  return _ParaMEDMEM.DataArrayInt_CheckAndPreparePermutation(*args)

def DataArrayInt_Range(*args):
  """
    DataArrayInt_Range(int begin, int end, int step) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Range(*args)

def DataArrayInt_New(*args):
  """
    New() -> DataArrayInt
    New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
    New(PyObject elt0, PyObject elt1 = None) -> DataArrayInt
    DataArrayInt_New(PyObject elt0) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_New(*args)

def DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args):
  """
    BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI, 
        int newNbOfTuples) -> DataArrayInt
    DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI) -> PyObject

    1
    """
  return _ParaMEDMEM.DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args)

def DataArrayInt_MakePartition(*args):
  """
    MakePartition(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> groups, 
        int newNb, 
        std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)> fidsOfGroups) -> DataArrayInt
    DataArrayInt_MakePartition(PyObject gps, int newNb) -> PyObject

    1
    """
  return _ParaMEDMEM.DataArrayInt_MakePartition(*args)

def DataArrayInt_Meld(*args):
  """
    Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_Meld(PyObject li) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Meld(*args)

def DataArrayInt_Aggregate(*args):
  """
    Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
    Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_Aggregate(PyObject li) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_Aggregate(*args)

def DataArrayInt_BuildUnion(*args):
  """
    BuildUnion(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_BuildUnion(PyObject li) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_BuildUnion(*args)

def DataArrayInt_BuildIntersection(*args):
  """
    BuildIntersection(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_BuildIntersection(PyObject li) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.DataArrayInt_BuildIntersection(*args)

class DataArrayIntIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DataArrayInt da) -> DataArrayIntIterator

        1
        """
        this = _ParaMEDMEM.new_DataArrayIntIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_DataArrayIntIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntIterator_next(self)

DataArrayIntIterator_swigregister = _ParaMEDMEM.DataArrayIntIterator_swigregister
DataArrayIntIterator_swigregister(DataArrayIntIterator)

class DataArrayIntTuple(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntTuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int pt, int nbOfComp) -> DataArrayIntTuple

        1
        """
        this = _ParaMEDMEM.new_DataArrayIntTuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCompo(self):
        """
        getNumberOfCompo(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple_getNumberOfCompo(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple_getConstPointer(self)

    def getPointer(self):
        """
        getPointer(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple_getPointer(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple___str__(self)

    def __int__(self):
        """
        __int__(self) -> int

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple___int__(self)

    def buildDAInt(self, *args):
        """
        buildDAInt(self, int nbOfTuples, int nbOfCompo) -> DataArrayInt
        buildDAInt(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple_buildDAInt(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple____idiv___(self, *args)

    def ___imod___(self, *args):
        """
        ___imod___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple____imod___(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayIntTuple

        1
        """
        return _ParaMEDMEM.DataArrayIntTuple___setitem__(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_DataArrayIntTuple
    __del__ = lambda self : None;
DataArrayIntTuple_swigregister = _ParaMEDMEM.DataArrayIntTuple_swigregister
DataArrayIntTuple_swigregister(DataArrayIntTuple)

ALL_C_MODE = _ParaMEDMEM.ALL_C_MODE
ALL_FORTRAN_MODE = _ParaMEDMEM.ALL_FORTRAN_MODE
NORM_POINT1 = _ParaMEDMEM.NORM_POINT1
NORM_SEG2 = _ParaMEDMEM.NORM_SEG2
NORM_SEG3 = _ParaMEDMEM.NORM_SEG3
NORM_SEG4 = _ParaMEDMEM.NORM_SEG4
NORM_POLYL = _ParaMEDMEM.NORM_POLYL
NORM_TRI3 = _ParaMEDMEM.NORM_TRI3
NORM_QUAD4 = _ParaMEDMEM.NORM_QUAD4
NORM_POLYGON = _ParaMEDMEM.NORM_POLYGON
NORM_TRI6 = _ParaMEDMEM.NORM_TRI6
NORM_TRI7 = _ParaMEDMEM.NORM_TRI7
NORM_QUAD8 = _ParaMEDMEM.NORM_QUAD8
NORM_QUAD9 = _ParaMEDMEM.NORM_QUAD9
NORM_QPOLYG = _ParaMEDMEM.NORM_QPOLYG
NORM_TETRA4 = _ParaMEDMEM.NORM_TETRA4
NORM_PYRA5 = _ParaMEDMEM.NORM_PYRA5
NORM_PENTA6 = _ParaMEDMEM.NORM_PENTA6
NORM_HEXA8 = _ParaMEDMEM.NORM_HEXA8
NORM_TETRA10 = _ParaMEDMEM.NORM_TETRA10
NORM_HEXGP12 = _ParaMEDMEM.NORM_HEXGP12
NORM_PYRA13 = _ParaMEDMEM.NORM_PYRA13
NORM_PENTA15 = _ParaMEDMEM.NORM_PENTA15
NORM_HEXA20 = _ParaMEDMEM.NORM_HEXA20
NORM_HEXA27 = _ParaMEDMEM.NORM_HEXA27
NORM_POLYHED = _ParaMEDMEM.NORM_POLYHED
NORM_ERROR = _ParaMEDMEM.NORM_ERROR
NORM_MAXTYPE = _ParaMEDMEM.NORM_MAXTYPE
class GenericMesh(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericMesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ParaMEDMEM.delete_GenericMesh
    __del__ = lambda self : None;
GenericMesh_swigregister = _ParaMEDMEM.GenericMesh_swigregister
GenericMesh_swigregister(GenericMesh)

NoNature = _ParaMEDMEM.NoNature
ConservativeVolumic = _ParaMEDMEM.ConservativeVolumic
Integral = _ParaMEDMEM.Integral
IntegralGlobConstraint = _ParaMEDMEM.IntegralGlobConstraint
RevIntegral = _ParaMEDMEM.RevIntegral
class MEDCouplingNatureOfField(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNatureOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNatureOfField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getRepr(*args):
        """
        getRepr(NatureOfField nat) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingNatureOfField_getRepr(*args)

    if _newclass:getRepr = staticmethod(getRepr)
    __swig_getmethods__["getRepr"] = lambda x: getRepr
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingNatureOfField
    __del__ = lambda self : None;
MEDCouplingNatureOfField_swigregister = _ParaMEDMEM.MEDCouplingNatureOfField_swigregister
MEDCouplingNatureOfField_swigregister(MEDCouplingNatureOfField)

def MEDCouplingNatureOfField_getRepr(*args):
  """
    MEDCouplingNatureOfField_getRepr(NatureOfField nat) -> char

    1
    """
  return _ParaMEDMEM.MEDCouplingNatureOfField_getRepr(*args)

class MEDCouplingTimeDiscretization(TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingTimeDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingTimeDiscretization, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_updateTime(self)

    def New(*args):
        """
        New(TypeOfTimeDiscretization type) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTimeUnit(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_copyTinyAttrFrom(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_copyTinyStringsFrom(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_checkCoherency(self)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_areCompatibleForMeld(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_isEqualIfNotWhy(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_isEqualWithoutConsideringStr(self, *args)

    def buildNewTimeReprFromThis(self, *args):
        """
        buildNewTimeReprFromThis(self, TypeOfTimeDiscretization type, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_buildNewTimeReprFromThis(self, *args)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_divideEqual(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTinySerializationDbleInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_performCpy(self, *args)

    def setTimeTolerance(self, *args):
        """
        setTimeTolerance(self, double val)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setTimeTolerance(self, *args)

    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTimeTolerance(self)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_checkTimePresence(self, *args)

    def setArray(self, *args):
        """
        setArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setArray(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setEndArray(self, *args)

    def setArrays(self, *args):
        """
        setArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            TimeLabel owner)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setArrays(self, *args)

    def getArray(self, *args):
        """
        getArray(self) -> DataArrayDouble
        getArray(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getArray(self, *args)

    def getEndArray(self, *args):
        """
        getEndArray(self) -> DataArrayDouble
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getEndArray(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getValueForTime(self, *args)

    def getArrays(self, *args):
        """
        getArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getArrays(self, *args)

    def isBefore(self, *args):
        """
        isBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_isBefore(self, *args)

    def isStrictlyBefore(self, *args):
        """
        isStrictlyBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_isStrictlyBefore(self, *args)

    def getTime(self, *args):
        """
        getTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getEndTime(self, *args)

    def setTime(self, *args):
        """
        setTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setTime(self, *args)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setIteration(self, *args)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setOrder(self, *args)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double val)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setTimeValue(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setEndTimeValue(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setEndTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_getValueOnDiscTime(self, *args)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_inverse(self)

    def trace(self):
        """
        trace(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_trace(self)

    def deviator(self):
        """
        deviator(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_maxPerTuple(self)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, MEDCouplingTimeDiscretization other, ivec compoIds)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setSelectedComponents(self, *args)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_changeNbOfComponents(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_sortPerTuple(self, *args)

    def setUniformValue(self, *args):
        """
        setUniformValue(self, int nbOfTuple, int nbOfCompo, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_setUniformValue(self, *args)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_applyLin(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_applyFunc3(self, *args)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, FunctionToEvaluate func)
        applyFunc(self, int nbOfComp, char func)
        applyFunc(self, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_applyFunc(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_applyFuncFast64(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, DataArrayDouble loc, int nbOfComp, FunctionToEvaluate func)
        fillFromAnalytic(self, DataArrayDouble loc, int nbOfComp, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, DataArrayDouble loc, int nbOfComp, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, DataArrayDouble loc, int nbOfComp, svec varsOrder, 
            char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingTimeDiscretization_fillFromAnalytic3(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingTimeDiscretization
    __del__ = lambda self : None;
MEDCouplingTimeDiscretization_swigregister = _ParaMEDMEM.MEDCouplingTimeDiscretization_swigregister
MEDCouplingTimeDiscretization_swigregister(MEDCouplingTimeDiscretization)

def MEDCouplingTimeDiscretization_New(*args):
  """
    MEDCouplingTimeDiscretization_New(TypeOfTimeDiscretization type) -> MEDCouplingTimeDiscretization

    1
    """
  return _ParaMEDMEM.MEDCouplingTimeDiscretization_New(*args)

class MEDCouplingNoTimeLabel(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNoTimeLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNoTimeLabel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingNoTimeLabel
        __init__(self, MEDCouplingTimeDiscretization other, bool deepCpy) -> MEDCouplingNoTimeLabel

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingNoTimeLabel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_divideEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_isEqualWithoutConsideringStr(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_areCompatibleForMeld(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_performCpy(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_checkTimePresence(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getValueForTime(self, *args)

    def isBefore(self, *args):
        """
        isBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_isBefore(self, *args)

    def isStrictlyBefore(self, *args):
        """
        isStrictlyBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_isStrictlyBefore(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setEndTimeValue(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_setEndTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getValueOnDiscTime(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _ParaMEDMEM.MEDCouplingNoTimeLabel_finishUnserialization2(self, *args)

    DISCRETIZATION = _ParaMEDMEM.MEDCouplingNoTimeLabel_DISCRETIZATION
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingNoTimeLabel
    __del__ = lambda self : None;
MEDCouplingNoTimeLabel_swigregister = _ParaMEDMEM.MEDCouplingNoTimeLabel_swigregister
MEDCouplingNoTimeLabel_swigregister(MEDCouplingNoTimeLabel)
cvar = _ParaMEDMEM.cvar
MEDCouplingNoTimeLabel.REPR = _ParaMEDMEM.cvar.MEDCouplingNoTimeLabel_REPR

class MEDCouplingWithTimeStep(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingWithTimeStep, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingWithTimeStep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingWithTimeStep

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingWithTimeStep()
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getStringRepr(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_copyTinyAttrFrom(self, *args)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_divideEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_isEqualWithoutConsideringStr(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_areCompatibleForMeld(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_performCpy(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_checkTimePresence(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_setEndTimeValue(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingWithTimeStep_getValueOnDiscTime(self, *args)

    DISCRETIZATION = _ParaMEDMEM.MEDCouplingWithTimeStep_DISCRETIZATION
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingWithTimeStep
    __del__ = lambda self : None;
MEDCouplingWithTimeStep_swigregister = _ParaMEDMEM.MEDCouplingWithTimeStep_swigregister
MEDCouplingWithTimeStep_swigregister(MEDCouplingWithTimeStep)
MEDCouplingWithTimeStep.REPR = _ParaMEDMEM.cvar.MEDCouplingWithTimeStep_REPR

class MEDCouplingConstOnTimeInterval(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingConstOnTimeInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingConstOnTimeInterval, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingConstOnTimeInterval

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingConstOnTimeInterval()
        try: self.this.append(this)
        except: self.this = this
    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_copyTinyAttrFrom(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_performCpy(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_areCompatibleForMeld(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_isEqualWithoutConsideringStr(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getValueOnDiscTime(self, *args)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getEnum(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getStringRepr(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_divideEqual(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_setEndTimeValue(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingConstOnTimeInterval_checkTimePresence(self, *args)

    DISCRETIZATION = _ParaMEDMEM.MEDCouplingConstOnTimeInterval_DISCRETIZATION
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingConstOnTimeInterval
    __del__ = lambda self : None;
MEDCouplingConstOnTimeInterval_swigregister = _ParaMEDMEM.MEDCouplingConstOnTimeInterval_swigregister
MEDCouplingConstOnTimeInterval_swigregister(MEDCouplingConstOnTimeInterval)
MEDCouplingConstOnTimeInterval.REPR = _ParaMEDMEM.cvar.MEDCouplingConstOnTimeInterval_REPR

class MEDCouplingTwoTimeSteps(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingTwoTimeSteps, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingTwoTimeSteps, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_updateTime(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_copyTinyAttrFrom(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_copyTinyStringsFrom(self, *args)

    def getEndArray(self, *args):
        """
        getEndArray(self) -> DataArrayDouble
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getEndArray(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_checkCoherency(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_isEqualWithoutConsideringStr(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_checkTimePresence(self, *args)

    def getArrays(self, *args):
        """
        getArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getArrays(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setEndArray(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setEndTimeValue(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getTinySerializationDbleInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_finishUnserialization2(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_getArraysForTime(self, *args)

    def setArrays(self, *args):
        """
        setArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            TimeLabel owner)

        1
        """
        return _ParaMEDMEM.MEDCouplingTwoTimeSteps_setArrays(self, *args)

MEDCouplingTwoTimeSteps_swigregister = _ParaMEDMEM.MEDCouplingTwoTimeSteps_swigregister
MEDCouplingTwoTimeSteps_swigregister(MEDCouplingTwoTimeSteps)

class MEDCouplingLinearTime(MEDCouplingTwoTimeSteps):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTwoTimeSteps]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingLinearTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTwoTimeSteps]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingLinearTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingLinearTime

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingLinearTime()
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_getEnum(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_checkCoherency(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_performCpy(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_areCompatibleForMeld(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_getValueOnDiscTime(self, *args)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _ParaMEDMEM.MEDCouplingLinearTime_divideEqual(self, *args)

    DISCRETIZATION = _ParaMEDMEM.MEDCouplingLinearTime_DISCRETIZATION
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingLinearTime
    __del__ = lambda self : None;
MEDCouplingLinearTime_swigregister = _ParaMEDMEM.MEDCouplingLinearTime_swigregister
MEDCouplingLinearTime_swigregister(MEDCouplingLinearTime)
MEDCouplingLinearTime.REPR = _ParaMEDMEM.cvar.MEDCouplingLinearTime_REPR

class MEDCouplingFieldDiscretization(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretization, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(TypeOfField type) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def getPrecision(self):
        """
        getPrecision(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getPrecision(self)

    def setPrecision(self, *args):
        """
        setPrecision(self, double val)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_setPrecision(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_updateTime(self)

    def getTypeOfFieldFromStringRepr(*args):
        """
        getTypeOfFieldFromStringRepr(char repr) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args)

    if _newclass:getTypeOfFieldFromStringRepr = staticmethod(getTypeOfFieldFromStringRepr)
    __swig_getmethods__["getTypeOfFieldFromStringRepr"] = lambda x: getTypeOfFieldFromStringRepr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getEnum(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_isEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_isEqualWithoutConsideringStr(self, *args)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getRepr(self)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getOffsetArr(self, *args)

    def normL1(self, *args):
        """
        normL1(self, MEDCouplingMesh mesh, DataArrayDouble arr, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_normL1(self, *args)

    def normL2(self, *args):
        """
        normL2(self, MEDCouplingMesh mesh, DataArrayDouble arr, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_normL2(self, *args)

    def integral(self, *args):
        """
        integral(self, MEDCouplingMesh mesh, DataArrayDouble arr, bool isWAbs, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_integral(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_checkCompatibilityWithNature(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, int old2NewBg, bool check = True)
        renumberCells(self, int old2NewBg)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_renumberCells(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_renumberArraysForCell(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getValueOnMulti(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_computeTupleIdsToSelectFromCellIds(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_buildSubMeshData(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_renumberValuesOnCellsR(self, *args)

    def getSerializationIntArray(self, *args):
        """
        getSerializationIntArray(self, DataArrayInt arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getSerializationIntArray(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_finishUnserialization(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_resizeForUnserialization(self, *args)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, MEDCouplingMesh m, NormalizedCellType type, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_setGaussLocalizationOnType(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, MEDCouplingMesh m, int begin, int end, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_setGaussLocalizationOnCells(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneType(self, *args)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> __dummy_0__

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getGaussLocalizationIdsOfOneType(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId, ivec cellIds)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getCellIdsHavingGaussLocalization(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_getGaussLocalization(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretization
    __del__ = lambda self : None;
    def clonePart(self, *args):
        """
        clonePart(self, PyObject li) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretization_clonePart(self, *args)

MEDCouplingFieldDiscretization_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretization_swigregister
MEDCouplingFieldDiscretization_swigregister(MEDCouplingFieldDiscretization)

def MEDCouplingFieldDiscretization_New(*args):
  """
    MEDCouplingFieldDiscretization_New(TypeOfField type) -> MEDCouplingFieldDiscretization

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDiscretization_New(*args)

def MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args):
  """
    MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(char repr) -> TypeOfField

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args)

class MEDCouplingFieldDiscretizationP0(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP0, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP0, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getRepr(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_isEqualIfNotWhy(self, *args)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getLocalizationOfDiscValues(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_checkCompatibilityWithNature(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_getValueOnMulti(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_renumberValuesOnCellsR(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_computeTupleIdsToSelectFromCellIds(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretizationP0
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationP0_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationP0_swigregister
MEDCouplingFieldDiscretizationP0_swigregister(MEDCouplingFieldDiscretizationP0)
MEDCouplingFieldDiscretizationP0.REPR = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationP0_REPR
MEDCouplingFieldDiscretizationP0.TYPE = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationP0_TYPE

class MEDCouplingFieldDiscretizationOnNodes(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationOnNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationOnNodes, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_checkCoherencyBetween(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnCellsR(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_getValueOnPos(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretizationOnNodes
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationOnNodes_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationOnNodes_swigregister
MEDCouplingFieldDiscretizationOnNodes_swigregister(MEDCouplingFieldDiscretizationOnNodes)

class MEDCouplingFieldDiscretizationP1(MEDCouplingFieldDiscretizationOnNodes):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP1, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP1, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_getRepr(self)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_checkCompatibilityWithNature(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_isEqualIfNotWhy(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_getValueOn(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_getValueOnMulti(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretizationP1
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationP1_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationP1_swigregister
MEDCouplingFieldDiscretizationP1_swigregister(MEDCouplingFieldDiscretizationP1)
MEDCouplingFieldDiscretizationP1.REPR = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationP1_REPR
MEDCouplingFieldDiscretizationP1.TYPE = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationP1_TYPE

class MEDCouplingFieldDiscretizationPerCell(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationPerCell, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationPerCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getArrayOfDiscIds(self):
        """
        getArrayOfDiscIds(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationPerCell_getArrayOfDiscIds(self)

MEDCouplingFieldDiscretizationPerCell_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationPerCell_swigregister
MEDCouplingFieldDiscretizationPerCell_swigregister(MEDCouplingFieldDiscretizationPerCell)

class MEDCouplingFieldDiscretizationGauss(MEDCouplingFieldDiscretizationPerCell):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGauss, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingFieldDiscretizationGauss

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingFieldDiscretizationGauss()
        try: self.this.append(this)
        except: self.this = this
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getEnum(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_isEqualWithoutConsideringStr(self, *args)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getRepr(self)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_checkCompatibilityWithNature(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, dvec tinyInfo)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_finishUnserialization(self, *args)

    def getSerializationIntArray(self, *args):
        """
        getSerializationIntArray(self, DataArrayInt arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getSerializationIntArray(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_resizeForUnserialization(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getValueOnMulti(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_renumberValuesOnCellsR(self, *args)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, MEDCouplingMesh m, NormalizedCellType type, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_setGaussLocalizationOnType(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, MEDCouplingMesh m, int begin, int end, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_setGaussLocalizationOnCells(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdOfOneType(self, *args)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> __dummy_0__

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdsOfOneType(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId, ivec cellIds)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getCellIdsHavingGaussLocalization(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_getGaussLocalization(self, *args)

    def splitIntoSingleGaussDicrPerCellType(self, *args):
        """
        splitIntoSingleGaussDicrPerCellType(self, ivec locIds) -> std::vector<(p.ParaMEDMEM::DataArrayInt,std::allocator<(p.ParaMEDMEM::DataArrayInt)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_splitIntoSingleGaussDicrPerCellType(self, *args)

    def buildNbOfGaussPointPerCellField(self):
        """
        buildNbOfGaussPointPerCellField(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_buildNbOfGaussPointPerCellField(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretizationGauss
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationGauss_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationGauss_swigregister
MEDCouplingFieldDiscretizationGauss_swigregister(MEDCouplingFieldDiscretizationGauss)
MEDCouplingFieldDiscretizationGauss.REPR = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationGauss_REPR
MEDCouplingFieldDiscretizationGauss.TYPE = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationGauss_TYPE

class MEDCouplingFieldDiscretizationGaussNE(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGaussNE, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGaussNE, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingFieldDiscretizationGaussNE

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingFieldDiscretizationGaussNE()
        try: self.this.append(this)
        except: self.this = this
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getRepr(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_isEqualIfNotWhy(self, *args)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_checkCompatibilityWithNature(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_getValueOnMulti(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnCellsR(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretizationGaussNE
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationGaussNE_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationGaussNE_swigregister
MEDCouplingFieldDiscretizationGaussNE_swigregister(MEDCouplingFieldDiscretizationGaussNE)
MEDCouplingFieldDiscretizationGaussNE.REPR = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationGaussNE_REPR
MEDCouplingFieldDiscretizationGaussNE.TYPE = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationGaussNE_TYPE

class MEDCouplingFieldDiscretizationKriging(MEDCouplingFieldDiscretizationOnNodes):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationKriging, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationKriging, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_getEnum(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_getRepr(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_getStringRepr(self)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_checkCompatibilityWithNature(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_isEqualIfNotWhy(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_getValueOn(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_getValueOnMulti(self, *args)

    def computeVectorOfCoefficients(self, *args):
        """
        computeVectorOfCoefficients(self, MEDCouplingMesh mesh, DataArrayDouble arr, int isDrift) -> DataArrayDouble
        computeVectorOfCoefficients(self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_computeVectorOfCoefficients(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDiscretizationKriging
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationKriging_swigregister = _ParaMEDMEM.MEDCouplingFieldDiscretizationKriging_swigregister
MEDCouplingFieldDiscretizationKriging_swigregister(MEDCouplingFieldDiscretizationKriging)
MEDCouplingFieldDiscretizationKriging.REPR = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationKriging_REPR
MEDCouplingFieldDiscretizationKriging.TYPE = _ParaMEDMEM.cvar.MEDCouplingFieldDiscretizationKriging_TYPE

class MEDCouplingGaussLocalization(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingGaussLocalization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingGaussLocalization, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec w) -> MEDCouplingGaussLocalization

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingGaussLocalization(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getType(self)

    def getNumberOfGaussPt(self):
        """
        getNumberOfGaussPt(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getNumberOfGaussPt(self)

    def getDimension(self):
        """
        getDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getDimension(self)

    def getNumberOfPtsInRefCell(self):
        """
        getNumberOfPtsInRefCell(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getNumberOfPtsInRefCell(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getStringRepr(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_checkCoherency(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingGaussLocalization other, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_isEqual(self, *args)

    def getRefCoords(self):
        """
        getRefCoords(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getRefCoords(self)

    def getRefCoord(self, *args):
        """
        getRefCoord(self, int ptIdInCell, int comp) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getRefCoord(self, *args)

    def getGaussCoords(self):
        """
        getGaussCoords(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getGaussCoords(self)

    def getGaussCoord(self, *args):
        """
        getGaussCoord(self, int gaussPtIdInCell, int comp) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getGaussCoord(self, *args)

    def getWeights(self):
        """
        getWeights(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getWeights(self)

    def getWeight(self, *args):
        """
        getWeight(self, int gaussPtIdInCell, double newVal) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_getWeight(self, *args)

    def setRefCoord(self, *args):
        """
        setRefCoord(self, int ptIdInCell, int comp, double newVal)

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_setRefCoord(self, *args)

    def setGaussCoord(self, *args):
        """
        setGaussCoord(self, int gaussPtIdInCell, int comp, double newVal)

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_setGaussCoord(self, *args)

    def setWeight(self, *args):
        """
        setWeight(self, int gaussPtIdInCell, double newVal)

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_setWeight(self, *args)

    def BuildNewInstanceFromTinyInfo(*args):
        """
        BuildNewInstanceFromTinyInfo(int dim, ivec tinyData) -> MEDCouplingGaussLocalization

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args)

    if _newclass:BuildNewInstanceFromTinyInfo = staticmethod(BuildNewInstanceFromTinyInfo)
    __swig_getmethods__["BuildNewInstanceFromTinyInfo"] = lambda x: BuildNewInstanceFromTinyInfo
    def AreAlmostEqual(*args):
        """
        AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingGaussLocalization_AreAlmostEqual(*args)

    if _newclass:AreAlmostEqual = staticmethod(AreAlmostEqual)
    __swig_getmethods__["AreAlmostEqual"] = lambda x: AreAlmostEqual
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingGaussLocalization
    __del__ = lambda self : None;
MEDCouplingGaussLocalization_swigregister = _ParaMEDMEM.MEDCouplingGaussLocalization_swigregister
MEDCouplingGaussLocalization_swigregister(MEDCouplingGaussLocalization)

def MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args):
  """
    MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(int dim, ivec tinyData) -> MEDCouplingGaussLocalization

    1
    """
  return _ParaMEDMEM.MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args)

def MEDCouplingGaussLocalization_AreAlmostEqual(*args):
  """
    MEDCouplingGaussLocalization_AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

    1
    """
  return _ParaMEDMEM.MEDCouplingGaussLocalization_AreAlmostEqual(*args)

class MEDCouplingPointSet(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingPointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingPointSet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_updateTime(self)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coords)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_setCoords(self, *args)

    def getCoordinatesAndOwner(self):
        """
        getCoordinatesAndOwner(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getCoordinatesAndOwner(self)

    def areCoordsEqual(self, *args):
        """
        areCoordsEqual(self, MEDCouplingPointSet other, double prec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_areCoordsEqual(self, *args)

    def zipCoords(self):
        """
        zipCoords(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_zipCoords(self)

    def getCaracteristicDimension(self):
        """
        getCaracteristicDimension(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getCaracteristicDimension(self)

    def recenterForMaxPrecision(self, *args):
        """
        recenterForMaxPrecision(self, double eps)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_recenterForMaxPrecision(self, *args)

    def changeSpaceDimension(self, *args):
        """
        changeSpaceDimension(self, int newSpaceDim, double dftVal = 0.)
        changeSpaceDimension(self, int newSpaceDim)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_changeSpaceDimension(self, *args)

    def tryToShareSameCoords(self, *args):
        """
        tryToShareSameCoords(self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_tryToShareSameCoords(self, *args)

    def buildPartOfMySelf2(self, *args):
        """
        buildPartOfMySelf2(self, int start, int end, int step) -> MEDCouplingPointSet

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_buildPartOfMySelf2(self, *args)

    def tryToShareSameCoordsPermute(self, *args):
        """
        tryToShareSameCoordsPermute(self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_tryToShareSameCoordsPermute(self, *args)

    def MergeNodesArray(*args):
        """
        MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_MergeNodesArray(*args)

    if _newclass:MergeNodesArray = staticmethod(MergeNodesArray)
    __swig_getmethods__["MergeNodesArray"] = lambda x: MergeNodesArray
    def BuildInstanceFromMeshType(*args):
        """
        BuildInstanceFromMeshType(MEDCouplingMeshType type) -> MEDCouplingPointSet

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_BuildInstanceFromMeshType(*args)

    if _newclass:BuildInstanceFromMeshType = staticmethod(BuildInstanceFromMeshType)
    __swig_getmethods__["BuildInstanceFromMeshType"] = lambda x: BuildInstanceFromMeshType
    def buildBoundaryMesh(self, *args):
        """
        buildBoundaryMesh(self, bool keepCoords) -> MEDCouplingPointSet

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_buildBoundaryMesh(self, *args)

    def isEmptyMesh(self, *args):
        """
        isEmptyMesh(self, ivec tinyInfo) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_isEmptyMesh(self, *args)

    def getTinySerializationInformation(self, *args):
        """
        getTinySerializationInformation(self, dvec tinyInfoD, ivec tinyInfo, svec littleStrings)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getTinySerializationInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, 
            svec littleStrings)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_resizeForUnserialization(self, *args)

    def serialize(self, *args):
        """
        serialize(self, DataArrayInt a1, DataArrayDouble a2)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_serialize(self, *args)

    def unserialization(self, *args):
        """
        unserialization(self, dvec tinyInfoD, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, 
            svec littleStrings)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_unserialization(self, *args)

    def zipCoordsTraducer(self):
        """
        zipCoordsTraducer(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_zipCoordsTraducer(self)

    def findBoundaryNodes(self):
        """
        findBoundaryNodes(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_findBoundaryNodes(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet___str__(self)

    def buildNewNumberingFromCommonNodesFormat(self, *args):
        """
        buildNewNumberingFromCommonNodesFormat(self, DataArrayInt comm, DataArrayInt commIndex) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_buildNewNumberingFromCommonNodesFormat(self, *args)

    def findCommonNodes(self, *args):
        """
        findCommonNodes(self, double prec, int limitTupleId = -1) -> PyObject
        findCommonNodes(self, double prec) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_findCommonNodes(self, *args)

    def getCoords(self):
        """
        getCoords(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getCoords(self)

    def buildPartOfMySelf(self, *args):
        """
        buildPartOfMySelf(self, PyObject li, bool keepCoords = True) -> PyObject
        buildPartOfMySelf(self, PyObject li) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_buildPartOfMySelf(self, *args)

    def buildPartOfMySelfNode(self, *args):
        """
        buildPartOfMySelfNode(self, PyObject li, bool fullyIn) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_buildPartOfMySelfNode(self, *args)

    def buildFacePartOfMySelfNode(self, *args):
        """
        buildFacePartOfMySelfNode(self, PyObject li, bool fullyIn) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_buildFacePartOfMySelfNode(self, *args)

    def renumberNodes(self, *args):
        """
        renumberNodes(self, PyObject li, int newNbOfNodes)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_renumberNodes(self, *args)

    def renumberNodes2(self, *args):
        """
        renumberNodes2(self, PyObject li, int newNbOfNodes)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_renumberNodes2(self, *args)

    def findNodesOnLine(self, *args):
        """
        findNodesOnLine(self, PyObject pt, PyObject vec, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_findNodesOnLine(self, *args)

    def findNodesOnPlane(self, *args):
        """
        findNodesOnPlane(self, PyObject pt, PyObject vec, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_findNodesOnPlane(self, *args)

    def getNodeIdsNearPoint(self, *args):
        """
        getNodeIdsNearPoint(self, PyObject pt, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getNodeIdsNearPoint(self, *args)

    def getNodeIdsNearPoints(self, *args):
        """
        getNodeIdsNearPoints(self, PyObject pt, int nbOfNodes, double eps) -> PyObject
        getNodeIdsNearPoints(self, PyObject pt, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getNodeIdsNearPoints(self, *args)

    def getCellsInBoundingBox(self, *args):
        """
        getCellsInBoundingBox(self, INTERP_KERNEL::DirectedBoundingBox bbox, double eps, 
            ivec elems)
        getCellsInBoundingBox(self, PyObject bbox, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_getCellsInBoundingBox(self, *args)

    def duplicateNodesInCoords(self, *args):
        """
        duplicateNodesInCoords(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_duplicateNodesInCoords(self, *args)

    def Rotate2DAlg(*args):
        """
        Rotate2DAlg(PyObject center, double angle, int nbNodes, PyObject coords)
        Rotate2DAlg(PyObject center, double angle, PyObject coords)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_Rotate2DAlg(*args)

    if _newclass:Rotate2DAlg = staticmethod(Rotate2DAlg)
    __swig_getmethods__["Rotate2DAlg"] = lambda x: Rotate2DAlg
    def Rotate3DAlg(*args):
        """
        Rotate3DAlg(PyObject center, PyObject vect, double angle, int nbNodes, 
            PyObject coords)
        Rotate3DAlg(PyObject center, PyObject vect, double angle, PyObject coords)

        1
        """
        return _ParaMEDMEM.MEDCouplingPointSet_Rotate3DAlg(*args)

    if _newclass:Rotate3DAlg = staticmethod(Rotate3DAlg)
    __swig_getmethods__["Rotate3DAlg"] = lambda x: Rotate3DAlg
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingPointSet
    __del__ = lambda self : None;
MEDCouplingPointSet_swigregister = _ParaMEDMEM.MEDCouplingPointSet_swigregister
MEDCouplingPointSet_swigregister(MEDCouplingPointSet)

def MEDCouplingPointSet_MergeNodesArray(*args):
  """
    MEDCouplingPointSet_MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingPointSet_MergeNodesArray(*args)

def MEDCouplingPointSet_BuildInstanceFromMeshType(*args):
  """
    MEDCouplingPointSet_BuildInstanceFromMeshType(MEDCouplingMeshType type) -> MEDCouplingPointSet

    1
    """
  return _ParaMEDMEM.MEDCouplingPointSet_BuildInstanceFromMeshType(*args)

def MEDCouplingPointSet_Rotate2DAlg(*args):
  """
    Rotate2DAlg(PyObject center, double angle, int nbNodes, PyObject coords)
    MEDCouplingPointSet_Rotate2DAlg(PyObject center, double angle, PyObject coords)

    1
    """
  return _ParaMEDMEM.MEDCouplingPointSet_Rotate2DAlg(*args)

def MEDCouplingPointSet_Rotate3DAlg(*args):
  """
    Rotate3DAlg(PyObject center, PyObject vect, double angle, int nbNodes, 
        PyObject coords)
    MEDCouplingPointSet_Rotate3DAlg(PyObject center, PyObject vect, double angle, PyObject coords)

    1
    """
  return _ParaMEDMEM.MEDCouplingPointSet_Rotate3DAlg(*args)

class MEDCouplingUMeshCell(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCell_getType(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCell___str__(self)

    def getAllConn(self):
        """
        getAllConn(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCell_getAllConn(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingUMeshCell
    __del__ = lambda self : None;
MEDCouplingUMeshCell_swigregister = _ParaMEDMEM.MEDCouplingUMeshCell_swigregister
MEDCouplingUMeshCell_swigregister(MEDCouplingUMeshCell)

class MEDCouplingUMeshCellIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCellIterator_next(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingUMeshCellIterator
    __del__ = lambda self : None;
MEDCouplingUMeshCellIterator_swigregister = _ParaMEDMEM.MEDCouplingUMeshCellIterator_swigregister
MEDCouplingUMeshCellIterator_swigregister(MEDCouplingUMeshCellIterator)

class MEDCouplingUMeshCellByTypeIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingUMeshCellByTypeIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCellByTypeIterator_next(self)

MEDCouplingUMeshCellByTypeIterator_swigregister = _ParaMEDMEM.MEDCouplingUMeshCellByTypeIterator_swigregister
MEDCouplingUMeshCellByTypeIterator_swigregister(MEDCouplingUMeshCellByTypeIterator)

class MEDCouplingUMeshCellByTypeEntry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingUMeshCellByTypeEntry
    __del__ = lambda self : None;
    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellByTypeIterator

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCellByTypeEntry___iter__(self)

MEDCouplingUMeshCellByTypeEntry_swigregister = _ParaMEDMEM.MEDCouplingUMeshCellByTypeEntry_swigregister
MEDCouplingUMeshCellByTypeEntry_swigregister(MEDCouplingUMeshCellByTypeEntry)

class MEDCouplingUMeshCellEntry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCellEntry_getType(self)

    def getNumberOfElems(self):
        """
        getNumberOfElems(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCellEntry_getNumberOfElems(self)

    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _ParaMEDMEM.MEDCouplingUMeshCellEntry___iter__(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingUMeshCellEntry
    __del__ = lambda self : None;
MEDCouplingUMeshCellEntry_swigregister = _ParaMEDMEM.MEDCouplingUMeshCellEntry_swigregister
MEDCouplingUMeshCellEntry_swigregister(MEDCouplingUMeshCellEntry)

class MEDCouplingUMesh(MEDCouplingPointSet):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingPointSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingPointSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDCouplingUMesh
        New(char meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_clone(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_updateTime(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_checkCoherency(self)

    def setMeshDimension(self, *args):
        """
        setMeshDimension(self, int meshDim)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_setMeshDimension(self, *args)

    def allocateCells(self, *args):
        """
        allocateCells(self, int nbOfCells)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_allocateCells(self, *args)

    def finishInsertingCells(self):
        """
        finishInsertingCells(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_finishInsertingCells(self)

    def cellsByType(self):
        """
        cellsByType(self) -> MEDCouplingUMeshCellByTypeEntry

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_cellsByType(self)

    def setConnectivity(self, *args):
        """
        setConnectivity(self, DataArrayInt conn, DataArrayInt connIndex, bool isComputingTypes = True)
        setConnectivity(self, DataArrayInt conn, DataArrayInt connIndex)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_setConnectivity(self, *args)

    def getTypeOfCell(self, *args):
        """
        getTypeOfCell(self, int cellId) -> NormalizedCellType

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getTypeOfCell(self, *args)

    def setPartOfMySelf2(self, *args):
        """
        setPartOfMySelf2(self, int start, int end, int step, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_setPartOfMySelf2(self, *args)

    def getNumberOfNodesInCell(self, *args):
        """
        getNumberOfNodesInCell(self, int cellId) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getNumberOfNodesInCell(self, *args)

    def getMeshLength(self):
        """
        getMeshLength(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getMeshLength(self)

    def computeTypes(self):
        """
        computeTypes(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_computeTypes(self)

    def giveCellsWithType(self, *args):
        """
        giveCellsWithType(self, NormalizedCellType type) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_giveCellsWithType(self, *args)

    def reprConnectivityOfThis(self):
        """
        reprConnectivityOfThis(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_reprConnectivityOfThis(self)

    def buildSetInstanceFromThis(self, *args):
        """
        buildSetInstanceFromThis(self, int spaceDim) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildSetInstanceFromThis(self, *args)

    def shiftNodeNumbersInConn(self, *args):
        """
        shiftNodeNumbersInConn(self, int delta)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_shiftNodeNumbersInConn(self, *args)

    def getQuadraticStatus(self):
        """
        getQuadraticStatus(self) -> std::vector<(bool,std::allocator<(bool)>)>

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getQuadraticStatus(self)

    def findCellIdsOnBoundary(self):
        """
        findCellIdsOnBoundary(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_findCellIdsOnBoundary(self)

    def computeSkin(self):
        """
        computeSkin(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_computeSkin(self)

    def checkConsecutiveCellTypes(self):
        """
        checkConsecutiveCellTypes(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_checkConsecutiveCellTypes(self)

    def rearrange2ConsecutiveCellTypes(self):
        """
        rearrange2ConsecutiveCellTypes(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_rearrange2ConsecutiveCellTypes(self)

    def sortCellsInMEDFileFrmt(self):
        """
        sortCellsInMEDFileFrmt(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_sortCellsInMEDFileFrmt(self)

    def convertCellArrayPerGeoType(self, *args):
        """
        convertCellArrayPerGeoType(self, DataArrayInt da) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convertCellArrayPerGeoType(self, *args)

    def computeFetchedNodeIds(self):
        """
        computeFetchedNodeIds(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_computeFetchedNodeIds(self)

    def zipConnectivityTraducer(self, *args):
        """
        zipConnectivityTraducer(self, int compType) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_zipConnectivityTraducer(self, *args)

    def computeNbOfNodesPerCell(self):
        """
        computeNbOfNodesPerCell(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_computeNbOfNodesPerCell(self)

    def orientCorrectlyPolyhedrons(self):
        """
        orientCorrectlyPolyhedrons(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_orientCorrectlyPolyhedrons(self)

    def isPresenceOfQuadratic(self):
        """
        isPresenceOfQuadratic(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_isPresenceOfQuadratic(self)

    def buildDirectionVectorField(self):
        """
        buildDirectionVectorField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildDirectionVectorField(self)

    def isContiguous1D(self):
        """
        isContiguous1D(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_isContiguous1D(self)

    def tessellate2D(self, *args):
        """
        tessellate2D(self, double eps)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_tessellate2D(self, *args)

    def tessellate2DCurve(self, *args):
        """
        tessellate2DCurve(self, double eps)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_tessellate2DCurve(self, *args)

    def convertQuadraticCellsToLinear(self):
        """
        convertQuadraticCellsToLinear(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convertQuadraticCellsToLinear(self)

    def convertDegeneratedCells(self):
        """
        convertDegeneratedCells(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convertDegeneratedCells(self)

    def areOnlySimplexCells(self):
        """
        areOnlySimplexCells(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_areOnlySimplexCells(self)

    def getEdgeRatioField(self):
        """
        getEdgeRatioField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getEdgeRatioField(self)

    def getAspectRatioField(self):
        """
        getAspectRatioField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getAspectRatioField(self)

    def getWarpField(self):
        """
        getWarpField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getWarpField(self)

    def getSkewField(self):
        """
        getSkewField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getSkewField(self)

    def convexEnvelop2D(self):
        """
        convexEnvelop2D(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convexEnvelop2D(self)

    def cppRepr(self):
        """
        cppRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_cppRepr(self)

    def Build0DMeshFromCoords(*args):
        """
        Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_Build0DMeshFromCoords(*args)

    if _newclass:Build0DMeshFromCoords = staticmethod(Build0DMeshFromCoords)
    __swig_getmethods__["Build0DMeshFromCoords"] = lambda x: Build0DMeshFromCoords
    def ComputeSpreadZoneGradually(*args):
        """
        ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_ComputeSpreadZoneGradually(*args)

    if _newclass:ComputeSpreadZoneGradually = staticmethod(ComputeSpreadZoneGradually)
    __swig_getmethods__["ComputeSpreadZoneGradually"] = lambda x: ComputeSpreadZoneGradually
    def ComputeRangesFromTypeDistribution(*args):
        """
        ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args)

    if _newclass:ComputeRangesFromTypeDistribution = staticmethod(ComputeRangesFromTypeDistribution)
    __swig_getmethods__["ComputeRangesFromTypeDistribution"] = lambda x: ComputeRangesFromTypeDistribution
    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingUMesh
        __init__(self, char meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingUMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh___str__(self)

    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh___iter__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject listOrDataArrI) -> MEDCouplingPointSet

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh___getitem__(self, *args)

    def setPartOfMySelf(self, *args):
        """
        setPartOfMySelf(self, PyObject li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_setPartOfMySelf(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh___setitem__(self, *args)

    def insertNextCell(self, *args):
        """
        insertNextCell(self, NormalizedCellType type, int size, PyObject li)
        insertNextCell(self, NormalizedCellType type, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_insertNextCell(self, *args)

    def getNodalConnectivity(self):
        """
        getNodalConnectivity(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getNodalConnectivity(self)

    def getNodalConnectivityIndex(self):
        """
        getNodalConnectivityIndex(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getNodalConnectivityIndex(self)

    def getAllTypes(self):
        """
        getAllTypes(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getAllTypes(self)

    def mergeNodes(self, *args):
        """
        mergeNodes(self, double precision) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_mergeNodes(self, *args)

    def mergeNodes2(self, *args):
        """
        mergeNodes2(self, double precision) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_mergeNodes2(self, *args)

    def checkButterflyCells(self, eps = 1e-12):
        """
        checkButterflyCells(self, double eps = 1e-12) -> PyObject
        checkButterflyCells(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_checkButterflyCells(self, eps)

    def splitByType(self):
        """
        splitByType(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_splitByType(self)

    def partitionBySpreadZone(self):
        """
        partitionBySpreadZone(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_partitionBySpreadZone(self)

    def keepSpecifiedCells(self, *args):
        """
        keepSpecifiedCells(self, NormalizedCellType type, PyObject ids) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_keepSpecifiedCells(self, *args)

    def checkConsecutiveCellTypesAndOrder(self, *args):
        """
        checkConsecutiveCellTypesAndOrder(self, PyObject li) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_checkConsecutiveCellTypesAndOrder(self, *args)

    def getRenumArrForConsecutiveCellTypesSpec(self, *args):
        """
        getRenumArrForConsecutiveCellTypesSpec(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getRenumArrForConsecutiveCellTypesSpec(self, *args)

    def findNodesToDuplicate(self, *args):
        """
        findNodesToDuplicate(self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_findNodesToDuplicate(self, *args)

    def findCellIdsLyingOn(self, *args):
        """
        findCellIdsLyingOn(self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_findCellIdsLyingOn(self, *args)

    def duplicateNodes(self, *args):
        """
        duplicateNodes(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_duplicateNodes(self, *args)

    def duplicateNodesInConn(self, *args):
        """
        duplicateNodesInConn(self, PyObject li, int offset)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_duplicateNodesInConn(self, *args)

    def renumberNodesInConn(self, *args):
        """
        renumberNodesInConn(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_renumberNodesInConn(self, *args)

    def getLevArrPerCellTypes(self, *args):
        """
        getLevArrPerCellTypes(self, PyObject li) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getLevArrPerCellTypes(self, *args)

    def AggregateSortedByTypeMeshesOnSameCoords(*args):
        """
        AggregateSortedByTypeMeshesOnSameCoords(PyObject ms) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args)

    if _newclass:AggregateSortedByTypeMeshesOnSameCoords = staticmethod(AggregateSortedByTypeMeshesOnSameCoords)
    __swig_getmethods__["AggregateSortedByTypeMeshesOnSameCoords"] = lambda x: AggregateSortedByTypeMeshesOnSameCoords
    def MergeUMeshesOnSameCoords(*args):
        """
        MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshesOnSameCoords(PyObject ms) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

    if _newclass:MergeUMeshesOnSameCoords = staticmethod(MergeUMeshesOnSameCoords)
    __swig_getmethods__["MergeUMeshesOnSameCoords"] = lambda x: MergeUMeshesOnSameCoords
    def FuseUMeshesOnSameCoords(*args):
        """
        FuseUMeshesOnSameCoords(PyObject ms, int compType) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args)

    if _newclass:FuseUMeshesOnSameCoords = staticmethod(FuseUMeshesOnSameCoords)
    __swig_getmethods__["FuseUMeshesOnSameCoords"] = lambda x: FuseUMeshesOnSameCoords
    def PutUMeshesOnSameAggregatedCoords(*args):
        """
        PutUMeshesOnSameAggregatedCoords(PyObject ms)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args)

    if _newclass:PutUMeshesOnSameAggregatedCoords = staticmethod(PutUMeshesOnSameAggregatedCoords)
    __swig_getmethods__["PutUMeshesOnSameAggregatedCoords"] = lambda x: PutUMeshesOnSameAggregatedCoords
    def MergeNodesOnUMeshesSharingSameCoords(*args):
        """
        MergeNodesOnUMeshesSharingSameCoords(PyObject ms, double eps)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args)

    if _newclass:MergeNodesOnUMeshesSharingSameCoords = staticmethod(MergeNodesOnUMeshesSharingSameCoords)
    __swig_getmethods__["MergeNodesOnUMeshesSharingSameCoords"] = lambda x: MergeNodesOnUMeshesSharingSameCoords
    def RemoveIdsFromIndexedArrays(*args):
        """
        RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx, 
            int offsetForRemoval = 0) -> bool
        RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args)

    if _newclass:RemoveIdsFromIndexedArrays = staticmethod(RemoveIdsFromIndexedArrays)
    __swig_getmethods__["RemoveIdsFromIndexedArrays"] = lambda x: RemoveIdsFromIndexedArrays
    def ExtractFromIndexedArrays(*args):
        """
        ExtractFromIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_ExtractFromIndexedArrays(*args)

    if _newclass:ExtractFromIndexedArrays = staticmethod(ExtractFromIndexedArrays)
    __swig_getmethods__["ExtractFromIndexedArrays"] = lambda x: ExtractFromIndexedArrays
    def SetPartOfIndexedArrays(*args):
        """
        SetPartOfIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
            DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_SetPartOfIndexedArrays(*args)

    if _newclass:SetPartOfIndexedArrays = staticmethod(SetPartOfIndexedArrays)
    __swig_getmethods__["SetPartOfIndexedArrays"] = lambda x: SetPartOfIndexedArrays
    def SetPartOfIndexedArraysSameIdx(*args):
        """
        SetPartOfIndexedArraysSameIdx(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
            DataArrayInt srcArr, DataArrayInt srcArrIndex)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args)

    if _newclass:SetPartOfIndexedArraysSameIdx = staticmethod(SetPartOfIndexedArraysSameIdx)
    __swig_getmethods__["SetPartOfIndexedArraysSameIdx"] = lambda x: SetPartOfIndexedArraysSameIdx
    def are2DCellsNotCorrectlyOriented(self, *args):
        """
        are2DCellsNotCorrectlyOriented(self, PyObject vec, bool polyOnly) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_are2DCellsNotCorrectlyOriented(self, *args)

    def orientCorrectly2DCells(self, *args):
        """
        orientCorrectly2DCells(self, PyObject vec, bool polyOnly)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_orientCorrectly2DCells(self, *args)

    def arePolyhedronsNotCorrectlyOriented(self):
        """
        arePolyhedronsNotCorrectlyOriented(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_arePolyhedronsNotCorrectlyOriented(self)

    def findAndCorrectBadOriented3DExtrudedCells(self):
        """
        findAndCorrectBadOriented3DExtrudedCells(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_findAndCorrectBadOriented3DExtrudedCells(self)

    def getFastAveragePlaneOfThis(self):
        """
        getFastAveragePlaneOfThis(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getFastAveragePlaneOfThis(self)

    def MergeUMeshes(*args):
        """
        MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshes(PyObject li) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_MergeUMeshes(*args)

    if _newclass:MergeUMeshes = staticmethod(MergeUMeshes)
    __swig_getmethods__["MergeUMeshes"] = lambda x: MergeUMeshes
    def areCellsIncludedIn(self, *args):
        """
        areCellsIncludedIn(self, MEDCouplingUMesh other, int compType) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_areCellsIncludedIn(self, *args)

    def areCellsIncludedIn2(self, *args):
        """
        areCellsIncludedIn2(self, MEDCouplingUMesh other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_areCellsIncludedIn2(self, *args)

    def buildDescendingConnectivity(self, *args):
        """
        buildDescendingConnectivity(self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, 
            DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildDescendingConnectivity(self, *args)

    def buildDescendingConnectivity2(self, *args):
        """
        buildDescendingConnectivity2(self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, 
            DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildDescendingConnectivity2(self, *args)

    def computeNeighborsOfCells(self):
        """
        computeNeighborsOfCells(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_computeNeighborsOfCells(self)

    def ComputeNeighborsOfCellsAdv(*args):
        """
        ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, 
            DataArrayInt revDescI) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args)

    if _newclass:ComputeNeighborsOfCellsAdv = staticmethod(ComputeNeighborsOfCellsAdv)
    __swig_getmethods__["ComputeNeighborsOfCellsAdv"] = lambda x: ComputeNeighborsOfCellsAdv
    def emulateMEDMEMBDC(self, *args):
        """
        emulateMEDMEMBDC(self, MEDCouplingUMesh nM1LevMesh) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_emulateMEDMEMBDC(self, *args)

    def getReverseNodalConnectivity(self):
        """
        getReverseNodalConnectivity(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getReverseNodalConnectivity(self)

    def getPartBarycenterAndOwner(self, *args):
        """
        getPartBarycenterAndOwner(self, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getPartBarycenterAndOwner(self, *args)

    def getPartMeasureField(self, *args):
        """
        getPartMeasureField(self, bool isAbs, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getPartMeasureField(self, *args)

    def buildPartOrthogonalField(self, *args):
        """
        buildPartOrthogonalField(self, DataArrayInt da) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildPartOrthogonalField(self, *args)

    def getTypesOfPart(self, *args):
        """
        getTypesOfPart(self, DataArrayInt da) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getTypesOfPart(self, *args)

    def keepCellIdsByType(self, *args):
        """
        keepCellIdsByType(self, NormalizedCellType type, DataArrayInt da) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_keepCellIdsByType(self, *args)

    def getCellIdsLyingOnNodes(self, *args):
        """
        getCellIdsLyingOnNodes(self, PyObject li, bool fullyIn) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getCellIdsLyingOnNodes(self, *args)

    def getNodeIdsInUse(self):
        """
        getNodeIdsInUse(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getNodeIdsInUse(self)

    def Intersect2DMeshes(*args):
        """
        Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_Intersect2DMeshes(*args)

    if _newclass:Intersect2DMeshes = staticmethod(Intersect2DMeshes)
    __swig_getmethods__["Intersect2DMeshes"] = lambda x: Intersect2DMeshes
    def buildSlice3D(self, *args):
        """
        buildSlice3D(self, PyObject origin, PyObject vec, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildSlice3D(self, *args)

    def buildSlice3DSurf(self, *args):
        """
        buildSlice3DSurf(self, PyObject origin, PyObject vec, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildSlice3DSurf(self, *args)

    def getCellIdsCrossingPlane(self, *args):
        """
        getCellIdsCrossingPlane(self, PyObject origin, PyObject vec, double eps) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_getCellIdsCrossingPlane(self, *args)

    def convertToPolyTypes(self, *args):
        """
        convertToPolyTypes(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convertToPolyTypes(self, *args)

    def convertAllToPoly(self):
        """
        convertAllToPoly(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convertAllToPoly(self)

    def convertExtrudedPolyhedra(self):
        """
        convertExtrudedPolyhedra(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_convertExtrudedPolyhedra(self)

    def unPolyze(self):
        """
        unPolyze(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_unPolyze(self)

    def simplifyPolyhedra(self, *args):
        """
        simplifyPolyhedra(self, double eps)

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_simplifyPolyhedra(self, *args)

    def buildSpreadZonesWithPoly(self):
        """
        buildSpreadZonesWithPoly(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildSpreadZonesWithPoly(self)

    def buildExtrudedMesh(self, *args):
        """
        buildExtrudedMesh(self, MEDCouplingUMesh mesh1D, int policy) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingUMesh_buildExtrudedMesh(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingUMesh
    __del__ = lambda self : None;
MEDCouplingUMesh_swigregister = _ParaMEDMEM.MEDCouplingUMesh_swigregister
MEDCouplingUMesh_swigregister(MEDCouplingUMesh)

def MEDCouplingUMesh_New(*args):
  """
    New() -> MEDCouplingUMesh
    MEDCouplingUMesh_New(char meshName, int meshDim) -> MEDCouplingUMesh

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_New(*args)

def MEDCouplingUMesh_Build0DMeshFromCoords(*args):
  """
    MEDCouplingUMesh_Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_Build0DMeshFromCoords(*args)

def MEDCouplingUMesh_ComputeSpreadZoneGradually(*args):
  """
    MEDCouplingUMesh_ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_ComputeSpreadZoneGradually(*args)

def MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args):
  """
    MEDCouplingUMesh_ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args)

def MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args):
  """
    MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(PyObject ms) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args)

def MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args):
  """
    MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshesOnSameCoords(PyObject ms) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args):
  """
    MEDCouplingUMesh_FuseUMeshesOnSameCoords(PyObject ms, int compType) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args):
  """
    MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(PyObject ms)

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args)

def MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args):
  """
    MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(PyObject ms, double eps)

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args)

def MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args):
  """
    RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx, 
        int offsetForRemoval = 0) -> bool
    MEDCouplingUMesh_RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args)

def MEDCouplingUMesh_ExtractFromIndexedArrays(*args):
  """
    MEDCouplingUMesh_ExtractFromIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_ExtractFromIndexedArrays(*args)

def MEDCouplingUMesh_SetPartOfIndexedArrays(*args):
  """
    MEDCouplingUMesh_SetPartOfIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
        DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_SetPartOfIndexedArrays(*args)

def MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args):
  """
    MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
        DataArrayInt srcArr, DataArrayInt srcArrIndex)

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args)

def MEDCouplingUMesh_MergeUMeshes(*args):
  """
    MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshes(PyObject li) -> MEDCouplingUMesh

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_MergeUMeshes(*args)

def MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args):
  """
    MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, 
        DataArrayInt revDescI) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args)

def MEDCouplingUMesh_Intersect2DMeshes(*args):
  """
    MEDCouplingUMesh_Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingUMesh_Intersect2DMeshes(*args)

class MEDCouplingExtrudedMesh(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingExtrudedMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingExtrudedMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def build3DUnstructuredMesh(self):
        """
        build3DUnstructuredMesh(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh_build3DUnstructuredMesh(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingExtrudedMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh___str__(self)

    def getMesh2D(self):
        """
        getMesh2D(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh_getMesh2D(self)

    def getMesh1D(self):
        """
        getMesh1D(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh_getMesh1D(self)

    def getMesh3DIds(self):
        """
        getMesh3DIds(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingExtrudedMesh_getMesh3DIds(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingExtrudedMesh
    __del__ = lambda self : None;
MEDCouplingExtrudedMesh_swigregister = _ParaMEDMEM.MEDCouplingExtrudedMesh_swigregister
MEDCouplingExtrudedMesh_swigregister(MEDCouplingExtrudedMesh)

def MEDCouplingExtrudedMesh_New(*args):
  """
    MEDCouplingExtrudedMesh_New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

    1
    """
  return _ParaMEDMEM.MEDCouplingExtrudedMesh_New(*args)

class MEDCouplingCMesh(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDCouplingCMesh
        New(char meshName) -> MEDCouplingCMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingCMesh

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh_clone(self, *args)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coordsX, DataArrayDouble coordsY = None, 
            DataArrayDouble coordsZ = None)
        setCoords(self, DataArrayDouble coordsX, DataArrayDouble coordsY = None)
        setCoords(self, DataArrayDouble coordsX)

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh_setCoords(self, *args)

    def setCoordsAt(self, *args):
        """
        setCoordsAt(self, int i, DataArrayDouble arr)

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh_setCoordsAt(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingCMesh
        __init__(self, char meshName) -> MEDCouplingCMesh

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingCMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh___str__(self)

    def getCoordsAt(self, *args):
        """
        getCoordsAt(self, int i) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingCMesh_getCoordsAt(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingCMesh
    __del__ = lambda self : None;
MEDCouplingCMesh_swigregister = _ParaMEDMEM.MEDCouplingCMesh_swigregister
MEDCouplingCMesh_swigregister(MEDCouplingCMesh)

def MEDCouplingCMesh_New(*args):
  """
    New() -> MEDCouplingCMesh
    MEDCouplingCMesh_New(char meshName) -> MEDCouplingCMesh

    1
    """
  return _ParaMEDMEM.MEDCouplingCMesh_New(*args)

class MEDCouplingField(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingField, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_checkCoherency(self)

    def areCompatibleForMerge(self, *args):
        """
        areCompatibleForMerge(self, MEDCouplingField other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingField_areCompatibleForMerge(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingField other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingField_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingField other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingField_isEqualWithoutConsideringStr(self, *args)

    def setMesh(self, *args):
        """
        setMesh(self, MEDCouplingMesh mesh)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setMesh(self, *args)

    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setName(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getDescription(self)

    def setDescription(self, *args):
        """
        setDescription(self, char desc)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setDescription(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getName(self)

    def getTypeOfField(self):
        """
        getTypeOfField(self) -> TypeOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getTypeOfField(self)

    def getNature(self):
        """
        getNature(self) -> NatureOfField

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getNature(self)

    def setNature(self, *args):
        """
        setNature(self, NatureOfField nat)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setNature(self, *args)

    def getLocalizationOfDiscr(self):
        """
        getLocalizationOfDiscr(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getLocalizationOfDiscr(self)

    def buildMeasureField(self, *args):
        """
        buildMeasureField(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingField_buildMeasureField(self, *args)

    def getNumberOfTuplesExpected(self):
        """
        getNumberOfTuplesExpected(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getNumberOfTuplesExpected(self)

    def getNumberOfMeshPlacesExpected(self):
        """
        getNumberOfMeshPlacesExpected(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getNumberOfMeshPlacesExpected(self)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setGaussLocalizationOnType(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getGaussLocalization(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getGaussLocalizationIdOfOneType(self, *args)

    def setDiscretization(self, *args):
        """
        setDiscretization(self, MEDCouplingFieldDiscretization newDisc)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setDiscretization(self, *args)

    def getMesh(self):
        """
        getMesh(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getMesh(self)

    def getDiscretization(self):
        """
        getDiscretization(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getDiscretization(self)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getGaussLocalizationIdsOfOneType(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingField other, double meshPrec, double valsPrec) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingField_isEqualIfNotWhy(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, PyObject li) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingField_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, PyObject li) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingField_computeTupleIdsToSelectFromCellIds(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, PyObject li, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _ParaMEDMEM.MEDCouplingField_setGaussLocalizationOnCells(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingField_getCellIdsHavingGaussLocalization(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingField
    __del__ = lambda self : None;
MEDCouplingField_swigregister = _ParaMEDMEM.MEDCouplingField_swigregister
MEDCouplingField_swigregister(MEDCouplingField)

class MEDCouplingFieldDouble(MEDCouplingField):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDouble, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        New(TypeOfField type) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getTimeUnit(self)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingFieldDouble other)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_copyTinyStringsFrom(self, *args)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingFieldDouble other)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_copyTinyAttrFrom(self, *args)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_advancedRepr(self)

    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_clone(self, *args)

    def cloneWithMesh(self, *args):
        """
        cloneWithMesh(self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_cloneWithMesh(self, *args)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_deepCpy(self)

    def buildNewTimeReprFromThis(self, *args):
        """
        buildNewTimeReprFromThis(self, TypeOfTimeDiscretization td, bool deepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_buildNewTimeReprFromThis(self, *args)

    def getTimeDiscretization(self):
        """
        getTimeDiscretization(self) -> TypeOfTimeDiscretization

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getTimeDiscretization(self)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getIJ(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, int cellId, int nodeIdInCell, int compoId) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getIJK(self, *args)

    def setArray(self, *args):
        """
        setArray(self, DataArrayDouble array)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setArray(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setEndArray(self, *args)

    def setTime(self, *args):
        """
        setTime(self, double val, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setTime(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double val, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double val, int iteration, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setEndTime(self, *args)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_applyLin(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        """
        getNumberOfTuples(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getNumberOfTuples(self)

    def getNumberOfValues(self):
        """
        getNumberOfValues(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getNumberOfValues(self)

    def setTimeTolerance(self, *args):
        """
        setTimeTolerance(self, double val)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setTimeTolerance(self, *args)

    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getTimeTolerance(self)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setEndIteration(self, *args)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setEndOrder(self, *args)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double val)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double val)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setEndTimeValue(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_updateTime(self)

    def changeUnderlyingMesh(self, *args):
        """
        changeUnderlyingMesh(self, MEDCouplingMesh other, int levOfCheck, double prec)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_changeUnderlyingMesh(self, *args)

    def substractInPlaceDM(self, *args):
        """
        substractInPlaceDM(self, MEDCouplingFieldDouble f, int levOfCheck, double prec)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_substractInPlaceDM(self, *args)

    def mergeNodes(self, *args):
        """
        mergeNodes(self, double eps, double epsOnVals = 1e-15) -> bool
        mergeNodes(self, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_mergeNodes(self, *args)

    def mergeNodes2(self, *args):
        """
        mergeNodes2(self, double eps, double epsOnVals = 1e-15) -> bool
        mergeNodes2(self, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_mergeNodes2(self, *args)

    def zipCoords(self, epsOnVals = 1e-15):
        """
        zipCoords(self, double epsOnVals = 1e-15) -> bool
        zipCoords(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_zipCoords(self, epsOnVals)

    def zipConnectivity(self, *args):
        """
        zipConnectivity(self, int compType, double epsOnVals = 1e-15) -> bool
        zipConnectivity(self, int compType) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_zipConnectivity(self, *args)

    def simplexize(self, *args):
        """
        simplexize(self, int policy) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_simplexize(self, *args)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_inverse(self)

    def trace(self):
        """
        trace(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_trace(self)

    def deviator(self):
        """
        deviator(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_maxPerTuple(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue = 0.)
        changeNbOfComponents(self, int newNbOfComp)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_changeNbOfComponents(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_sortPerTuple(self, *args)

    def assign(self, *args):
        """
        assign(self, double value) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_assign(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, int nbOfComp, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, int nbOfComp, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_fillFromAnalytic3(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_applyFunc3(self, *args)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, char func)
        applyFunc(self, int nbOfComp, double val)
        applyFunc(self, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_applyFunc(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_applyFuncFast64(self, *args)

    def getMaxValue(self):
        """
        getMaxValue(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getMaxValue(self)

    def getMinValue(self):
        """
        getMinValue(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getMinValue(self)

    def getAverageValue(self):
        """
        getAverageValue(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getAverageValue(self)

    def norm2(self):
        """
        norm2(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_norm2(self)

    def normMax(self):
        """
        normMax(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_normMax(self)

    def getWeightedAverageValue(self):
        """
        getWeightedAverageValue(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getWeightedAverageValue(self)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getIdsInRange(self, *args)

    def MeldFields(*args):
        """
        MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_MeldFields(*args)

    if _newclass:MeldFields = staticmethod(MeldFields)
    __swig_getmethods__["MeldFields"] = lambda x: MeldFields
    def DotFields(*args):
        """
        DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_DotFields(*args)

    if _newclass:DotFields = staticmethod(DotFields)
    __swig_getmethods__["DotFields"] = lambda x: DotFields
    def dot(self, *args):
        """
        dot(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_dot(self, *args)

    def CrossProductFields(*args):
        """
        CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_CrossProductFields(*args)

    if _newclass:CrossProductFields = staticmethod(CrossProductFields)
    __swig_getmethods__["CrossProductFields"] = lambda x: CrossProductFields
    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_crossProduct(self, *args)

    def MaxFields(*args):
        """
        MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_MaxFields(*args)

    if _newclass:MaxFields = staticmethod(MaxFields)
    __swig_getmethods__["MaxFields"] = lambda x: MaxFields
    def max(self, *args):
        """
        max(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_max(self, *args)

    def MinFields(*args):
        """
        MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_MinFields(*args)

    if _newclass:MinFields = staticmethod(MinFields)
    __swig_getmethods__["MinFields"] = lambda x: MinFields
    def AddFields(*args):
        """
        AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_AddFields(*args)

    if _newclass:AddFields = staticmethod(AddFields)
    __swig_getmethods__["AddFields"] = lambda x: AddFields
    def SubstractFields(*args):
        """
        SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_SubstractFields(*args)

    if _newclass:SubstractFields = staticmethod(SubstractFields)
    __swig_getmethods__["SubstractFields"] = lambda x: SubstractFields
    def MultiplyFields(*args):
        """
        MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_MultiplyFields(*args)

    if _newclass:MultiplyFields = staticmethod(MultiplyFields)
    __swig_getmethods__["MultiplyFields"] = lambda x: MultiplyFields
    def DivideFields(*args):
        """
        DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_DivideFields(*args)

    if _newclass:DivideFields = staticmethod(DivideFields)
    __swig_getmethods__["DivideFields"] = lambda x: DivideFields
    def min(self, *args):
        """
        min(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_min(self, *args)

    def __add__(self, *args):
        """
        __add__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble___div__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        __init__(self, TypeOfField type) -> MEDCouplingFieldDouble
        __init__(self, MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        __init__(self, MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingFieldDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble___str__(self)

    def getArray(self):
        """
        getArray(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getArray(self)

    def getArrays(self):
        """
        getArrays(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getArrays(self)

    def setArrays(self, *args):
        """
        setArrays(self, PyObject ls)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setArrays(self, *args)

    def getEndArray(self):
        """
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getEndArray(self)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, int i, int j, int k) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, PyObject li) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getValueOnMulti(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, PyObject sl) -> PyObject
        getValueOn(self, PyObject sl, double time) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getValueOn(self, *args)

    def setValues(self, *args):
        """
        setValues(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setValues(self, *args)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getTime(self)

    def getStartTime(self):
        """
        getStartTime(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getStartTime(self)

    def getEndTime(self):
        """
        getEndTime(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getEndTime(self)

    def accumulate(self, *args):
        """
        accumulate(self, int compId) -> double
        accumulate(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_accumulate(self, *args)

    def integral(self, *args):
        """
        integral(self, int compId, bool isWAbs) -> double
        integral(self, bool isWAbs) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_integral(self, *args)

    def normL1(self, *args):
        """
        normL1(self, int compId) -> double
        normL1(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_normL1(self, *args)

    def normL2(self, *args):
        """
        normL2(self, int compId) -> double
        normL2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_normL2(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, PyObject li, bool check = True)
        renumberCells(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_renumberCells(self, *args)

    def renumberNodes(self, *args):
        """
        renumberNodes(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_renumberNodes(self, *args)

    def buildSubPart(self, *args):
        """
        buildSubPart(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_buildSubPart(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble___getitem__(self, *args)

    def getMaxValue2(self):
        """
        getMaxValue2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getMaxValue2(self)

    def getMinValue2(self):
        """
        getMinValue2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_getMinValue2(self)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, MEDCouplingFieldDouble f, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_setSelectedComponents(self, *args)

    def extractSlice3D(self, *args):
        """
        extractSlice3D(self, PyObject origin, PyObject vec, double eps) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_extractSlice3D(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble____idiv___(self, *args)

    def MergeFields(*args):
        """
        MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        MergeFields(PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_MergeFields(*args)

    if _newclass:MergeFields = staticmethod(MergeFields)
    __swig_getmethods__["MergeFields"] = lambda x: MergeFields
    def WriteVTK(*args):
        """
        WriteVTK(char fileName, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldDouble_WriteVTK(*args)

    if _newclass:WriteVTK = staticmethod(WriteVTK)
    __swig_getmethods__["WriteVTK"] = lambda x: WriteVTK
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldDouble
    __del__ = lambda self : None;
MEDCouplingFieldDouble_swigregister = _ParaMEDMEM.MEDCouplingFieldDouble_swigregister
MEDCouplingFieldDouble_swigregister(MEDCouplingFieldDouble)

def MEDCouplingFieldDouble_New(*args):
  """
    New(TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
    New(TypeOfField type) -> MEDCouplingFieldDouble
    New(MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_New(*args)

def MEDCouplingFieldDouble_MeldFields(*args):
  """
    MEDCouplingFieldDouble_MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_MeldFields(*args)

def MEDCouplingFieldDouble_DotFields(*args):
  """
    MEDCouplingFieldDouble_DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_DotFields(*args)

def MEDCouplingFieldDouble_CrossProductFields(*args):
  """
    MEDCouplingFieldDouble_CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_CrossProductFields(*args)

def MEDCouplingFieldDouble_MaxFields(*args):
  """
    MEDCouplingFieldDouble_MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_MaxFields(*args)

def MEDCouplingFieldDouble_MinFields(*args):
  """
    MEDCouplingFieldDouble_MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_MinFields(*args)

def MEDCouplingFieldDouble_AddFields(*args):
  """
    MEDCouplingFieldDouble_AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_AddFields(*args)

def MEDCouplingFieldDouble_SubstractFields(*args):
  """
    MEDCouplingFieldDouble_SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_SubstractFields(*args)

def MEDCouplingFieldDouble_MultiplyFields(*args):
  """
    MEDCouplingFieldDouble_MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_MultiplyFields(*args)

def MEDCouplingFieldDouble_DivideFields(*args):
  """
    MEDCouplingFieldDouble_DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_DivideFields(*args)

def MEDCouplingFieldDouble_MergeFields(*args):
  """
    MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_MergeFields(PyObject li) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_MergeFields(*args)

def MEDCouplingFieldDouble_WriteVTK(*args):
  """
    MEDCouplingFieldDouble_WriteVTK(char fileName, PyObject li)

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldDouble_WriteVTK(*args)

class MEDCouplingFieldTemplate(MEDCouplingField):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTemplate, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        New(TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldTemplate_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldTemplate_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldTemplate_advancedRepr(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldTemplate_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        __init__(self, TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingFieldTemplate(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldTemplate___str__(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldTemplate
    __del__ = lambda self : None;
MEDCouplingFieldTemplate_swigregister = _ParaMEDMEM.MEDCouplingFieldTemplate_swigregister
MEDCouplingFieldTemplate_swigregister(MEDCouplingFieldTemplate)

def MEDCouplingFieldTemplate_New(*args):
  """
    New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(TypeOfField type) -> MEDCouplingFieldTemplate

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldTemplate_New(*args)

class MEDCouplingMultiFields(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMultiFields, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMultiFields, name)
    __repr__ = _swig_repr
    def getNumberOfFields(self):
        """
        getNumberOfFields(self) -> int

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getNumberOfFields(self)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingMultiFields

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_deepCpy(self)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_advancedRepr(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_isEqualWithoutConsideringStr(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_checkCoherency(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_updateTime(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields___str__(self)

    def New(*args):
        """
        New(PyObject li) -> MEDCouplingMultiFields

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self, PyObject li) -> MEDCouplingMultiFields

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingMultiFields(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFields(self):
        """
        getFields(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getFields(self)

    def getFieldAtPos(self, *args):
        """
        getFieldAtPos(self, int id) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getFieldAtPos(self, *args)

    def getMeshes(self):
        """
        getMeshes(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getMeshes(self)

    def getDifferentMeshes(self):
        """
        getDifferentMeshes(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getDifferentMeshes(self)

    def getArrays(self):
        """
        getArrays(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getArrays(self)

    def getDifferentArrays(self):
        """
        getDifferentArrays(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingMultiFields_getDifferentArrays(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingMultiFields
    __del__ = lambda self : None;
MEDCouplingMultiFields_swigregister = _ParaMEDMEM.MEDCouplingMultiFields_swigregister
MEDCouplingMultiFields_swigregister(MEDCouplingMultiFields)

def MEDCouplingMultiFields_New(*args):
  """
    MEDCouplingMultiFields_New(PyObject li) -> MEDCouplingMultiFields

    1
    """
  return _ParaMEDMEM.MEDCouplingMultiFields_New(*args)

class MEDCouplingDefinitionTime(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingDefinitionTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingDefinitionTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingDefinitionTime

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingDefinitionTime()
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args):
        """
        assign(self, MEDCouplingDefinitionTime other)

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime_assign(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingDefinitionTime other) -> bool

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime_isEqual(self, *args)

    def getTimeResolution(self):
        """
        getTimeResolution(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime_getTimeResolution(self)

    def getHotSpotsTime(self):
        """
        getHotSpotsTime(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime_getHotSpotsTime(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime___str__(self)

    def getIdsOnTimeRight(self, *args):
        """
        getIdsOnTimeRight(self, double tm) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime_getIdsOnTimeRight(self, *args)

    def getIdsOnTimeLeft(self, *args):
        """
        getIdsOnTimeLeft(self, double tm) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDCouplingDefinitionTime_getIdsOnTimeLeft(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingDefinitionTime
    __del__ = lambda self : None;
MEDCouplingDefinitionTime_swigregister = _ParaMEDMEM.MEDCouplingDefinitionTime_swigregister
MEDCouplingDefinitionTime_swigregister(MEDCouplingDefinitionTime)

class MEDCouplingFieldOverTime(MEDCouplingMultiFields):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMultiFields]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldOverTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMultiFields]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldOverTime, name)
    __repr__ = _swig_repr
    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldOverTime_getTimeTolerance(self)

    def getDefinitionTimeZone(self):
        """
        getDefinitionTimeZone(self) -> MEDCouplingDefinitionTime

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldOverTime_getDefinitionTimeZone(self)

    def __init__(self, *args): 
        """
        __init__(self, PyObject li) -> MEDCouplingFieldOverTime

        1
        """
        this = _ParaMEDMEM.new_MEDCouplingFieldOverTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldOverTime___str__(self)

    def New(*args):
        """
        New(PyObject li) -> MEDCouplingFieldOverTime

        1
        """
        return _ParaMEDMEM.MEDCouplingFieldOverTime_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _ParaMEDMEM.delete_MEDCouplingFieldOverTime
    __del__ = lambda self : None;
MEDCouplingFieldOverTime_swigregister = _ParaMEDMEM.MEDCouplingFieldOverTime_swigregister
MEDCouplingFieldOverTime_swigregister(MEDCouplingFieldOverTime)

def MEDCouplingFieldOverTime_New(*args):
  """
    MEDCouplingFieldOverTime_New(PyObject li) -> MEDCouplingFieldOverTime

    1
    """
  return _ParaMEDMEM.MEDCouplingFieldOverTime_New(*args)


def MEDCouplingVersionMajMinRel():
  """
    MEDCouplingVersionMajMinRel() -> PyObject

    1
    """
  return _ParaMEDMEM.MEDCouplingVersionMajMinRel()
import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
  execfile(__filename)
  pass

class MEDLoader(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDLoader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setEpsilonForNodeComp(*args):
        """
        setEpsilonForNodeComp(double val)

        1
        """
        return _ParaMEDMEM.MEDLoader_setEpsilonForNodeComp(*args)

    if _newclass:setEpsilonForNodeComp = staticmethod(setEpsilonForNodeComp)
    __swig_getmethods__["setEpsilonForNodeComp"] = lambda x: setEpsilonForNodeComp
    def setCompPolicyForCell(*args):
        """
        setCompPolicyForCell(int val)

        1
        """
        return _ParaMEDMEM.MEDLoader_setCompPolicyForCell(*args)

    if _newclass:setCompPolicyForCell = staticmethod(setCompPolicyForCell)
    __swig_getmethods__["setCompPolicyForCell"] = lambda x: setCompPolicyForCell
    def setTooLongStrPolicy(*args):
        """
        setTooLongStrPolicy(int val)

        1
        """
        return _ParaMEDMEM.MEDLoader_setTooLongStrPolicy(*args)

    if _newclass:setTooLongStrPolicy = staticmethod(setTooLongStrPolicy)
    __swig_getmethods__["setTooLongStrPolicy"] = lambda x: setTooLongStrPolicy
    def CheckFileForRead(*args):
        """
        CheckFileForRead(char fileName)

        1
        """
        return _ParaMEDMEM.MEDLoader_CheckFileForRead(*args)

    if _newclass:CheckFileForRead = staticmethod(CheckFileForRead)
    __swig_getmethods__["CheckFileForRead"] = lambda x: CheckFileForRead
    def GetMeshNames(*args):
        """
        GetMeshNames(char fileName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetMeshNames(*args)

    if _newclass:GetMeshNames = staticmethod(GetMeshNames)
    __swig_getmethods__["GetMeshNames"] = lambda x: GetMeshNames
    def GetMeshNamesOnField(*args):
        """
        GetMeshNamesOnField(char fileName, char fieldName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetMeshNamesOnField(*args)

    if _newclass:GetMeshNamesOnField = staticmethod(GetMeshNamesOnField)
    __swig_getmethods__["GetMeshNamesOnField"] = lambda x: GetMeshNamesOnField
    def GetMeshGroupsNames(*args):
        """
        GetMeshGroupsNames(char fileName, char meshName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetMeshGroupsNames(*args)

    if _newclass:GetMeshGroupsNames = staticmethod(GetMeshGroupsNames)
    __swig_getmethods__["GetMeshGroupsNames"] = lambda x: GetMeshGroupsNames
    def GetMeshFamiliesNames(*args):
        """
        GetMeshFamiliesNames(char fileName, char meshName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetMeshFamiliesNames(*args)

    if _newclass:GetMeshFamiliesNames = staticmethod(GetMeshFamiliesNames)
    __swig_getmethods__["GetMeshFamiliesNames"] = lambda x: GetMeshFamiliesNames
    def GetMeshFamiliesNamesOnGroup(*args):
        """
        GetMeshFamiliesNamesOnGroup(char fileName, char meshName, char grpName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetMeshFamiliesNamesOnGroup(*args)

    if _newclass:GetMeshFamiliesNamesOnGroup = staticmethod(GetMeshFamiliesNamesOnGroup)
    __swig_getmethods__["GetMeshFamiliesNamesOnGroup"] = lambda x: GetMeshFamiliesNamesOnGroup
    def GetMeshGroupsNamesOnFamily(*args):
        """
        GetMeshGroupsNamesOnFamily(char fileName, char meshName, char famName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetMeshGroupsNamesOnFamily(*args)

    if _newclass:GetMeshGroupsNamesOnFamily = staticmethod(GetMeshGroupsNamesOnFamily)
    __swig_getmethods__["GetMeshGroupsNamesOnFamily"] = lambda x: GetMeshGroupsNamesOnFamily
    def GetAllFieldNamesOnMesh(*args):
        """
        GetAllFieldNamesOnMesh(char fileName, char meshName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetAllFieldNamesOnMesh(*args)

    if _newclass:GetAllFieldNamesOnMesh = staticmethod(GetAllFieldNamesOnMesh)
    __swig_getmethods__["GetAllFieldNamesOnMesh"] = lambda x: GetAllFieldNamesOnMesh
    def GetAllFieldNames(*args):
        """
        GetAllFieldNames(char fileName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetAllFieldNames(*args)

    if _newclass:GetAllFieldNames = staticmethod(GetAllFieldNames)
    __swig_getmethods__["GetAllFieldNames"] = lambda x: GetAllFieldNames
    def GetFieldNamesOnMesh(*args):
        """
        GetFieldNamesOnMesh(TypeOfField type, char fileName, char meshName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetFieldNamesOnMesh(*args)

    if _newclass:GetFieldNamesOnMesh = staticmethod(GetFieldNamesOnMesh)
    __swig_getmethods__["GetFieldNamesOnMesh"] = lambda x: GetFieldNamesOnMesh
    def GetCellFieldNamesOnMesh(*args):
        """
        GetCellFieldNamesOnMesh(char fileName, char meshName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetCellFieldNamesOnMesh(*args)

    if _newclass:GetCellFieldNamesOnMesh = staticmethod(GetCellFieldNamesOnMesh)
    __swig_getmethods__["GetCellFieldNamesOnMesh"] = lambda x: GetCellFieldNamesOnMesh
    def GetNodeFieldNamesOnMesh(*args):
        """
        GetNodeFieldNamesOnMesh(char fileName, char meshName) -> svec

        1
        """
        return _ParaMEDMEM.MEDLoader_GetNodeFieldNamesOnMesh(*args)

    if _newclass:GetNodeFieldNamesOnMesh = staticmethod(GetNodeFieldNamesOnMesh)
    __swig_getmethods__["GetNodeFieldNamesOnMesh"] = lambda x: GetNodeFieldNamesOnMesh
    def GetTimeAttachedOnFieldIteration(*args):
        """
        GetTimeAttachedOnFieldIteration(char fileName, char fieldName, int iteration, int order) -> double

        1
        """
        return _ParaMEDMEM.MEDLoader_GetTimeAttachedOnFieldIteration(*args)

    if _newclass:GetTimeAttachedOnFieldIteration = staticmethod(GetTimeAttachedOnFieldIteration)
    __swig_getmethods__["GetTimeAttachedOnFieldIteration"] = lambda x: GetTimeAttachedOnFieldIteration
    def GetFieldIterations(*args):
        """
        GetFieldIterations(TypeOfField type, char fileName, char meshName, char fieldName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetFieldIterations(*args)

    if _newclass:GetFieldIterations = staticmethod(GetFieldIterations)
    __swig_getmethods__["GetFieldIterations"] = lambda x: GetFieldIterations
    def GetAllFieldIterations(*args):
        """
        GetAllFieldIterations(char fileName, char meshName, char fieldName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetAllFieldIterations(*args)

    if _newclass:GetAllFieldIterations = staticmethod(GetAllFieldIterations)
    __swig_getmethods__["GetAllFieldIterations"] = lambda x: GetAllFieldIterations
    def GetCellFieldIterations(*args):
        """
        GetCellFieldIterations(char fileName, char meshName, char fieldName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetCellFieldIterations(*args)

    if _newclass:GetCellFieldIterations = staticmethod(GetCellFieldIterations)
    __swig_getmethods__["GetCellFieldIterations"] = lambda x: GetCellFieldIterations
    def GetNodeFieldIterations(*args):
        """
        GetNodeFieldIterations(char fileName, char meshName, char fieldName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetNodeFieldIterations(*args)

    if _newclass:GetNodeFieldIterations = staticmethod(GetNodeFieldIterations)
    __swig_getmethods__["GetNodeFieldIterations"] = lambda x: GetNodeFieldIterations
    def GetComponentsNamesOfField(*args):
        """
        GetComponentsNamesOfField(char fileName, char fieldName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetComponentsNamesOfField(*args)

    if _newclass:GetComponentsNamesOfField = staticmethod(GetComponentsNamesOfField)
    __swig_getmethods__["GetComponentsNamesOfField"] = lambda x: GetComponentsNamesOfField
    def GetUMeshGlobalInfo(*args):
        """
        GetUMeshGlobalInfo(char fileName, char meshName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetUMeshGlobalInfo(*args)

    if _newclass:GetUMeshGlobalInfo = staticmethod(GetUMeshGlobalInfo)
    __swig_getmethods__["GetUMeshGlobalInfo"] = lambda x: GetUMeshGlobalInfo
    def ReadFieldsOnSameMesh(*args):
        """
        ReadFieldsOnSameMesh(TypeOfField type, char fileName, char meshName, int meshDimRelToMax, 
            char fieldName, PyObject liIts) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadFieldsOnSameMesh(*args)

    if _newclass:ReadFieldsOnSameMesh = staticmethod(ReadFieldsOnSameMesh)
    __swig_getmethods__["ReadFieldsOnSameMesh"] = lambda x: ReadFieldsOnSameMesh
    def WriteUMeshesPartition(*args):
        """
        WriteUMeshesPartition(char fileName, char meshName, PyObject li, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteUMeshesPartition(*args)

    if _newclass:WriteUMeshesPartition = staticmethod(WriteUMeshesPartition)
    __swig_getmethods__["WriteUMeshesPartition"] = lambda x: WriteUMeshesPartition
    def WriteUMeshesPartitionDep(*args):
        """
        WriteUMeshesPartitionDep(char fileName, char meshName, PyObject li, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteUMeshesPartitionDep(*args)

    if _newclass:WriteUMeshesPartitionDep = staticmethod(WriteUMeshesPartitionDep)
    __swig_getmethods__["WriteUMeshesPartitionDep"] = lambda x: WriteUMeshesPartitionDep
    def WriteUMeshes(*args):
        """
        WriteUMeshes(char fileName, PyObject li, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteUMeshes(*args)

    if _newclass:WriteUMeshes = staticmethod(WriteUMeshes)
    __swig_getmethods__["WriteUMeshes"] = lambda x: WriteUMeshes
    def GetTypesOfField(*args):
        """
        GetTypesOfField(char fileName, char meshName, char fieldName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDLoader_GetTypesOfField(*args)

    if _newclass:GetTypesOfField = staticmethod(GetTypesOfField)
    __swig_getmethods__["GetTypesOfField"] = lambda x: GetTypesOfField
    def ReadUMeshFromGroups(*args):
        """
        ReadUMeshFromGroups(char fileName, char meshName, int meshDimRelToMax, 
            PyObject li) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadUMeshFromGroups(*args)

    if _newclass:ReadUMeshFromGroups = staticmethod(ReadUMeshFromGroups)
    __swig_getmethods__["ReadUMeshFromGroups"] = lambda x: ReadUMeshFromGroups
    def ReadUMeshFromFamilies(*args):
        """
        ReadUMeshFromFamilies(char fileName, char meshName, int meshDimRelToMax, 
            PyObject li) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadUMeshFromFamilies(*args)

    if _newclass:ReadUMeshFromFamilies = staticmethod(ReadUMeshFromFamilies)
    __swig_getmethods__["ReadUMeshFromFamilies"] = lambda x: ReadUMeshFromFamilies
    def ReadUMeshFromFile(*args):
        """
        ReadUMeshFromFile(char fileName, char meshName, int meshDimRelToMax = 0) -> MEDCouplingUMesh
        ReadUMeshFromFile(char fileName, char meshName) -> MEDCouplingUMesh
        ReadUMeshFromFile(char fileName, int meshDimRelToMax = 0) -> MEDCouplingUMesh
        ReadUMeshFromFile(char fileName) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadUMeshFromFile(*args)

    if _newclass:ReadUMeshFromFile = staticmethod(ReadUMeshFromFile)
    __swig_getmethods__["ReadUMeshFromFile"] = lambda x: ReadUMeshFromFile
    def ReadUMeshDimFromFile(*args):
        """
        ReadUMeshDimFromFile(char fileName, char meshName) -> int

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadUMeshDimFromFile(*args)

    if _newclass:ReadUMeshDimFromFile = staticmethod(ReadUMeshDimFromFile)
    __swig_getmethods__["ReadUMeshDimFromFile"] = lambda x: ReadUMeshDimFromFile
    def ReadField(*args):
        """
        ReadField(TypeOfField type, char fileName, char meshName, int meshDimRelToMax, 
            char fieldName, int iteration, 
            int order) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadField(*args)

    if _newclass:ReadField = staticmethod(ReadField)
    __swig_getmethods__["ReadField"] = lambda x: ReadField
    def ReadFieldCell(*args):
        """
        ReadFieldCell(char fileName, char meshName, int meshDimRelToMax, 
            char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadFieldCell(*args)

    if _newclass:ReadFieldCell = staticmethod(ReadFieldCell)
    __swig_getmethods__["ReadFieldCell"] = lambda x: ReadFieldCell
    def ReadFieldNode(*args):
        """
        ReadFieldNode(char fileName, char meshName, int meshDimRelToMax, 
            char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadFieldNode(*args)

    if _newclass:ReadFieldNode = staticmethod(ReadFieldNode)
    __swig_getmethods__["ReadFieldNode"] = lambda x: ReadFieldNode
    def ReadFieldGauss(*args):
        """
        ReadFieldGauss(char fileName, char meshName, int meshDimRelToMax, 
            char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadFieldGauss(*args)

    if _newclass:ReadFieldGauss = staticmethod(ReadFieldGauss)
    __swig_getmethods__["ReadFieldGauss"] = lambda x: ReadFieldGauss
    def ReadFieldGaussNE(*args):
        """
        ReadFieldGaussNE(char fileName, char meshName, int meshDimRelToMax, 
            char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDLoader_ReadFieldGaussNE(*args)

    if _newclass:ReadFieldGaussNE = staticmethod(ReadFieldGaussNE)
    __swig_getmethods__["ReadFieldGaussNE"] = lambda x: ReadFieldGaussNE
    def WriteUMesh(*args):
        """
        WriteUMesh(char fileName, MEDCouplingUMesh mesh, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteUMesh(*args)

    if _newclass:WriteUMesh = staticmethod(WriteUMesh)
    __swig_getmethods__["WriteUMesh"] = lambda x: WriteUMesh
    def WriteUMeshDep(*args):
        """
        WriteUMeshDep(char fileName, MEDCouplingUMesh mesh, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteUMeshDep(*args)

    if _newclass:WriteUMeshDep = staticmethod(WriteUMeshDep)
    __swig_getmethods__["WriteUMeshDep"] = lambda x: WriteUMeshDep
    def WriteField(*args):
        """
        WriteField(char fileName, MEDCouplingFieldDouble f, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteField(*args)

    if _newclass:WriteField = staticmethod(WriteField)
    __swig_getmethods__["WriteField"] = lambda x: WriteField
    def WriteFieldDep(*args):
        """
        WriteFieldDep(char fileName, MEDCouplingFieldDouble f, bool writeFromScratch)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteFieldDep(*args)

    if _newclass:WriteFieldDep = staticmethod(WriteFieldDep)
    __swig_getmethods__["WriteFieldDep"] = lambda x: WriteFieldDep
    def WriteFieldUsingAlreadyWrittenMesh(*args):
        """
        WriteFieldUsingAlreadyWrittenMesh(char fileName, MEDCouplingFieldDouble f)

        1
        """
        return _ParaMEDMEM.MEDLoader_WriteFieldUsingAlreadyWrittenMesh(*args)

    if _newclass:WriteFieldUsingAlreadyWrittenMesh = staticmethod(WriteFieldUsingAlreadyWrittenMesh)
    __swig_getmethods__["WriteFieldUsingAlreadyWrittenMesh"] = lambda x: WriteFieldUsingAlreadyWrittenMesh
    __swig_destroy__ = _ParaMEDMEM.delete_MEDLoader
    __del__ = lambda self : None;
MEDLoader_swigregister = _ParaMEDMEM.MEDLoader_swigregister
MEDLoader_swigregister(MEDLoader)

def MEDLoader_setEpsilonForNodeComp(*args):
  """
    MEDLoader_setEpsilonForNodeComp(double val)

    1
    """
  return _ParaMEDMEM.MEDLoader_setEpsilonForNodeComp(*args)

def MEDLoader_setCompPolicyForCell(*args):
  """
    MEDLoader_setCompPolicyForCell(int val)

    1
    """
  return _ParaMEDMEM.MEDLoader_setCompPolicyForCell(*args)

def MEDLoader_setTooLongStrPolicy(*args):
  """
    MEDLoader_setTooLongStrPolicy(int val)

    1
    """
  return _ParaMEDMEM.MEDLoader_setTooLongStrPolicy(*args)

def MEDLoader_CheckFileForRead(*args):
  """
    MEDLoader_CheckFileForRead(char fileName)

    1
    """
  return _ParaMEDMEM.MEDLoader_CheckFileForRead(*args)

def MEDLoader_GetMeshNames(*args):
  """
    MEDLoader_GetMeshNames(char fileName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetMeshNames(*args)

def MEDLoader_GetMeshNamesOnField(*args):
  """
    MEDLoader_GetMeshNamesOnField(char fileName, char fieldName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetMeshNamesOnField(*args)

def MEDLoader_GetMeshGroupsNames(*args):
  """
    MEDLoader_GetMeshGroupsNames(char fileName, char meshName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetMeshGroupsNames(*args)

def MEDLoader_GetMeshFamiliesNames(*args):
  """
    MEDLoader_GetMeshFamiliesNames(char fileName, char meshName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetMeshFamiliesNames(*args)

def MEDLoader_GetMeshFamiliesNamesOnGroup(*args):
  """
    MEDLoader_GetMeshFamiliesNamesOnGroup(char fileName, char meshName, char grpName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetMeshFamiliesNamesOnGroup(*args)

def MEDLoader_GetMeshGroupsNamesOnFamily(*args):
  """
    MEDLoader_GetMeshGroupsNamesOnFamily(char fileName, char meshName, char famName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetMeshGroupsNamesOnFamily(*args)

def MEDLoader_GetAllFieldNamesOnMesh(*args):
  """
    MEDLoader_GetAllFieldNamesOnMesh(char fileName, char meshName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetAllFieldNamesOnMesh(*args)

def MEDLoader_GetAllFieldNames(*args):
  """
    MEDLoader_GetAllFieldNames(char fileName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetAllFieldNames(*args)

def MEDLoader_GetFieldNamesOnMesh(*args):
  """
    MEDLoader_GetFieldNamesOnMesh(TypeOfField type, char fileName, char meshName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetFieldNamesOnMesh(*args)

def MEDLoader_GetCellFieldNamesOnMesh(*args):
  """
    MEDLoader_GetCellFieldNamesOnMesh(char fileName, char meshName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetCellFieldNamesOnMesh(*args)

def MEDLoader_GetNodeFieldNamesOnMesh(*args):
  """
    MEDLoader_GetNodeFieldNamesOnMesh(char fileName, char meshName) -> svec

    1
    """
  return _ParaMEDMEM.MEDLoader_GetNodeFieldNamesOnMesh(*args)

def MEDLoader_GetTimeAttachedOnFieldIteration(*args):
  """
    MEDLoader_GetTimeAttachedOnFieldIteration(char fileName, char fieldName, int iteration, int order) -> double

    1
    """
  return _ParaMEDMEM.MEDLoader_GetTimeAttachedOnFieldIteration(*args)

def MEDLoader_GetFieldIterations(*args):
  """
    MEDLoader_GetFieldIterations(TypeOfField type, char fileName, char meshName, char fieldName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetFieldIterations(*args)

def MEDLoader_GetAllFieldIterations(*args):
  """
    MEDLoader_GetAllFieldIterations(char fileName, char meshName, char fieldName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetAllFieldIterations(*args)

def MEDLoader_GetCellFieldIterations(*args):
  """
    MEDLoader_GetCellFieldIterations(char fileName, char meshName, char fieldName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetCellFieldIterations(*args)

def MEDLoader_GetNodeFieldIterations(*args):
  """
    MEDLoader_GetNodeFieldIterations(char fileName, char meshName, char fieldName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetNodeFieldIterations(*args)

def MEDLoader_GetComponentsNamesOfField(*args):
  """
    MEDLoader_GetComponentsNamesOfField(char fileName, char fieldName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetComponentsNamesOfField(*args)

def MEDLoader_GetUMeshGlobalInfo(*args):
  """
    MEDLoader_GetUMeshGlobalInfo(char fileName, char meshName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetUMeshGlobalInfo(*args)

def MEDLoader_ReadFieldsOnSameMesh(*args):
  """
    MEDLoader_ReadFieldsOnSameMesh(TypeOfField type, char fileName, char meshName, int meshDimRelToMax, 
        char fieldName, PyObject liIts) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadFieldsOnSameMesh(*args)

def MEDLoader_WriteUMeshesPartition(*args):
  """
    MEDLoader_WriteUMeshesPartition(char fileName, char meshName, PyObject li, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteUMeshesPartition(*args)

def MEDLoader_WriteUMeshesPartitionDep(*args):
  """
    MEDLoader_WriteUMeshesPartitionDep(char fileName, char meshName, PyObject li, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteUMeshesPartitionDep(*args)

def MEDLoader_WriteUMeshes(*args):
  """
    MEDLoader_WriteUMeshes(char fileName, PyObject li, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteUMeshes(*args)

def MEDLoader_GetTypesOfField(*args):
  """
    MEDLoader_GetTypesOfField(char fileName, char meshName, char fieldName) -> PyObject

    1
    """
  return _ParaMEDMEM.MEDLoader_GetTypesOfField(*args)

def MEDLoader_ReadUMeshFromGroups(*args):
  """
    MEDLoader_ReadUMeshFromGroups(char fileName, char meshName, int meshDimRelToMax, 
        PyObject li) -> MEDCouplingUMesh

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadUMeshFromGroups(*args)

def MEDLoader_ReadUMeshFromFamilies(*args):
  """
    MEDLoader_ReadUMeshFromFamilies(char fileName, char meshName, int meshDimRelToMax, 
        PyObject li) -> MEDCouplingUMesh

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadUMeshFromFamilies(*args)

def MEDLoader_ReadUMeshFromFile(*args):
  """
    ReadUMeshFromFile(char fileName, char meshName, int meshDimRelToMax = 0) -> MEDCouplingUMesh
    ReadUMeshFromFile(char fileName, char meshName) -> MEDCouplingUMesh
    ReadUMeshFromFile(char fileName, int meshDimRelToMax = 0) -> MEDCouplingUMesh
    MEDLoader_ReadUMeshFromFile(char fileName) -> MEDCouplingUMesh

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadUMeshFromFile(*args)

def MEDLoader_ReadUMeshDimFromFile(*args):
  """
    MEDLoader_ReadUMeshDimFromFile(char fileName, char meshName) -> int

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadUMeshDimFromFile(*args)

def MEDLoader_ReadField(*args):
  """
    MEDLoader_ReadField(TypeOfField type, char fileName, char meshName, int meshDimRelToMax, 
        char fieldName, int iteration, 
        int order) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadField(*args)

def MEDLoader_ReadFieldCell(*args):
  """
    MEDLoader_ReadFieldCell(char fileName, char meshName, int meshDimRelToMax, 
        char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadFieldCell(*args)

def MEDLoader_ReadFieldNode(*args):
  """
    MEDLoader_ReadFieldNode(char fileName, char meshName, int meshDimRelToMax, 
        char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadFieldNode(*args)

def MEDLoader_ReadFieldGauss(*args):
  """
    MEDLoader_ReadFieldGauss(char fileName, char meshName, int meshDimRelToMax, 
        char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadFieldGauss(*args)

def MEDLoader_ReadFieldGaussNE(*args):
  """
    MEDLoader_ReadFieldGaussNE(char fileName, char meshName, int meshDimRelToMax, 
        char fieldName, int iteration, int order) -> MEDCouplingFieldDouble

    1
    """
  return _ParaMEDMEM.MEDLoader_ReadFieldGaussNE(*args)

def MEDLoader_WriteUMesh(*args):
  """
    MEDLoader_WriteUMesh(char fileName, MEDCouplingUMesh mesh, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteUMesh(*args)

def MEDLoader_WriteUMeshDep(*args):
  """
    MEDLoader_WriteUMeshDep(char fileName, MEDCouplingUMesh mesh, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteUMeshDep(*args)

def MEDLoader_WriteField(*args):
  """
    MEDLoader_WriteField(char fileName, MEDCouplingFieldDouble f, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteField(*args)

def MEDLoader_WriteFieldDep(*args):
  """
    MEDLoader_WriteFieldDep(char fileName, MEDCouplingFieldDouble f, bool writeFromScratch)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteFieldDep(*args)

def MEDLoader_WriteFieldUsingAlreadyWrittenMesh(*args):
  """
    MEDLoader_WriteFieldUsingAlreadyWrittenMesh(char fileName, MEDCouplingFieldDouble f)

    1
    """
  return _ParaMEDMEM.MEDLoader_WriteFieldUsingAlreadyWrittenMesh(*args)

class MEDFileWritable(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileWritable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileWritable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def copyOptionsFrom(self, *args):
        """
        copyOptionsFrom(self, MEDFileWritable other)

        1
        """
        return _ParaMEDMEM.MEDFileWritable_copyOptionsFrom(self, *args)

    def getTooLongStrPolicy(self):
        """
        getTooLongStrPolicy(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileWritable_getTooLongStrPolicy(self)

    def setTooLongStrPolicy(self, *args):
        """
        setTooLongStrPolicy(self, int newVal)

        1
        """
        return _ParaMEDMEM.MEDFileWritable_setTooLongStrPolicy(self, *args)

    def getZipConnPolicy(self):
        """
        getZipConnPolicy(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileWritable_getZipConnPolicy(self)

    def setZipConnPolicy(self, *args):
        """
        setZipConnPolicy(self, int newVal)

        1
        """
        return _ParaMEDMEM.MEDFileWritable_setZipConnPolicy(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileWritable
    __del__ = lambda self : None;
MEDFileWritable_swigregister = _ParaMEDMEM.MEDFileWritable_swigregister
MEDFileWritable_swigregister(MEDFileWritable)

class MEDFileMesh(RefCountObject,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(char fileName) -> MEDFileMesh
        New(char fileName, char mName, int dt = -1, int it = -1) -> MEDFileMesh
        New(char fileName, char mName, int dt = -1) -> MEDFileMesh
        New(char fileName, char mName) -> MEDFileMesh

        1
        """
        return _ParaMEDMEM.MEDFileMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clearNonDiscrAttributes(self):
        """
        clearNonDiscrAttributes(self)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_clearNonDiscrAttributes(self)

    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setName(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getName(self)

    def setUnivName(self, *args):
        """
        setUnivName(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setUnivName(self, *args)

    def getUnivName(self):
        """
        getUnivName(self) -> char

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getUnivName(self)

    def setDescription(self, *args):
        """
        setDescription(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setDescription(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getDescription(self)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setOrder(self, *args)

    def getOrder(self):
        """
        getOrder(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getOrder(self)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setIteration(self, *args)

    def getIteration(self):
        """
        getIteration(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getIteration(self)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double time)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setTimeValue(self, *args)

    def setTime(self, *args):
        """
        setTime(self, int dt, int it, double time)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setTime(self, *args)

    def getTimeValue(self):
        """
        getTimeValue(self) -> double

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getTimeValue(self)

    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getTimeUnit(self)

    def getNumberOfNodes(self):
        """
        getNumberOfNodes(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNumberOfNodes(self)

    def getNonEmptyLevels(self):
        """
        getNonEmptyLevels(self) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNonEmptyLevels(self)

    def getNonEmptyLevelsExt(self):
        """
        getNonEmptyLevelsExt(self) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNonEmptyLevelsExt(self)

    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_write(self, *args)

    def getSizeAtLevel(self, *args):
        """
        getSizeAtLevel(self, int meshDimRelToMaxExt) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getSizeAtLevel(self, *args)

    def existsGroup(self, *args):
        """
        existsGroup(self, char groupName) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileMesh_existsGroup(self, *args)

    def existsFamily(self, *args):
        """
        existsFamily(self, int famId) -> bool
        existsFamily(self, char familyName) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileMesh_existsFamily(self, *args)

    def setFamilyId(self, *args):
        """
        setFamilyId(self, char familyName, int id)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setFamilyId(self, *args)

    def setFamilyIdUnique(self, *args):
        """
        setFamilyIdUnique(self, char familyName, int id)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setFamilyIdUnique(self, *args)

    def addFamily(self, *args):
        """
        addFamily(self, char familyName, int id)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_addFamily(self, *args)

    def addFamilyOnGrp(self, *args):
        """
        addFamilyOnGrp(self, char grpName, char famName)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_addFamilyOnGrp(self, *args)

    def createGroupOnAll(self, *args):
        """
        createGroupOnAll(self, int meshDimRelToMaxExt, char groupName)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_createGroupOnAll(self, *args)

    def keepFamIdsOnlyOnLevs(self, *args):
        """
        keepFamIdsOnlyOnLevs(self, ivec famIds, ivec levs) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileMesh_keepFamIdsOnlyOnLevs(self, *args)

    def copyFamGrpMapsFrom(self, *args):
        """
        copyFamGrpMapsFrom(self, MEDFileMesh other)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_copyFamGrpMapsFrom(self, *args)

    def getFamilyInfo(self):
        """
        getFamilyInfo(self) -> std::map<(std::string,int)>

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamilyInfo(self)

    def getGroupInfo(self):
        """
        getGroupInfo(self) -> std::map<(std::string,std::vector<(std::string,std::allocator<(std::string)>)>)>

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getGroupInfo(self)

    def getFamiliesOnGroup(self, *args):
        """
        getFamiliesOnGroup(self, char name) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamiliesOnGroup(self, *args)

    def getFamiliesOnGroups(self, *args):
        """
        getFamiliesOnGroups(self, svec grps) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamiliesOnGroups(self, *args)

    def getFamiliesIdsOnGroup(self, *args):
        """
        getFamiliesIdsOnGroup(self, char name) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamiliesIdsOnGroup(self, *args)

    def setFamiliesOnGroup(self, *args):
        """
        setFamiliesOnGroup(self, char name, svec fams)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setFamiliesOnGroup(self, *args)

    def setFamiliesIdsOnGroup(self, *args):
        """
        setFamiliesIdsOnGroup(self, char name, ivec famIds)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setFamiliesIdsOnGroup(self, *args)

    def getGroupsOnFamily(self, *args):
        """
        getGroupsOnFamily(self, char name) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getGroupsOnFamily(self, *args)

    def setGroupsOnFamily(self, *args):
        """
        setGroupsOnFamily(self, char famName, svec grps)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setGroupsOnFamily(self, *args)

    def getGroupsNames(self):
        """
        getGroupsNames(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getGroupsNames(self)

    def getFamiliesNames(self):
        """
        getFamiliesNames(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamiliesNames(self)

    def assignFamilyNameWithGroupName(self):
        """
        assignFamilyNameWithGroupName(self)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_assignFamilyNameWithGroupName(self)

    def removeGroup(self, *args):
        """
        removeGroup(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_removeGroup(self, *args)

    def removeFamily(self, *args):
        """
        removeFamily(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_removeFamily(self, *args)

    def changeGroupName(self, *args):
        """
        changeGroupName(self, char oldName, char newName)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_changeGroupName(self, *args)

    def changeFamilyName(self, *args):
        """
        changeFamilyName(self, char oldName, char newName)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_changeFamilyName(self, *args)

    def changeFamilyId(self, *args):
        """
        changeFamilyId(self, int oldId, int newId)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_changeFamilyId(self, *args)

    def setFamilyInfo(self, *args):
        """
        setFamilyInfo(self, std::map<(std::string,int)> info)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setFamilyInfo(self, *args)

    def setGroupInfo(self, *args):
        """
        setGroupInfo(self, std::map<(std::string,std::vector<(std::string,std::allocator<(std::string)>)>)> info)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setGroupInfo(self, *args)

    def getFamilyId(self, *args):
        """
        getFamilyId(self, char name) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamilyId(self, *args)

    def getMaxFamilyId(self):
        """
        getMaxFamilyId(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getMaxFamilyId(self)

    def getMinFamilyId(self):
        """
        getMinFamilyId(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getMinFamilyId(self)

    def getAllFamiliesIdsReferenced(self):
        """
        getAllFamiliesIdsReferenced(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getAllFamiliesIdsReferenced(self)

    def getFamiliesIds(self, *args):
        """
        getFamiliesIds(self, svec famNames) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamiliesIds(self, *args)

    def getFamilyNameGivenId(self, *args):
        """
        getFamilyNameGivenId(self, int id) -> string

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamilyNameGivenId(self, *args)

    def ensureDifferentFamIdsPerLevel(self):
        """
        ensureDifferentFamIdsPerLevel(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileMesh_ensureDifferentFamIdsPerLevel(self)

    def normalizeFamIdsTrio(self):
        """
        normalizeFamIdsTrio(self)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_normalizeFamIdsTrio(self)

    def normalizeFamIdsMEDFile(self):
        """
        normalizeFamIdsMEDFile(self)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_normalizeFamIdsMEDFile(self)

    def getMeshDimension(self):
        """
        getMeshDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getMeshDimension(self)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileMesh_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileMesh_advancedRepr(self)

    def getGenMeshAtLevel(self, *args):
        """
        getGenMeshAtLevel(self, int meshDimRelToMax, bool renum = False) -> MEDCouplingMesh
        getGenMeshAtLevel(self, int meshDimRelToMax) -> MEDCouplingMesh

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getGenMeshAtLevel(self, *args)

    def setFamilyFieldArr(self, *args):
        """
        setFamilyFieldArr(self, int meshDimRelToMaxExt, DataArrayInt famArr)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setFamilyFieldArr(self, *args)

    def setRenumFieldArr(self, *args):
        """
        setRenumFieldArr(self, int meshDimRelToMaxExt, DataArrayInt renumArr)

        1
        """
        return _ParaMEDMEM.MEDFileMesh_setRenumFieldArr(self, *args)

    def getFamiliesArr(self, *args):
        """
        getFamiliesArr(self, int meshDimRelToMaxExt, svec fams, bool renum = False) -> DataArrayInt
        getFamiliesArr(self, int meshDimRelToMaxExt, svec fams) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamiliesArr(self, *args)

    def getGroupsArr(self, *args):
        """
        getGroupsArr(self, int meshDimRelToMaxExt, svec grps, bool renum = False) -> DataArrayInt
        getGroupsArr(self, int meshDimRelToMaxExt, svec grps) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getGroupsArr(self, *args)

    def getGroupArr(self, *args):
        """
        getGroupArr(self, int meshDimRelToMaxExt, char grp, bool renum = False) -> DataArrayInt
        getGroupArr(self, int meshDimRelToMaxExt, char grp) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getGroupArr(self, *args)

    def getFamilyArr(self, *args):
        """
        getFamilyArr(self, int meshDimRelToMaxExt, char fam, bool renum = False) -> DataArrayInt
        getFamilyArr(self, int meshDimRelToMaxExt, char fam) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamilyArr(self, *args)

    def getNodeGroupArr(self, *args):
        """
        getNodeGroupArr(self, char grp, bool renum = False) -> DataArrayInt
        getNodeGroupArr(self, char grp) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNodeGroupArr(self, *args)

    def getNodeGroupsArr(self, *args):
        """
        getNodeGroupsArr(self, svec grps, bool renum = False) -> DataArrayInt
        getNodeGroupsArr(self, svec grps) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNodeGroupsArr(self, *args)

    def getNodeFamilyArr(self, *args):
        """
        getNodeFamilyArr(self, char fam, bool renum = False) -> DataArrayInt
        getNodeFamilyArr(self, char fam) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNodeFamilyArr(self, *args)

    def getNodeFamiliesArr(self, *args):
        """
        getNodeFamiliesArr(self, svec fams, bool renum = False) -> DataArrayInt
        getNodeFamiliesArr(self, svec fams) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNodeFamiliesArr(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, char fileName) -> MEDFileMesh
        __init__(self, char fileName, char mName, int dt = -1, int it = -1) -> MEDFileMesh
        __init__(self, char fileName, char mName, int dt = -1) -> MEDFileMesh
        __init__(self, char fileName, char mName) -> MEDFileMesh

        1
        """
        this = _ParaMEDMEM.new_MEDFileMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileMesh___str__(self)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getTime(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDFileMesh other, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_isEqual(self, *args)

    def areFamsEqual(self, *args):
        """
        areFamsEqual(self, MEDFileMesh other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_areFamsEqual(self, *args)

    def areGrpsEqual(self, *args):
        """
        areGrpsEqual(self, MEDFileMesh other) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_areGrpsEqual(self, *args)

    def getFamilyFieldAtLevel(self, *args):
        """
        getFamilyFieldAtLevel(self, int meshDimRelToMaxExt) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getFamilyFieldAtLevel(self, *args)

    def getNumberFieldAtLevel(self, *args):
        """
        getNumberFieldAtLevel(self, int meshDimRelToMaxExt) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_getNumberFieldAtLevel(self, *args)

    def findOrCreateAndGiveFamilyWithId(self, *args):
        """
        findOrCreateAndGiveFamilyWithId(self, int id, bool created) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_findOrCreateAndGiveFamilyWithId(self, *args)

    def unPolyze(self):
        """
        unPolyze(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMesh_unPolyze(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileMesh
    __del__ = lambda self : None;
MEDFileMesh_swigregister = _ParaMEDMEM.MEDFileMesh_swigregister
MEDFileMesh_swigregister(MEDFileMesh)

def MEDFileMesh_New(*args):
  """
    New(char fileName) -> MEDFileMesh
    New(char fileName, char mName, int dt = -1, int it = -1) -> MEDFileMesh
    New(char fileName, char mName, int dt = -1) -> MEDFileMesh
    MEDFileMesh_New(char fileName, char mName) -> MEDFileMesh

    1
    """
  return _ParaMEDMEM.MEDFileMesh_New(*args)

class MEDFileUMesh(MEDFileMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDFileMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDFileMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileUMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(char fileName, char mName, int dt = -1, int it = -1) -> MEDFileUMesh
        New(char fileName, char mName, int dt = -1) -> MEDFileUMesh
        New(char fileName, char mName) -> MEDFileUMesh
        New(char fileName) -> MEDFileUMesh
        New() -> MEDFileUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileUMesh
    __del__ = lambda self : None;
    def getSpaceDimension(self):
        """
        getSpaceDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getSpaceDimension(self)

    def getGrpNonEmptyLevels(self, *args):
        """
        getGrpNonEmptyLevels(self, char grp) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGrpNonEmptyLevels(self, *args)

    def getGrpNonEmptyLevelsExt(self, *args):
        """
        getGrpNonEmptyLevelsExt(self, char grp) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGrpNonEmptyLevelsExt(self, *args)

    def getFamNonEmptyLevels(self, *args):
        """
        getFamNonEmptyLevels(self, char fam) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamNonEmptyLevels(self, *args)

    def getFamNonEmptyLevelsExt(self, *args):
        """
        getFamNonEmptyLevelsExt(self, char fam) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamNonEmptyLevelsExt(self, *args)

    def getGrpsNonEmptyLevels(self, *args):
        """
        getGrpsNonEmptyLevels(self, svec grps) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGrpsNonEmptyLevels(self, *args)

    def getGrpsNonEmptyLevelsExt(self, *args):
        """
        getGrpsNonEmptyLevelsExt(self, svec grps) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGrpsNonEmptyLevelsExt(self, *args)

    def getFamsNonEmptyLevels(self, *args):
        """
        getFamsNonEmptyLevels(self, svec fams) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamsNonEmptyLevels(self, *args)

    def getFamsNonEmptyLevelsExt(self, *args):
        """
        getFamsNonEmptyLevelsExt(self, svec fams) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamsNonEmptyLevelsExt(self, *args)

    def getGroupsOnSpecifiedLev(self, *args):
        """
        getGroupsOnSpecifiedLev(self, int meshDimRelToMaxExt) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGroupsOnSpecifiedLev(self, *args)

    def getGroup(self, *args):
        """
        getGroup(self, int meshDimRelToMaxExt, char grp, bool renum = False) -> MEDCouplingUMesh
        getGroup(self, int meshDimRelToMaxExt, char grp) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGroup(self, *args)

    def getGroupArr(self, *args):
        """
        getGroupArr(self, int meshDimRelToMaxExt, char grp, bool renum = False) -> DataArrayInt
        getGroupArr(self, int meshDimRelToMaxExt, char grp) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGroupArr(self, *args)

    def getGroups(self, *args):
        """
        getGroups(self, int meshDimRelToMaxExt, svec grps, bool renum = False) -> MEDCouplingUMesh
        getGroups(self, int meshDimRelToMaxExt, svec grps) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGroups(self, *args)

    def getGroupsArr(self, *args):
        """
        getGroupsArr(self, int meshDimRelToMaxExt, svec grps, bool renum = False) -> DataArrayInt
        getGroupsArr(self, int meshDimRelToMaxExt, svec grps) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getGroupsArr(self, *args)

    def getFamily(self, *args):
        """
        getFamily(self, int meshDimRelToMaxExt, char fam, bool renum = False) -> MEDCouplingUMesh
        getFamily(self, int meshDimRelToMaxExt, char fam) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamily(self, *args)

    def getFamilyArr(self, *args):
        """
        getFamilyArr(self, int meshDimRelToMaxExt, char fam, bool renum = False) -> DataArrayInt
        getFamilyArr(self, int meshDimRelToMaxExt, char fam) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamilyArr(self, *args)

    def getFamilies(self, *args):
        """
        getFamilies(self, int meshDimRelToMaxExt, svec fams, bool renum = False) -> MEDCouplingUMesh
        getFamilies(self, int meshDimRelToMaxExt, svec fams) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamilies(self, *args)

    def getFamiliesArr(self, *args):
        """
        getFamiliesArr(self, int meshDimRelToMaxExt, svec fams, bool renum = False) -> DataArrayInt
        getFamiliesArr(self, int meshDimRelToMaxExt, svec fams) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getFamiliesArr(self, *args)

    def getNodeGroupArr(self, *args):
        """
        getNodeGroupArr(self, char grp, bool renum = False) -> DataArrayInt
        getNodeGroupArr(self, char grp) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getNodeGroupArr(self, *args)

    def getNodeGroupsArr(self, *args):
        """
        getNodeGroupsArr(self, svec grps, bool renum = False) -> DataArrayInt
        getNodeGroupsArr(self, svec grps) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getNodeGroupsArr(self, *args)

    def getNodeFamilyArr(self, *args):
        """
        getNodeFamilyArr(self, char fam, bool renum = False) -> DataArrayInt
        getNodeFamilyArr(self, char fam) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getNodeFamilyArr(self, *args)

    def getNodeFamiliesArr(self, *args):
        """
        getNodeFamiliesArr(self, svec fams, bool renum = False) -> DataArrayInt
        getNodeFamiliesArr(self, svec fams) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getNodeFamiliesArr(self, *args)

    def getMeshAtLevel(self, *args):
        """
        getMeshAtLevel(self, int meshDimRelToMaxExt, bool renum = False) -> MEDCouplingUMesh
        getMeshAtLevel(self, int meshDimRelToMaxExt) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getMeshAtLevel(self, *args)

    def getLevel0Mesh(self, renum = False):
        """
        getLevel0Mesh(self, bool renum = False) -> MEDCouplingUMesh
        getLevel0Mesh(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getLevel0Mesh(self, renum)

    def getLevelM1Mesh(self, renum = False):
        """
        getLevelM1Mesh(self, bool renum = False) -> MEDCouplingUMesh
        getLevelM1Mesh(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getLevelM1Mesh(self, renum)

    def getLevelM2Mesh(self, renum = False):
        """
        getLevelM2Mesh(self, bool renum = False) -> MEDCouplingUMesh
        getLevelM2Mesh(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getLevelM2Mesh(self, renum)

    def getLevelM3Mesh(self, renum = False):
        """
        getLevelM3Mesh(self, bool renum = False) -> MEDCouplingUMesh
        getLevelM3Mesh(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getLevelM3Mesh(self, renum)

    def setFamilyNameAttachedOnId(self, *args):
        """
        setFamilyNameAttachedOnId(self, int id, string newFamName)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setFamilyNameAttachedOnId(self, *args)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coords)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setCoords(self, *args)

    def eraseGroupsAtLevel(self, *args):
        """
        eraseGroupsAtLevel(self, int meshDimRelToMaxExt)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_eraseGroupsAtLevel(self, *args)

    def addNodeGroup(self, *args):
        """
        addNodeGroup(self, string name, ivec ids)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_addNodeGroup(self, *args)

    def removeMeshAtLevel(self, *args):
        """
        removeMeshAtLevel(self, int meshDimRelToMax)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_removeMeshAtLevel(self, *args)

    def setMeshAtLevel(self, *args):
        """
        setMeshAtLevel(self, int meshDimRelToMax, MEDCouplingUMesh m, bool newOrOld = False)
        setMeshAtLevel(self, int meshDimRelToMax, MEDCouplingUMesh m)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setMeshAtLevel(self, *args)

    def setMeshAtLevelGen(self, *args):
        """
        setMeshAtLevelGen(self, int meshDimRelToMax, MEDCouplingUMesh m, bool newOrOld)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setMeshAtLevelGen(self, *args)

    def setGroupsFromScratch(self, *args):
        """
        setGroupsFromScratch(self, int meshDimRelToMax, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingUMesh,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingUMesh)>)> ms)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setGroupsFromScratch(self, *args)

    def setGroupsOnSetMesh(self, *args):
        """
        setGroupsOnSetMesh(self, int meshDimRelToMax, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingUMesh,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingUMesh)>)> ms, 
            bool renum)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setGroupsOnSetMesh(self, *args)

    def optimizeFamilies(self):
        """
        optimizeFamilies(self)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_optimizeFamilies(self)

    def __init__(self, *args): 
        """
        __init__(self, char fileName, char mName, int dt = -1, int it = -1) -> MEDFileUMesh
        __init__(self, char fileName, char mName, int dt = -1) -> MEDFileUMesh
        __init__(self, char fileName, char mName) -> MEDFileUMesh
        __init__(self, char fileName) -> MEDFileUMesh
        __init__(self) -> MEDFileUMesh

        1
        """
        this = _ParaMEDMEM.new_MEDFileUMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def getRevNumberFieldAtLevel(self, *args):
        """
        getRevNumberFieldAtLevel(self, int meshDimRelToMaxExt) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getRevNumberFieldAtLevel(self, *args)

    def setGroupsAtLevel(self, *args):
        """
        setGroupsAtLevel(self, int meshDimRelToMaxExt, PyObject li, bool renum = False)
        setGroupsAtLevel(self, int meshDimRelToMaxExt, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_setGroupsAtLevel(self, *args)

    def getCoords(self):
        """
        getCoords(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_getCoords(self)

    def duplicateNodesOnM1Group(self, *args):
        """
        duplicateNodesOnM1Group(self, char grpNameM1) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileUMesh_duplicateNodesOnM1Group(self, *args)

MEDFileUMesh_swigregister = _ParaMEDMEM.MEDFileUMesh_swigregister
MEDFileUMesh_swigregister(MEDFileUMesh)

def MEDFileUMesh_New(*args):
  """
    New(char fileName, char mName, int dt = -1, int it = -1) -> MEDFileUMesh
    New(char fileName, char mName, int dt = -1) -> MEDFileUMesh
    New(char fileName, char mName) -> MEDFileUMesh
    New(char fileName) -> MEDFileUMesh
    MEDFileUMesh_New() -> MEDFileUMesh

    1
    """
  return _ParaMEDMEM.MEDFileUMesh_New(*args)

class MEDFileCMesh(MEDFileMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDFileMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileCMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDFileMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileCMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDFileCMesh
        New(char fileName) -> MEDFileCMesh
        New(char fileName, char mName, int dt = -1, int it = -1) -> MEDFileCMesh
        New(char fileName, char mName, int dt = -1) -> MEDFileCMesh
        New(char fileName, char mName) -> MEDFileCMesh

        1
        """
        return _ParaMEDMEM.MEDFileCMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setMesh(self, *args):
        """
        setMesh(self, MEDCouplingCMesh m)

        1
        """
        return _ParaMEDMEM.MEDFileCMesh_setMesh(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDFileCMesh
        __init__(self, char fileName) -> MEDFileCMesh
        __init__(self, char fileName, char mName, int dt = -1, int it = -1) -> MEDFileCMesh
        __init__(self, char fileName, char mName, int dt = -1) -> MEDFileCMesh
        __init__(self, char fileName, char mName) -> MEDFileCMesh

        1
        """
        this = _ParaMEDMEM.new_MEDFileCMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMesh(self):
        """
        getMesh(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileCMesh_getMesh(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileCMesh
    __del__ = lambda self : None;
MEDFileCMesh_swigregister = _ParaMEDMEM.MEDFileCMesh_swigregister
MEDFileCMesh_swigregister(MEDFileCMesh)

def MEDFileCMesh_New(*args):
  """
    New() -> MEDFileCMesh
    New(char fileName) -> MEDFileCMesh
    New(char fileName, char mName, int dt = -1, int it = -1) -> MEDFileCMesh
    New(char fileName, char mName, int dt = -1) -> MEDFileCMesh
    MEDFileCMesh_New(char fileName, char mName) -> MEDFileCMesh

    1
    """
  return _ParaMEDMEM.MEDFileCMesh_New(*args)

class MEDFileMeshMultiTS(RefCountObject,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileMeshMultiTS, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileMeshMultiTS, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDFileMeshMultiTS
        New(char fileName) -> MEDFileMeshMultiTS
        New(char fileName, char mName) -> MEDFileMeshMultiTS

        1
        """
        return _ParaMEDMEM.MEDFileMeshMultiTS_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _ParaMEDMEM.MEDFileMeshMultiTS_getName(self)

    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileMeshMultiTS_write(self, *args)

    def setOneTimeStep(self, *args):
        """
        setOneTimeStep(self, MEDFileMesh mesh1TimeStep)

        1
        """
        return _ParaMEDMEM.MEDFileMeshMultiTS_setOneTimeStep(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDFileMeshMultiTS
        __init__(self, char fileName) -> MEDFileMeshMultiTS
        __init__(self, char fileName, char mName) -> MEDFileMeshMultiTS

        1
        """
        this = _ParaMEDMEM.new_MEDFileMeshMultiTS(*args)
        try: self.this.append(this)
        except: self.this = this
    def getOneTimeStep(self):
        """
        getOneTimeStep(self) -> MEDFileMesh

        1
        """
        return _ParaMEDMEM.MEDFileMeshMultiTS_getOneTimeStep(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileMeshMultiTS
    __del__ = lambda self : None;
MEDFileMeshMultiTS_swigregister = _ParaMEDMEM.MEDFileMeshMultiTS_swigregister
MEDFileMeshMultiTS_swigregister(MEDFileMeshMultiTS)

def MEDFileMeshMultiTS_New(*args):
  """
    New() -> MEDFileMeshMultiTS
    New(char fileName) -> MEDFileMeshMultiTS
    MEDFileMeshMultiTS_New(char fileName, char mName) -> MEDFileMeshMultiTS

    1
    """
  return _ParaMEDMEM.MEDFileMeshMultiTS_New(*args)

class MEDFileMeshesIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileMeshesIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileMeshesIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileMeshesIterator_next(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileMeshesIterator
    __del__ = lambda self : None;
MEDFileMeshesIterator_swigregister = _ParaMEDMEM.MEDFileMeshesIterator_swigregister
MEDFileMeshesIterator_swigregister(MEDFileMeshesIterator)

class MEDFileMeshes(RefCountObject,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileMeshes, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileMeshes, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDFileMeshes
        New(char fileName) -> MEDFileMeshes

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_write(self, *args)

    def getNumberOfMeshes(self):
        """
        getNumberOfMeshes(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_getNumberOfMeshes(self)

    def getMeshesNames(self):
        """
        getMeshesNames(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_getMeshesNames(self)

    def resize(self, *args):
        """
        resize(self, int newSize)

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_resize(self, *args)

    def pushMesh(self, *args):
        """
        pushMesh(self, MEDFileMesh mesh)

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_pushMesh(self, *args)

    def setMeshAtPos(self, *args):
        """
        setMeshAtPos(self, int i, MEDFileMesh mesh)

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_setMeshAtPos(self, *args)

    def destroyMeshAtPos(self, *args):
        """
        destroyMeshAtPos(self, int i)

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_destroyMeshAtPos(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDFileMeshes
        __init__(self, char fileName) -> MEDFileMeshes

        1
        """
        this = _ParaMEDMEM.new_MEDFileMeshes(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileMeshes___str__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> MEDFileMesh

        1
        """
        return _ParaMEDMEM.MEDFileMeshes___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, int obj, MEDFileMesh mesh) -> MEDFileMeshes

        1
        """
        return _ParaMEDMEM.MEDFileMeshes___setitem__(self, *args)

    def __iter__(self):
        """
        __iter__(self) -> MEDFileMeshesIterator

        1
        """
        return _ParaMEDMEM.MEDFileMeshes___iter__(self)

    def getMeshAtPos(self, *args):
        """
        getMeshAtPos(self, int i) -> MEDFileMesh

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_getMeshAtPos(self, *args)

    def getMeshWithName(self, *args):
        """
        getMeshWithName(self, char mname) -> MEDFileMesh

        1
        """
        return _ParaMEDMEM.MEDFileMeshes_getMeshWithName(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileMeshes
    __del__ = lambda self : None;
MEDFileMeshes_swigregister = _ParaMEDMEM.MEDFileMeshes_swigregister
MEDFileMeshes_swigregister(MEDFileMeshes)

def MEDFileMeshes_New(*args):
  """
    New() -> MEDFileMeshes
    MEDFileMeshes_New(char fileName) -> MEDFileMeshes

    1
    """
  return _ParaMEDMEM.MEDFileMeshes_New(*args)

class MEDFileFieldLoc(RefCountObject):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileFieldLoc, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileFieldLoc, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self):
        """
        getName(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getName(self)

    def getDimension(self):
        """
        getDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getDimension(self)

    def getNumberOfGaussPoints(self):
        """
        getNumberOfGaussPoints(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getNumberOfGaussPoints(self)

    def getNumberOfPointsInCells(self):
        """
        getNumberOfPointsInCells(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getNumberOfPointsInCells(self)

    def getRefCoords(self):
        """
        getRefCoords(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getRefCoords(self)

    def getGaussCoords(self):
        """
        getGaussCoords(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getGaussCoords(self)

    def getGaussWeights(self):
        """
        getGaussWeights(self) -> dvec

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_getGaussWeights(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDFileFieldLoc other, double eps) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc_isEqual(self, *args)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldLoc___str__(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileFieldLoc
    __del__ = lambda self : None;
MEDFileFieldLoc_swigregister = _ParaMEDMEM.MEDFileFieldLoc_swigregister
MEDFileFieldLoc_swigregister(MEDFileFieldLoc)

class MEDFileFieldGlobsReal(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileFieldGlobsReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileFieldGlobsReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def shallowCpyGlobs(self, *args):
        """
        shallowCpyGlobs(self, MEDFileFieldGlobsReal other)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_shallowCpyGlobs(self, *args)

    def getPfls(self):
        """
        getPfls(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getPfls(self)

    def getLocs(self):
        """
        getLocs(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getLocs(self)

    def existsPfl(self, *args):
        """
        existsPfl(self, char pflName) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_existsPfl(self, *args)

    def existsLoc(self, *args):
        """
        existsLoc(self, char locName) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_existsLoc(self, *args)

    def createNewNameOfPfl(self):
        """
        createNewNameOfPfl(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_createNewNameOfPfl(self)

    def createNewNameOfLoc(self):
        """
        createNewNameOfLoc(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_createNewNameOfLoc(self)

    def whichAreEqualProfiles(self):
        """
        whichAreEqualProfiles(self) -> std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)>

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_whichAreEqualProfiles(self)

    def whichAreEqualLocs(self, *args):
        """
        whichAreEqualLocs(self, double eps) -> std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)>

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_whichAreEqualLocs(self, *args)

    def getPflsReallyUsed(self):
        """
        getPflsReallyUsed(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getPflsReallyUsed(self)

    def getLocsReallyUsed(self):
        """
        getLocsReallyUsed(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getLocsReallyUsed(self)

    def getPflsReallyUsedMulti(self):
        """
        getPflsReallyUsedMulti(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getPflsReallyUsedMulti(self)

    def getLocsReallyUsedMulti(self):
        """
        getLocsReallyUsedMulti(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getLocsReallyUsedMulti(self)

    def killProfileIds(self, *args):
        """
        killProfileIds(self, ivec pflIds)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_killProfileIds(self, *args)

    def killLocalizationIds(self, *args):
        """
        killLocalizationIds(self, ivec locIds)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_killLocalizationIds(self, *args)

    def changePflName(self, *args):
        """
        changePflName(self, char oldName, char newName)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changePflName(self, *args)

    def changeLocName(self, *args):
        """
        changeLocName(self, char oldName, char newName)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changeLocName(self, *args)

    def getNbOfGaussPtPerCell(self, *args):
        """
        getNbOfGaussPtPerCell(self, int locId) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getNbOfGaussPtPerCell(self, *args)

    def getLocalizationId(self, *args):
        """
        getLocalizationId(self, char loc) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getLocalizationId(self, *args)

    def getProfile(self, *args):
        """
        getProfile(self, char pflName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getProfile(self, *args)

    def getProfileFromId(self, *args):
        """
        getProfileFromId(self, int pflId) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getProfileFromId(self, *args)

    def getLocalizationFromId(self, *args):
        """
        getLocalizationFromId(self, int locId) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getLocalizationFromId(self, *args)

    def getLocalization(self, *args):
        """
        getLocalization(self, char locName) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_getLocalization(self, *args)

    def zipPflsNames(self):
        """
        zipPflsNames(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_zipPflsNames(self)

    def zipLocsNames(self, *args):
        """
        zipLocsNames(self, double eps) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_zipLocsNames(self, *args)

    def changePflsNames(self, *args):
        """
        changePflsNames(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changePflsNames(self, *args)

    def changePflsRefsNamesGen(self, *args):
        """
        changePflsRefsNamesGen(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changePflsRefsNamesGen(self, *args)

    def changePflsNamesInStruct(self, *args):
        """
        changePflsNamesInStruct(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changePflsNamesInStruct(self, *args)

    def changeLocsNames(self, *args):
        """
        changeLocsNames(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changeLocsNames(self, *args)

    def changeLocsRefsNamesGen(self, *args):
        """
        changeLocsRefsNamesGen(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changeLocsRefsNamesGen(self, *args)

    def changeLocsNamesInStruct(self, *args):
        """
        changeLocsNamesInStruct(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldGlobsReal_changeLocsNamesInStruct(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileFieldGlobsReal
    __del__ = lambda self : None;
MEDFileFieldGlobsReal_swigregister = _ParaMEDMEM.MEDFileFieldGlobsReal_swigregister
MEDFileFieldGlobsReal_swigregister(MEDFileFieldGlobsReal)

class MEDFileField1TS(RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileField1TS, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileField1TS, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(char fileName, char fieldName, int iteration, int order) -> MEDFileField1TS
        New() -> MEDFileField1TS

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_write(self, *args)

    def getFieldAtLevel(self, *args):
        """
        getFieldAtLevel(self, TypeOfField type, int meshDimRelToMax, int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldAtLevel(self, TypeOfField type, int meshDimRelToMax) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldAtLevel(self, *args)

    def getFieldAtTopLevel(self, *args):
        """
        getFieldAtTopLevel(self, TypeOfField type, int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldAtTopLevel(self, TypeOfField type) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldAtTopLevel(self, *args)

    def getFieldOnMeshAtLevel(self, *args):
        """
        getFieldOnMeshAtLevel(self, TypeOfField type, MEDCouplingMesh mesh, int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldOnMeshAtLevel(self, TypeOfField type, MEDCouplingMesh mesh) -> MEDCouplingFieldDouble
        getFieldOnMeshAtLevel(self, TypeOfField type, int meshDimRelToMax, MEDFileMesh mesh, 
            int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldOnMeshAtLevel(self, TypeOfField type, int meshDimRelToMax, MEDFileMesh mesh) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldOnMeshAtLevel(self, *args)

    def getFieldAtLevelOld(self, *args):
        """
        getFieldAtLevelOld(self, TypeOfField type, char mname, int meshDimRelToMax, 
            int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldAtLevelOld(self, TypeOfField type, char mname, int meshDimRelToMax) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldAtLevelOld(self, *args)

    def setFieldNoProfileSBT(self, *args):
        """
        setFieldNoProfileSBT(self, MEDCouplingFieldDouble field)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setFieldNoProfileSBT(self, *args)

    def setFieldProfile(self, *args):
        """
        setFieldProfile(self, MEDCouplingFieldDouble field, MEDFileMesh mesh, int meshDimRelToMax, 
            DataArrayInt profile)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setFieldProfile(self, *args)

    def copyTinyInfoFrom(self, *args):
        """
        copyTinyInfoFrom(self, MEDCouplingFieldDouble field)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_copyTinyInfoFrom(self, *args)

    def getDimension(self):
        """
        getDimension(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getDimension(self)

    def getIteration(self):
        """
        getIteration(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getIteration(self)

    def getOrder(self):
        """
        getOrder(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getOrder(self)

    def getName(self):
        """
        getName(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getName(self)

    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setName(self, *args)

    def getMeshName(self):
        """
        getMeshName(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getMeshName(self)

    def setMeshName(self, *args):
        """
        setMeshName(self, char newMeshName)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setMeshName(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getNumberOfComponents(self)

    def isDealingTS(self, *args):
        """
        isDealingTS(self, int iteration, int order) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_isDealingTS(self, *args)

    def getInfo(self):
        """
        getInfo(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getInfo(self)

    def setTime(self, *args):
        """
        setTime(self, int iteration, int order, double val)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setTime(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, char fileName, char fieldName, int iteration, int order) -> MEDFileField1TS
        __init__(self) -> MEDFileField1TS

        1
        """
        this = _ParaMEDMEM.new_MEDFileField1TS(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileField1TS___str__(self)

    def getFieldWithProfile(self, *args):
        """
        getFieldWithProfile(self, TypeOfField type, int meshDimRelToMax, MEDFileMesh mesh) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldWithProfile(self, *args)

    def setProfileNameOnLeaf(self, *args):
        """
        setProfileNameOnLeaf(self, char mName, NormalizedCellType typ, int locId, char newPflName, 
            bool forceRenameOnGlob = False)
        setProfileNameOnLeaf(self, char mName, NormalizedCellType typ, int locId, char newPflName)
        setProfileNameOnLeaf(self, NormalizedCellType typ, int locId, char newPflName, 
            bool forceRenameOnGlob = False)
        setProfileNameOnLeaf(self, NormalizedCellType typ, int locId, char newPflName)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setProfileNameOnLeaf(self, *args)

    def setLocNameOnLeaf(self, *args):
        """
        setLocNameOnLeaf(self, char mName, NormalizedCellType typ, int locId, char newLocName, 
            bool forceRenameOnGlob = False)
        setLocNameOnLeaf(self, char mName, NormalizedCellType typ, int locId, char newLocName)
        setLocNameOnLeaf(self, NormalizedCellType typ, int locId, char newLocName, 
            bool forceRenameOnGlob = False)
        setLocNameOnLeaf(self, NormalizedCellType typ, int locId, char newLocName)

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_setLocNameOnLeaf(self, *args)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getTime(self)

    def getDtIt(self):
        """
        getDtIt(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getDtIt(self)

    def getTypesOfFieldAvailable(self):
        """
        getTypesOfFieldAvailable(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getTypesOfFieldAvailable(self)

    def getNonEmptyLevels(self, mname = None):
        """
        getNonEmptyLevels(self, char mname = None) -> PyObject
        getNonEmptyLevels(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getNonEmptyLevels(self, mname)

    def getFieldSplitedByType(self, mname = None):
        """
        getFieldSplitedByType(self, char mname = None) -> PyObject
        getFieldSplitedByType(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldSplitedByType(self, mname)

    def getFieldSplitedByType2(self, mname = None):
        """
        getFieldSplitedByType2(self, char mname = None) -> PyObject
        getFieldSplitedByType2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getFieldSplitedByType2(self, mname)

    def getUndergroundDataArray(self):
        """
        getUndergroundDataArray(self) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getUndergroundDataArray(self)

    def getUndergroundDataArrayExt(self):
        """
        getUndergroundDataArrayExt(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_getUndergroundDataArrayExt(self)

    def changeMeshNames(self, *args):
        """
        changeMeshNames(self, PyObject li) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileField1TS_changeMeshNames(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileField1TS
    __del__ = lambda self : None;
MEDFileField1TS_swigregister = _ParaMEDMEM.MEDFileField1TS_swigregister
MEDFileField1TS_swigregister(MEDFileField1TS)

def MEDFileField1TS_New(*args):
  """
    New(char fileName, char fieldName, int iteration, int order) -> MEDFileField1TS
    MEDFileField1TS_New() -> MEDFileField1TS

    1
    """
  return _ParaMEDMEM.MEDFileField1TS_New(*args)

class MEDFileFieldMultiTSIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileFieldMultiTSIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileFieldMultiTSIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTSIterator_next(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileFieldMultiTSIterator
    __del__ = lambda self : None;
MEDFileFieldMultiTSIterator_swigregister = _ParaMEDMEM.MEDFileFieldMultiTSIterator_swigregister
MEDFileFieldMultiTSIterator_swigregister(MEDFileFieldMultiTSIterator)

class MEDFileFieldMultiTS(RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileFieldMultiTS, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileFieldMultiTS, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDFileFieldMultiTS
        New(char fileName) -> MEDFileFieldMultiTS
        New(char fileName, char fieldName) -> MEDFileFieldMultiTS

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def getTimeStepAtPos(self, *args):
        """
        getTimeStepAtPos(self, int pos) -> MEDFileField1TS

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTimeStepAtPos(self, *args)

    def getTimeStep(self, *args):
        """
        getTimeStep(self, int iteration, int order) -> MEDFileField1TS

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTimeStep(self, *args)

    def getTimeStepGivenTime(self, *args):
        """
        getTimeStepGivenTime(self, double time, double eps = 1e-8) -> MEDFileField1TS
        getTimeStepGivenTime(self, double time) -> MEDFileField1TS

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTimeStepGivenTime(self, *args)

    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_write(self, *args)

    def getFieldAtLevel(self, *args):
        """
        getFieldAtLevel(self, TypeOfField type, int iteration, int order, int meshDimRelToMax, 
            int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldAtLevel(self, TypeOfField type, int iteration, int order, int meshDimRelToMax) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldAtLevel(self, *args)

    def getFieldAtTopLevel(self, *args):
        """
        getFieldAtTopLevel(self, TypeOfField type, int iteration, int order, int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldAtTopLevel(self, TypeOfField type, int iteration, int order) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldAtTopLevel(self, *args)

    def getFieldOnMeshAtLevel(self, *args):
        """
        getFieldOnMeshAtLevel(self, TypeOfField type, int iteration, int order, int meshDimRelToMax, 
            MEDFileMesh mesh, int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldOnMeshAtLevel(self, TypeOfField type, int iteration, int order, int meshDimRelToMax, 
            MEDFileMesh mesh) -> MEDCouplingFieldDouble
        getFieldOnMeshAtLevel(self, TypeOfField type, int iteration, int order, MEDCouplingMesh mesh, 
            int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldOnMeshAtLevel(self, TypeOfField type, int iteration, int order, MEDCouplingMesh mesh) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldOnMeshAtLevel(self, *args)

    def getFieldAtLevelOld(self, *args):
        """
        getFieldAtLevelOld(self, TypeOfField type, char mname, int iteration, int order, 
            int meshDimRelToMax, int renumPol = 0) -> MEDCouplingFieldDouble
        getFieldAtLevelOld(self, TypeOfField type, char mname, int iteration, int order, 
            int meshDimRelToMax) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldAtLevelOld(self, *args)

    def appendFieldNoProfileSBT(self, *args):
        """
        appendFieldNoProfileSBT(self, MEDCouplingFieldDouble field)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_appendFieldNoProfileSBT(self, *args)

    def appendFieldProfile(self, *args):
        """
        appendFieldProfile(self, MEDCouplingFieldDouble field, MEDFileMesh mesh, int meshDimRelToMax, 
            DataArrayInt profile)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_appendFieldProfile(self, *args)

    def getNumberOfTS(self):
        """
        getNumberOfTS(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getNumberOfTS(self)

    def eraseEmptyTS(self):
        """
        eraseEmptyTS(self)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_eraseEmptyTS(self)

    def getPosOfTimeStep(self, *args):
        """
        getPosOfTimeStep(self, int iteration, int order) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getPosOfTimeStep(self, *args)

    def getPosGivenTime(self, *args):
        """
        getPosGivenTime(self, double time, double eps = 1e-8) -> int
        getPosGivenTime(self, double time) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getPosGivenTime(self, *args)

    def getName(self):
        """
        getName(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getName(self)

    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_setName(self, *args)

    def getMeshName(self):
        """
        getMeshName(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getMeshName(self)

    def setMeshName(self, *args):
        """
        setMeshName(self, char newMeshName)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_setMeshName(self, *args)

    def getInfo(self):
        """
        getInfo(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getInfo(self)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDFileFieldMultiTS
        __init__(self, char fileName) -> MEDFileFieldMultiTS
        __init__(self, char fileName, char fieldName) -> MEDFileFieldMultiTS

        1
        """
        this = _ParaMEDMEM.new_MEDFileFieldMultiTS(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS___str__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject elt0) -> MEDFileField1TS

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS___getitem__(self, *args)

    def __iter__(self):
        """
        __iter__(self) -> MEDFileFieldMultiTSIterator

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS___iter__(self)

    def getFieldWithProfile(self, *args):
        """
        getFieldWithProfile(self, TypeOfField type, int iteration, int order, int meshDimRelToMax, 
            MEDFileMesh mesh) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldWithProfile(self, *args)

    def getIterations(self):
        """
        getIterations(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getIterations(self)

    def getTimeSteps(self):
        """
        getTimeSteps(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTimeSteps(self)

    def getTypesOfFieldAvailable(self):
        """
        getTypesOfFieldAvailable(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTypesOfFieldAvailable(self)

    def getNonEmptyLevels(self, *args):
        """
        getNonEmptyLevels(self, int iteration, int order, char mname = None) -> PyObject
        getNonEmptyLevels(self, int iteration, int order) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getNonEmptyLevels(self, *args)

    def getFieldSplitedByType(self, *args):
        """
        getFieldSplitedByType(self, int iteration, int order, char mname = None) -> PyObject
        getFieldSplitedByType(self, int iteration, int order) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldSplitedByType(self, *args)

    def getFieldSplitedByType2(self, *args):
        """
        getFieldSplitedByType2(self, int iteration, int order, char mname = None) -> PyObject
        getFieldSplitedByType2(self, int iteration, int order) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getFieldSplitedByType2(self, *args)

    def getUndergroundDataArray(self, *args):
        """
        getUndergroundDataArray(self, int iteration, int order) -> DataArrayDouble

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getUndergroundDataArray(self, *args)

    def getUndergroundDataArrayExt(self, *args):
        """
        getUndergroundDataArrayExt(self, int iteration, int order) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getUndergroundDataArrayExt(self, *args)

    def getTimeId(self, *args):
        """
        getTimeId(self, PyObject elt0) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTimeId(self, *args)

    def getTimeIds(self, *args):
        """
        getTimeIds(self, PyObject elts) -> ivec

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_getTimeIds(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, PyObject elts)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS___delitem__(self, *args)

    def eraseTimeStepIds(self, *args):
        """
        eraseTimeStepIds(self, PyObject li)

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_eraseTimeStepIds(self, *args)

    def changeMeshNames(self, *args):
        """
        changeMeshNames(self, PyObject li) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileFieldMultiTS_changeMeshNames(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileFieldMultiTS
    __del__ = lambda self : None;
MEDFileFieldMultiTS_swigregister = _ParaMEDMEM.MEDFileFieldMultiTS_swigregister
MEDFileFieldMultiTS_swigregister(MEDFileFieldMultiTS)

def MEDFileFieldMultiTS_New(*args):
  """
    New() -> MEDFileFieldMultiTS
    New(char fileName) -> MEDFileFieldMultiTS
    MEDFileFieldMultiTS_New(char fileName, char fieldName) -> MEDFileFieldMultiTS

    1
    """
  return _ParaMEDMEM.MEDFileFieldMultiTS_New(*args)

class MEDFileFieldsIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileFieldsIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileFieldsIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _ParaMEDMEM.MEDFileFieldsIterator_next(self)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileFieldsIterator
    __del__ = lambda self : None;
MEDFileFieldsIterator_swigregister = _ParaMEDMEM.MEDFileFieldsIterator_swigregister
MEDFileFieldsIterator_swigregister(MEDFileFieldsIterator)

class MEDFileFields(RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileFields, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileFieldGlobsReal,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileFields, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDFileFields
        New(char fileName) -> MEDFileFields

        1
        """
        return _ParaMEDMEM.MEDFileFields_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileFields_write(self, *args)

    def getNumberOfFields(self):
        """
        getNumberOfFields(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileFields_getNumberOfFields(self)

    def getFieldsNames(self):
        """
        getFieldsNames(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFields_getFieldsNames(self)

    def getMeshesNames(self):
        """
        getMeshesNames(self) -> svec

        1
        """
        return _ParaMEDMEM.MEDFileFields_getMeshesNames(self)

    def resize(self, *args):
        """
        resize(self, int newSize)

        1
        """
        return _ParaMEDMEM.MEDFileFields_resize(self, *args)

    def pushField(self, *args):
        """
        pushField(self, MEDFileFieldMultiTS field)

        1
        """
        return _ParaMEDMEM.MEDFileFields_pushField(self, *args)

    def setFieldAtPos(self, *args):
        """
        setFieldAtPos(self, int i, MEDFileFieldMultiTS field)

        1
        """
        return _ParaMEDMEM.MEDFileFields_setFieldAtPos(self, *args)

    def getFieldAtPos(self, *args):
        """
        getFieldAtPos(self, int i) -> MEDFileFieldMultiTS

        1
        """
        return _ParaMEDMEM.MEDFileFields_getFieldAtPos(self, *args)

    def getFieldWithName(self, *args):
        """
        getFieldWithName(self, char fieldName) -> MEDFileFieldMultiTS

        1
        """
        return _ParaMEDMEM.MEDFileFields_getFieldWithName(self, *args)

    def destroyFieldAtPos(self, *args):
        """
        destroyFieldAtPos(self, int i)

        1
        """
        return _ParaMEDMEM.MEDFileFields_destroyFieldAtPos(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDFileFields
        __init__(self, char fileName) -> MEDFileFields

        1
        """
        this = _ParaMEDMEM.new_MEDFileFields(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileFields___str__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> MEDFileFieldMultiTS

        1
        """
        return _ParaMEDMEM.MEDFileFields___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, int obj, MEDFileFieldMultiTS field) -> MEDFileFields

        1
        """
        return _ParaMEDMEM.MEDFileFields___setitem__(self, *args)

    def __iter__(self):
        """
        __iter__(self) -> MEDFileFieldsIterator

        1
        """
        return _ParaMEDMEM.MEDFileFields___iter__(self)

    def changeMeshNames(self, *args):
        """
        changeMeshNames(self, PyObject li) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileFields_changeMeshNames(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileFields
    __del__ = lambda self : None;
MEDFileFields_swigregister = _ParaMEDMEM.MEDFileFields_swigregister
MEDFileFields_swigregister(MEDFileFields)

def MEDFileFields_New(*args):
  """
    New() -> MEDFileFields
    MEDFileFields_New(char fileName) -> MEDFileFields

    1
    """
  return _ParaMEDMEM.MEDFileFields_New(*args)

class MEDFileData(RefCountObject,MEDFileWritable):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFileData, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,MEDFileWritable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFileData, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(char fileName) -> MEDFileData
        New() -> MEDFileData

        1
        """
        return _ParaMEDMEM.MEDFileData_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setFields(self, *args):
        """
        setFields(self, MEDFileFields fields)

        1
        """
        return _ParaMEDMEM.MEDFileData_setFields(self, *args)

    def setMeshes(self, *args):
        """
        setMeshes(self, MEDFileMeshes meshes)

        1
        """
        return _ParaMEDMEM.MEDFileData_setMeshes(self, *args)

    def getNumberOfFields(self):
        """
        getNumberOfFields(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileData_getNumberOfFields(self)

    def getNumberOfMeshes(self):
        """
        getNumberOfMeshes(self) -> int

        1
        """
        return _ParaMEDMEM.MEDFileData_getNumberOfMeshes(self)

    def changeMeshName(self, *args):
        """
        changeMeshName(self, char oldMeshName, char newMeshName) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileData_changeMeshName(self, *args)

    def unPolyzeMeshes(self):
        """
        unPolyzeMeshes(self) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileData_unPolyzeMeshes(self)

    def write(self, *args):
        """
        write(self, char fileName, int mode)

        1
        """
        return _ParaMEDMEM.MEDFileData_write(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, char fileName) -> MEDFileData
        __init__(self) -> MEDFileData

        1
        """
        this = _ParaMEDMEM.new_MEDFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _ParaMEDMEM.MEDFileData___str__(self)

    def getMeshes(self):
        """
        getMeshes(self) -> MEDFileMeshes

        1
        """
        return _ParaMEDMEM.MEDFileData_getMeshes(self)

    def getFields(self):
        """
        getFields(self) -> MEDFileFields

        1
        """
        return _ParaMEDMEM.MEDFileData_getFields(self)

    def changeMeshNames(self, *args):
        """
        changeMeshNames(self, PyObject li) -> bool

        1
        """
        return _ParaMEDMEM.MEDFileData_changeMeshNames(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_MEDFileData
    __del__ = lambda self : None;
MEDFileData_swigregister = _ParaMEDMEM.MEDFileData_swigregister
MEDFileData_swigregister(MEDFileData)

def MEDFileData_New(*args):
  """
    New(char fileName) -> MEDFileData
    MEDFileData_New() -> MEDFileData

    1
    """
  return _ParaMEDMEM.MEDFileData_New(*args)

class SauvReader(RefCountObject):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SauvReader, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SauvReader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(char fileName) -> SauvReader

        1
        """
        return _ParaMEDMEM.SauvReader_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def loadInMEDFileDS(self):
        """
        loadInMEDFileDS(self) -> MEDFileData

        1
        """
        return _ParaMEDMEM.SauvReader_loadInMEDFileDS(self)

    __swig_destroy__ = _ParaMEDMEM.delete_SauvReader
    __del__ = lambda self : None;
SauvReader_swigregister = _ParaMEDMEM.SauvReader_swigregister
SauvReader_swigregister(SauvReader)

def SauvReader_New(*args):
  """
    SauvReader_New(char fileName) -> SauvReader

    1
    """
  return _ParaMEDMEM.SauvReader_New(*args)

class SauvWriter(RefCountObject):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SauvWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SauvWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """
        New() -> SauvWriter

        1
        """
        return _ParaMEDMEM.SauvWriter_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setMEDFileDS(self, *args):
        """
        setMEDFileDS(self, MEDFileData medData, unsigned int meshIndex = 0)
        setMEDFileDS(self, MEDFileData medData)

        1
        """
        return _ParaMEDMEM.SauvWriter_setMEDFileDS(self, *args)

    def write(self, *args):
        """
        write(self, char fileName)

        1
        """
        return _ParaMEDMEM.SauvWriter_write(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_SauvWriter
    __del__ = lambda self : None;
SauvWriter_swigregister = _ParaMEDMEM.SauvWriter_swigregister
SauvWriter_swigregister(SauvWriter)

def SauvWriter_New():
  """
    SauvWriter_New() -> SauvWriter

    1
    """
  return _ParaMEDMEM.SauvWriter_New()

class CommInterface(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommInterface, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> CommInterface

        1
        """
        this = _ParaMEDMEM.new_CommInterface()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_CommInterface
    __del__ = lambda self : None;
    def worldSize(self):
        """
        worldSize(self) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_worldSize(self)

    def commSize(self, *args):
        """
        commSize(self, MPI_Comm comm, int size) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_commSize(self, *args)

    def commRank(self, *args):
        """
        commRank(self, MPI_Comm comm, int rank) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_commRank(self, *args)

    def commGroup(self, *args):
        """
        commGroup(self, MPI_Comm comm, MPI_Group group) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_commGroup(self, *args)

    def groupIncl(self, *args):
        """
        groupIncl(self, MPI_Group group, int size, int ranks, MPI_Group group_output) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_groupIncl(self, *args)

    def commCreate(self, *args):
        """
        commCreate(self, MPI_Comm comm, MPI_Group group, MPI_Comm comm_output) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_commCreate(self, *args)

    def groupFree(self, *args):
        """
        groupFree(self, MPI_Group group) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_groupFree(self, *args)

    def commFree(self, *args):
        """
        commFree(self, MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_commFree(self, *args)

    def send(self, *args):
        """
        send(self, void buffer, int count, MPI_Datatype datatype, int target, 
            int tag, MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_send(self, *args)

    def recv(self, *args):
        """
        recv(self, void buffer, int count, MPI_Datatype datatype, int source, 
            int tag, MPI_Comm comm, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_recv(self, *args)

    def sendRecv(self, *args):
        """
        sendRecv(self, void sendbuf, int sendcount, MPI_Datatype sendtype, 
            int dest, int sendtag, void recvbuf, int recvcount, 
            MPI_Datatype recvtype, int source, int recvtag, 
            MPI_Comm comm, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_sendRecv(self, *args)

    def Isend(self, *args):
        """
        Isend(self, void buffer, int count, MPI_Datatype datatype, int target, 
            int tag, MPI_Comm comm, MPI_Request request) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_Isend(self, *args)

    def Irecv(self, *args):
        """
        Irecv(self, void buffer, int count, MPI_Datatype datatype, int source, 
            int tag, MPI_Comm comm, MPI_Request request) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_Irecv(self, *args)

    def wait(self, *args):
        """
        wait(self, MPI_Request request, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_wait(self, *args)

    def test(self, *args):
        """
        test(self, MPI_Request request, int flag, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_test(self, *args)

    def requestFree(self, *args):
        """
        requestFree(self, MPI_Request request) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_requestFree(self, *args)

    def waitany(self, *args):
        """
        waitany(self, int count, MPI_Request array_of_requests, int index, 
            MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_waitany(self, *args)

    def testany(self, *args):
        """
        testany(self, int count, MPI_Request array_of_requests, int index, 
            int flag, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_testany(self, *args)

    def waitall(self, *args):
        """
        waitall(self, int count, MPI_Request array_of_requests, MPI_Status array_of_status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_waitall(self, *args)

    def testall(self, *args):
        """
        testall(self, int count, MPI_Request array_of_requests, int flag, 
            MPI_Status array_of_status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_testall(self, *args)

    def waitsome(self, *args):
        """
        waitsome(self, int incount, MPI_Request array_of_requests, int outcount, 
            int array_of_indices, MPI_Status array_of_status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_waitsome(self, *args)

    def testsome(self, *args):
        """
        testsome(self, int incount, MPI_Request array_of_requests, int outcount, 
            int array_of_indices, MPI_Status array_of_status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_testsome(self, *args)

    def probe(self, *args):
        """
        probe(self, int source, int tag, MPI_Comm comm, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_probe(self, *args)

    def Iprobe(self, *args):
        """
        Iprobe(self, int source, int tag, MPI_Comm comm, int flag, MPI_Status status) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_Iprobe(self, *args)

    def cancel(self, *args):
        """
        cancel(self, MPI_Request request) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_cancel(self, *args)

    def testCancelled(self, *args):
        """
        testCancelled(self, MPI_Status status, int flag) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_testCancelled(self, *args)

    def barrier(self, *args):
        """
        barrier(self, MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_barrier(self, *args)

    def errorString(self, *args):
        """
        errorString(self, int errorcode, char string, int resultlen) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_errorString(self, *args)

    def getCount(self, *args):
        """
        getCount(self, MPI_Status status, MPI_Datatype datatype, int count) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_getCount(self, *args)

    def broadcast(self, *args):
        """
        broadcast(self, void buffer, int count, MPI_Datatype datatype, int root, 
            MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_broadcast(self, *args)

    def allGather(self, *args):
        """
        allGather(self, void sendbuf, int sendcount, MPI_Datatype sendtype, 
            void recvbuf, int recvcount, MPI_Datatype recvtype, 
            MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_allGather(self, *args)

    def allToAll(self, *args):
        """
        allToAll(self, void sendbuf, int sendcount, MPI_Datatype sendtype, 
            void recvbuf, int recvcount, MPI_Datatype recvtype, 
            MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_allToAll(self, *args)

    def allToAllV(self, *args):
        """
        allToAllV(self, void sendbuf, int sendcounts, int senddispls, MPI_Datatype sendtype, 
            void recvbuf, int recvcounts, 
            int recvdispls, MPI_Datatype recvtype, MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_allToAllV(self, *args)

    def reduce(self, *args):
        """
        reduce(self, void sendbuf, void recvbuf, int count, MPI_Datatype datatype, 
            MPI_Op op, int root, MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_reduce(self, *args)

    def allReduce(self, *args):
        """
        allReduce(self, void sendbuf, void recvbuf, int count, MPI_Datatype datatype, 
            MPI_Op op, MPI_Comm comm) -> int

        1
        """
        return _ParaMEDMEM.CommInterface_allReduce(self, *args)

CommInterface_swigregister = _ParaMEDMEM.CommInterface_swigregister
CommInterface_swigregister(CommInterface)

class ProcessorGroup(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessorGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessorGroup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ParaMEDMEM.delete_ProcessorGroup
    __del__ = lambda self : None;
    def deepCpy(self):
        """
        deepCpy(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.ProcessorGroup_deepCpy(self)

    def fuse(self, *args):
        """
        fuse(self, ProcessorGroup arg0) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.ProcessorGroup_fuse(self, *args)

    def intersect(self, *args):
        """
        intersect(self, ProcessorGroup arg0)

        1
        """
        return _ParaMEDMEM.ProcessorGroup_intersect(self, *args)

    def contains(self, *args):
        """
        contains(self, int rank) -> bool

        1
        """
        return _ParaMEDMEM.ProcessorGroup_contains(self, *args)

    def containsMyRank(self):
        """
        containsMyRank(self) -> bool

        1
        """
        return _ParaMEDMEM.ProcessorGroup_containsMyRank(self)

    def size(self):
        """
        size(self) -> int

        1
        """
        return _ParaMEDMEM.ProcessorGroup_size(self)

    def getCommInterface(self):
        """
        getCommInterface(self) -> CommInterface

        1
        """
        return _ParaMEDMEM.ProcessorGroup_getCommInterface(self)

    def myRank(self):
        """
        myRank(self) -> int

        1
        """
        return _ParaMEDMEM.ProcessorGroup_myRank(self)

    def translateRank(self, *args):
        """
        translateRank(self, ProcessorGroup arg0, int arg1) -> int

        1
        """
        return _ParaMEDMEM.ProcessorGroup_translateRank(self, *args)

    def createComplementProcGroup(self):
        """
        createComplementProcGroup(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.ProcessorGroup_createComplementProcGroup(self)

    def createProcGroup(self):
        """
        createProcGroup(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.ProcessorGroup_createProcGroup(self)

    def getProcIDs(self):
        """
        getProcIDs(self) -> __dummy_0__

        1
        """
        return _ParaMEDMEM.ProcessorGroup_getProcIDs(self)

ProcessorGroup_swigregister = _ParaMEDMEM.ProcessorGroup_swigregister
ProcessorGroup_swigregister(ProcessorGroup)

Native = _ParaMEDMEM.Native
PointToPoint = _ParaMEDMEM.PointToPoint
WithoutTimeInterp = _ParaMEDMEM.WithoutTimeInterp
LinearTimeInterp = _ParaMEDMEM.LinearTimeInterp
class DECOptions(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DECOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DECOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DECOptions
        __init__(self, DECOptions deco) -> DECOptions

        1
        """
        this = _ParaMEDMEM.new_DECOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMethod(self):
        """
        getMethod(self) -> string

        1
        """
        return _ParaMEDMEM.DECOptions_getMethod(self)

    def setMethod(self, *args):
        """
        setMethod(self, char m)

        1
        """
        return _ParaMEDMEM.DECOptions_setMethod(self, *args)

    def getTimeInterpolationMethod(self):
        """
        getTimeInterpolationMethod(self) -> TimeInterpolationMethod

        1
        """
        return _ParaMEDMEM.DECOptions_getTimeInterpolationMethod(self)

    def setTimeInterpolationMethod(self, *args):
        """
        setTimeInterpolationMethod(self, TimeInterpolationMethod it)

        1
        """
        return _ParaMEDMEM.DECOptions_setTimeInterpolationMethod(self, *args)

    def getForcedRenormalization(self):
        """
        getForcedRenormalization(self) -> bool

        1
        """
        return _ParaMEDMEM.DECOptions_getForcedRenormalization(self)

    def setForcedRenormalization(self, *args):
        """
        setForcedRenormalization(self, bool dr)

        1
        """
        return _ParaMEDMEM.DECOptions_setForcedRenormalization(self, *args)

    def getAsynchronous(self):
        """
        getAsynchronous(self) -> bool

        1
        """
        return _ParaMEDMEM.DECOptions_getAsynchronous(self)

    def setAsynchronous(self, *args):
        """
        setAsynchronous(self, bool dr)

        1
        """
        return _ParaMEDMEM.DECOptions_setAsynchronous(self, *args)

    def getAllToAllMethod(self):
        """
        getAllToAllMethod(self) -> AllToAllMethod

        1
        """
        return _ParaMEDMEM.DECOptions_getAllToAllMethod(self)

    def setAllToAllMethod(self, *args):
        """
        setAllToAllMethod(self, AllToAllMethod sp)

        1
        """
        return _ParaMEDMEM.DECOptions_setAllToAllMethod(self, *args)

    __swig_destroy__ = _ParaMEDMEM.delete_DECOptions
    __del__ = lambda self : None;
DECOptions_swigregister = _ParaMEDMEM.DECOptions_swigregister
DECOptions_swigregister(DECOptions)

class ParaMESH(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParaMESH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParaMESH, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingPointSet subdomain_mesh, MEDCouplingPointSet subdomain_face, 
            DataArrayInt CorrespElt_local2global, 
            DataArrayInt CorrespFace_local2global, 
            DataArrayInt CorrespNod_local2global, 
            ProcessorGroup proc_group) -> ParaMESH
        __init__(self, MEDCouplingPointSet mesh, ProcessorGroup proc_group, 
            string name) -> ParaMESH

        1
        """
        this = _ParaMEDMEM.new_ParaMESH(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_ParaMESH
    __del__ = lambda self : None;
    def setNodeGlobal(self, *args):
        """
        setNodeGlobal(self, DataArrayInt nodeGlobal)

        1
        """
        return _ParaMEDMEM.ParaMESH_setNodeGlobal(self, *args)

    def setCellGlobal(self, *args):
        """
        setCellGlobal(self, DataArrayInt cellGlobal)

        1
        """
        return _ParaMEDMEM.ParaMESH_setCellGlobal(self, *args)

    def getTopology(self):
        """
        getTopology(self) -> Topology

        1
        """
        return _ParaMEDMEM.ParaMESH_getTopology(self)

    def isStructured(self):
        """
        isStructured(self) -> bool

        1
        """
        return _ParaMEDMEM.ParaMESH_isStructured(self)

    def getCellMesh(self):
        """
        getCellMesh(self) -> MEDCouplingPointSet

        1
        """
        return _ParaMEDMEM.ParaMESH_getCellMesh(self)

    def getFaceMesh(self):
        """
        getFaceMesh(self) -> MEDCouplingPointSet

        1
        """
        return _ParaMEDMEM.ParaMESH_getFaceMesh(self)

    def getBlockTopology(self):
        """
        getBlockTopology(self) -> BlockTopology

        1
        """
        return _ParaMEDMEM.ParaMESH_getBlockTopology(self)

    def getGlobalNumberingNodeDA(self):
        """
        getGlobalNumberingNodeDA(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingNodeDA(self)

    def getGlobalNumberingFaceDA(self):
        """
        getGlobalNumberingFaceDA(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingFaceDA(self)

    def getGlobalNumberingCellDA(self):
        """
        getGlobalNumberingCellDA(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingCellDA(self)

    def getGlobalNumberingNode(self):
        """
        getGlobalNumberingNode(self) -> int

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingNode(self)

    def getGlobalNumberingFace(self):
        """
        getGlobalNumberingFace(self) -> int

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingFace(self)

    def getGlobalNumberingCell(self):
        """
        getGlobalNumberingCell(self) -> int

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingCell(self)

    def getGlobalNumberingCell2(self):
        """
        getGlobalNumberingCell2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingCell2(self)

    def getGlobalNumberingFace2(self):
        """
        getGlobalNumberingFace2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingFace2(self)

    def getGlobalNumberingNode2(self):
        """
        getGlobalNumberingNode2(self) -> PyObject

        1
        """
        return _ParaMEDMEM.ParaMESH_getGlobalNumberingNode2(self)

ParaMESH_swigregister = _ParaMEDMEM.ParaMESH_swigregister
ParaMESH_swigregister(ParaMESH)

class ParaFIELD(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParaFIELD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParaFIELD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TypeOfField type, TypeOfTimeDiscretization td, ParaMESH mesh, 
            ComponentTopology component_topology) -> ParaFIELD
        __init__(self, MEDCouplingFieldDouble field, ParaMESH sup, ProcessorGroup group) -> ParaFIELD

        1
        """
        this = _ParaMEDMEM.new_ParaFIELD(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_ParaFIELD
    __del__ = lambda self : None;
    def synchronizeTarget(self, *args):
        """
        synchronizeTarget(self, ParaFIELD source_field)

        1
        """
        return _ParaMEDMEM.ParaFIELD_synchronizeTarget(self, *args)

    def synchronizeSource(self, *args):
        """
        synchronizeSource(self, ParaFIELD target_field)

        1
        """
        return _ParaMEDMEM.ParaFIELD_synchronizeSource(self, *args)

    def getField(self):
        """
        getField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.ParaFIELD_getField(self)

    def setOwnSupport(self, *args):
        """
        setOwnSupport(self, bool v)

        1
        """
        return _ParaMEDMEM.ParaFIELD_setOwnSupport(self, *args)

    def returnCumulativeGlobalNumbering(self):
        """
        returnCumulativeGlobalNumbering(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.ParaFIELD_returnCumulativeGlobalNumbering(self)

    def returnGlobalNumbering(self):
        """
        returnGlobalNumbering(self) -> DataArrayInt

        1
        """
        return _ParaMEDMEM.ParaFIELD_returnGlobalNumbering(self)

    def getTopology(self):
        """
        getTopology(self) -> Topology

        1
        """
        return _ParaMEDMEM.ParaFIELD_getTopology(self)

    def getSupport(self):
        """
        getSupport(self) -> ParaMESH

        1
        """
        return _ParaMEDMEM.ParaFIELD_getSupport(self)

    def nbComponents(self):
        """
        nbComponents(self) -> int

        1
        """
        return _ParaMEDMEM.ParaFIELD_nbComponents(self)

    def getVolumeIntegral(self, *args):
        """
        getVolumeIntegral(self, int icomp, bool isWAbs) -> double

        1
        """
        return _ParaMEDMEM.ParaFIELD_getVolumeIntegral(self, *args)

    def getL2Norm(self):
        """
        getL2Norm(self) -> double

        1
        """
        return _ParaMEDMEM.ParaFIELD_getL2Norm(self)

ParaFIELD_swigregister = _ParaMEDMEM.ParaFIELD_swigregister
ParaFIELD_swigregister(ParaFIELD)

class MPIProcessorGroup(ProcessorGroup):
    """1"""
    __swig_setmethods__ = {}
    for _s in [ProcessorGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPIProcessorGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessorGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MPIProcessorGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, CommInterface interface) -> MPIProcessorGroup
        __init__(self, CommInterface interface, __dummy_0__ proc_ids, MPI_Comm world_comm = MPI_COMM_WORLD) -> MPIProcessorGroup
        __init__(self, CommInterface interface, __dummy_0__ proc_ids) -> MPIProcessorGroup
        __init__(self, ProcessorGroup proc_group, __dummy_0__ proc_ids) -> MPIProcessorGroup
        __init__(self, CommInterface interface, int pstart, int pend, MPI_Comm world_comm = MPI_COMM_WORLD) -> MPIProcessorGroup
        __init__(self, CommInterface interface, int pstart, int pend) -> MPIProcessorGroup
        __init__(self, MPIProcessorGroup other) -> MPIProcessorGroup

        1
        """
        this = _ParaMEDMEM.new_MPIProcessorGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_MPIProcessorGroup
    __del__ = lambda self : None;
    def deepCpy(self):
        """
        deepCpy(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_deepCpy(self)

    def fuse(self, *args):
        """
        fuse(self, ProcessorGroup arg0) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_fuse(self, *args)

    def intersect(self, *args):
        """
        intersect(self, ProcessorGroup arg0)

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_intersect(self, *args)

    def myRank(self):
        """
        myRank(self) -> int

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_myRank(self)

    def containsMyRank(self):
        """
        containsMyRank(self) -> bool

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_containsMyRank(self)

    def translateRank(self, *args):
        """
        translateRank(self, ProcessorGroup group, int rank) -> int

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_translateRank(self, *args)

    def getComm(self):
        """
        getComm(self) -> MPI_Comm

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_getComm(self)

    def createComplementProcGroup(self):
        """
        createComplementProcGroup(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_createComplementProcGroup(self)

    def createProcGroup(self):
        """
        createProcGroup(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_createProcGroup(self)

    def getWorldComm(self):
        """
        getWorldComm(self) -> MPI_Comm

        1
        """
        return _ParaMEDMEM.MPIProcessorGroup_getWorldComm(self)

MPIProcessorGroup_swigregister = _ParaMEDMEM.MPIProcessorGroup_swigregister
MPIProcessorGroup_swigregister(MPIProcessorGroup)

class ComponentTopology(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentTopology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentTopology, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int nb_comp, ProcessorGroup group) -> ComponentTopology
        __init__(self, int nb_comp, int nb_blocks) -> ComponentTopology
        __init__(self, int nb_comp) -> ComponentTopology
        __init__(self) -> ComponentTopology

        1
        """
        this = _ParaMEDMEM.new_ComponentTopology(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_ComponentTopology
    __del__ = lambda self : None;
    def nbComponents(self):
        """
        nbComponents(self) -> int

        1
        """
        return _ParaMEDMEM.ComponentTopology_nbComponents(self)

    def nbLocalComponents(self):
        """
        nbLocalComponents(self) -> int

        1
        """
        return _ParaMEDMEM.ComponentTopology_nbLocalComponents(self)

    def firstLocalComponent(self):
        """
        firstLocalComponent(self) -> int

        1
        """
        return _ParaMEDMEM.ComponentTopology_firstLocalComponent(self)

    def nbBlocks(self):
        """
        nbBlocks(self) -> int

        1
        """
        return _ParaMEDMEM.ComponentTopology_nbBlocks(self)

    def getBlockIndices(self):
        """
        getBlockIndices(self) -> ivec

        1
        """
        return _ParaMEDMEM.ComponentTopology_getBlockIndices(self)

    def getProcGroup(self):
        """
        getProcGroup(self) -> ProcessorGroup

        1
        """
        return _ParaMEDMEM.ComponentTopology_getProcGroup(self)

ComponentTopology_swigregister = _ParaMEDMEM.ComponentTopology_swigregister
ComponentTopology_swigregister(ComponentTopology)

class DEC(DECOptions):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DECOptions]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DEC, name, value)
    __swig_getmethods__ = {}
    for _s in [DECOptions]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DEC, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def copyFrom(self, *args):
        """
        copyFrom(self, DEC other)

        1
        """
        return _ParaMEDMEM.DEC_copyFrom(self, *args)

    def synchronize(self):
        """
        synchronize(self)

        1
        """
        return _ParaMEDMEM.DEC_synchronize(self)

    def sendRecvData(self, way = True):
        """
        sendRecvData(self, bool way = True)
        sendRecvData(self)

        1
        """
        return _ParaMEDMEM.DEC_sendRecvData(self, way)

    __swig_destroy__ = _ParaMEDMEM.delete_DEC
    __del__ = lambda self : None;
DEC_swigregister = _ParaMEDMEM.DEC_swigregister
DEC_swigregister(DEC)

class InterpKernelDEC(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpKernelDEC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpKernelDEC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InterpKernelDEC
        __init__(self, ProcessorGroup source_group, ProcessorGroup target_group) -> InterpKernelDEC
        __init__(self, __dummy_0__ src_ids, __dummy_0__ trg_ids, MPI_Comm world_comm = MPI_COMM_WORLD) -> InterpKernelDEC
        __init__(self, __dummy_0__ src_ids, __dummy_0__ trg_ids) -> InterpKernelDEC

        1
        """
        this = _ParaMEDMEM.new_InterpKernelDEC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_InterpKernelDEC
    __del__ = lambda self : None;
    def synchronize(self):
        """
        synchronize(self)

        1
        """
        return _ParaMEDMEM.InterpKernelDEC_synchronize(self)

    def recvData(self, *args):
        """
        recvData(self)
        recvData(self, double time)

        1
        """
        return _ParaMEDMEM.InterpKernelDEC_recvData(self, *args)

    def sendData(self, *args):
        """
        sendData(self)
        sendData(self, double time, double deltatime)

        1
        """
        return _ParaMEDMEM.InterpKernelDEC_sendData(self, *args)

    def prepareSourceDE(self):
        """
        prepareSourceDE(self)

        1
        """
        return _ParaMEDMEM.InterpKernelDEC_prepareSourceDE(self)

    def prepareTargetDE(self):
        """
        prepareTargetDE(self)

        1
        """
        return _ParaMEDMEM.InterpKernelDEC_prepareTargetDE(self)

InterpKernelDEC_swigregister = _ParaMEDMEM.InterpKernelDEC_swigregister
InterpKernelDEC_swigregister(InterpKernelDEC)

class StructuredCoincidentDEC(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructuredCoincidentDEC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructuredCoincidentDEC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StructuredCoincidentDEC
        __init__(self, ProcessorGroup source, ProcessorGroup target) -> StructuredCoincidentDEC

        1
        """
        this = _ParaMEDMEM.new_StructuredCoincidentDEC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_StructuredCoincidentDEC
    __del__ = lambda self : None;
    def synchronize(self):
        """
        synchronize(self)

        1
        """
        return _ParaMEDMEM.StructuredCoincidentDEC_synchronize(self)

    def recvData(self):
        """
        recvData(self)

        1
        """
        return _ParaMEDMEM.StructuredCoincidentDEC_recvData(self)

    def sendData(self):
        """
        sendData(self)

        1
        """
        return _ParaMEDMEM.StructuredCoincidentDEC_sendData(self)

    def prepareSourceDE(self):
        """
        prepareSourceDE(self)

        1
        """
        return _ParaMEDMEM.StructuredCoincidentDEC_prepareSourceDE(self)

    def prepareTargetDE(self):
        """
        prepareTargetDE(self)

        1
        """
        return _ParaMEDMEM.StructuredCoincidentDEC_prepareTargetDE(self)

StructuredCoincidentDEC_swigregister = _ParaMEDMEM.StructuredCoincidentDEC_swigregister
StructuredCoincidentDEC_swigregister(StructuredCoincidentDEC)

class ICoCoMEDField(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICoCoMEDField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICoCoMEDField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        MEDField() -> ICoCoMEDField
        MEDField(MEDCouplingUMesh mesh, MEDCouplingFieldDouble field) -> ICoCoMEDField
        __init__(self, TrioField arg0) -> ICoCoMEDField

        1
        """
        this = _ParaMEDMEM.new_ICoCoMEDField(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ParaMEDMEM.delete_ICoCoMEDField
    __del__ = lambda self : None;
    def getField(self):
        """
        getField(self) -> MEDCouplingFieldDouble

        1
        """
        return _ParaMEDMEM.ICoCoMEDField_getField(self)

    def getMesh(self):
        """
        getMesh(self) -> MEDCouplingUMesh

        1
        """
        return _ParaMEDMEM.ICoCoMEDField_getMesh(self)

ICoCoMEDField_swigregister = _ParaMEDMEM.ICoCoMEDField_swigregister
ICoCoMEDField_swigregister(ICoCoMEDField)

mpi_comm_world = _ParaMEDMEM.mpi_comm_world
mpi_comm_self = _ParaMEDMEM.mpi_comm_self
mpi_double = _ParaMEDMEM.mpi_double
mpi_int = _ParaMEDMEM.mpi_int
MPI_COMM_WORLD = mpi_comm_world
MPI_COMM_SELF  = mpi_comm_self
MPI_DOUBLE     = mpi_double
MPI_INT        = mpi_int


def MPI_Comm_size(*args):
  """
    MPI_Comm_size(MPI_Comm comm) -> PyObject

    1
    """
  return _ParaMEDMEM.MPI_Comm_size(*args)

def MPI_Comm_rank(*args):
  """
    MPI_Comm_rank(MPI_Comm comm) -> PyObject

    1
    """
  return _ParaMEDMEM.MPI_Comm_rank(*args)

def MPI_Init(*args):
  """
    MPI_Init(int argc) -> int

    1
    """
  return _ParaMEDMEM.MPI_Init(*args)

def MPI_Barrier(*args):
  """
    MPI_Barrier(MPI_Comm comm) -> int

    1
    """
  return _ParaMEDMEM.MPI_Barrier(*args)

def MPI_Finalize():
  """
    MPI_Finalize() -> int

    1
    """
  return _ParaMEDMEM.MPI_Finalize()

def MPI_Bcast(*args):
  """
    MPI_Bcast(PyObject buffer, int nb, MPI_Datatype type, int root, 
        MPI_Comm c) -> PyObject

    1
    """
  return _ParaMEDMEM.MPI_Bcast(*args)
def ParaMEDMEMDataArrayDoubleIadd(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayDouble____iadd___(self, self, *args)
def ParaMEDMEMDataArrayDoubleIsub(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayDouble____isub___(self, self, *args)
def ParaMEDMEMDataArrayDoubleImul(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayDouble____imul___(self, self, *args)
def ParaMEDMEMDataArrayDoubleIdiv(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayDouble____idiv___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIadd(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.MEDCouplingFieldDouble____iadd___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIsub(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.MEDCouplingFieldDouble____isub___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleImul(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.MEDCouplingFieldDouble____imul___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIdiv(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.MEDCouplingFieldDouble____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntIadd(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayInt____iadd___(self, self, *args)
def ParaMEDMEMDataArrayIntIsub(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayInt____isub___(self, self, *args)
def ParaMEDMEMDataArrayIntImul(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayInt____imul___(self, self, *args)
def ParaMEDMEMDataArrayIntIdiv(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayInt____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntImod(self,*args):
    import _ParaMEDMEM
    return _ParaMEDMEM.DataArrayInt____imod___(self, self, *args)

DataArrayDouble.__iadd__=ParaMEDMEMDataArrayDoubleIadd
DataArrayDouble.__isub__=ParaMEDMEMDataArrayDoubleIsub
DataArrayDouble.__imul__=ParaMEDMEMDataArrayDoubleImul
DataArrayDouble.__idiv__=ParaMEDMEMDataArrayDoubleIdiv

DataArrayInt.__iadd__=ParaMEDMEMDataArrayIntIadd
DataArrayInt.__isub__=ParaMEDMEMDataArrayIntIsub
DataArrayInt.__imul__=ParaMEDMEMDataArrayIntImul
DataArrayInt.__idiv__=ParaMEDMEMDataArrayIntIdiv
DataArrayInt.__imod__=ParaMEDMEMDataArrayIntImod

MEDCouplingFieldDouble.__iadd__=ParaMEDMEMMEDCouplingFieldDoubleIadd
MEDCouplingFieldDouble.__isub__=ParaMEDMEMMEDCouplingFieldDoubleIsub
MEDCouplingFieldDouble.__imul__=ParaMEDMEMMEDCouplingFieldDoubleImul
MEDCouplingFieldDouble.__idiv__=ParaMEDMEMMEDCouplingFieldDoubleIdiv

DataArrayDoubleTuple.__iadd__=ParaMEDMEMDataArrayDoubleTupleIadd
DataArrayDoubleTuple.__isub__=ParaMEDMEMDataArrayDoubleTupleIsub
DataArrayDoubleTuple.__imul__=ParaMEDMEMDataArrayDoubleTupleImul
DataArrayDoubleTuple.__idiv__=ParaMEDMEMDataArrayDoubleTupleIdiv

DataArrayIntTuple.__iadd__=ParaMEDMEMDataArrayIntTupleIadd
DataArrayIntTuple.__isub__=ParaMEDMEMDataArrayIntTupleIsub
DataArrayIntTuple.__imul__=ParaMEDMEMDataArrayIntTupleImul
DataArrayIntTuple.__idiv__=ParaMEDMEMDataArrayIntTupleIdiv
DataArrayIntTuple.__imod__=ParaMEDMEMDataArrayIntTupleImod

del ParaMEDMEMDataArrayDoubleIadd
del ParaMEDMEMDataArrayDoubleIsub
del ParaMEDMEMDataArrayDoubleImul
del ParaMEDMEMDataArrayDoubleIdiv
del ParaMEDMEMMEDCouplingFieldDoubleIadd
del ParaMEDMEMMEDCouplingFieldDoubleIsub
del ParaMEDMEMMEDCouplingFieldDoubleImul
del ParaMEDMEMMEDCouplingFieldDoubleIdiv
del ParaMEDMEMDataArrayIntIadd
del ParaMEDMEMDataArrayIntIsub
del ParaMEDMEMDataArrayIntImul
del ParaMEDMEMDataArrayIntIdiv
del ParaMEDMEMDataArrayIntImod
del ParaMEDMEMDataArrayDoubleTupleIadd
del ParaMEDMEMDataArrayDoubleTupleIsub
del ParaMEDMEMDataArrayDoubleTupleImul
del ParaMEDMEMDataArrayDoubleTupleIdiv
del ParaMEDMEMDataArrayIntTupleIadd
del ParaMEDMEMDataArrayIntTupleIsub
del ParaMEDMEMDataArrayIntTupleImul
del ParaMEDMEMDataArrayIntTupleIdiv
del ParaMEDMEMDataArrayIntTupleImod



