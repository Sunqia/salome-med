# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MEDCouplingRemapper', [dirname(__file__)])
        except ImportError:
            import _MEDCouplingRemapper
            return _MEDCouplingRemapper
        if fp is not None:
            try:
                _mod = imp.load_module('_MEDCouplingRemapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MEDCouplingRemapper = swig_import_helper()
    del swig_import_helper
else:
    import _MEDCouplingRemapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _MEDCouplingRemapper.SwigPyIterator_value(self)
    def incr(self, n = 1): return _MEDCouplingRemapper.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _MEDCouplingRemapper.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _MEDCouplingRemapper.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _MEDCouplingRemapper.SwigPyIterator_equal(self, *args)
    def copy(self): return _MEDCouplingRemapper.SwigPyIterator_copy(self)
    def next(self): return _MEDCouplingRemapper.SwigPyIterator_next(self)
    def __next__(self): return _MEDCouplingRemapper.SwigPyIterator___next__(self)
    def previous(self): return _MEDCouplingRemapper.SwigPyIterator_previous(self)
    def advance(self, *args): return _MEDCouplingRemapper.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _MEDCouplingRemapper.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _MEDCouplingRemapper.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _MEDCouplingRemapper.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _MEDCouplingRemapper.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _MEDCouplingRemapper.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _MEDCouplingRemapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _MEDCouplingRemapper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr
    def iterator(self): return _MEDCouplingRemapper.ivec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MEDCouplingRemapper.ivec___nonzero__(self)
    def __bool__(self): return _MEDCouplingRemapper.ivec___bool__(self)
    def __len__(self): return _MEDCouplingRemapper.ivec___len__(self)
    def pop(self): return _MEDCouplingRemapper.ivec_pop(self)
    def __getslice__(self, *args): return _MEDCouplingRemapper.ivec___getslice__(self, *args)
    def __setslice__(self, *args): return _MEDCouplingRemapper.ivec___setslice__(self, *args)
    def __delslice__(self, *args): return _MEDCouplingRemapper.ivec___delslice__(self, *args)
    def __delitem__(self, *args): return _MEDCouplingRemapper.ivec___delitem__(self, *args)
    def __getitem__(self, *args): return _MEDCouplingRemapper.ivec___getitem__(self, *args)
    def __setitem__(self, *args): return _MEDCouplingRemapper.ivec___setitem__(self, *args)
    def append(self, *args): return _MEDCouplingRemapper.ivec_append(self, *args)
    def empty(self): return _MEDCouplingRemapper.ivec_empty(self)
    def size(self): return _MEDCouplingRemapper.ivec_size(self)
    def clear(self): return _MEDCouplingRemapper.ivec_clear(self)
    def swap(self, *args): return _MEDCouplingRemapper.ivec_swap(self, *args)
    def get_allocator(self): return _MEDCouplingRemapper.ivec_get_allocator(self)
    def begin(self): return _MEDCouplingRemapper.ivec_begin(self)
    def end(self): return _MEDCouplingRemapper.ivec_end(self)
    def rbegin(self): return _MEDCouplingRemapper.ivec_rbegin(self)
    def rend(self): return _MEDCouplingRemapper.ivec_rend(self)
    def pop_back(self): return _MEDCouplingRemapper.ivec_pop_back(self)
    def erase(self, *args): return _MEDCouplingRemapper.ivec_erase(self, *args)
    def __init__(self, *args): 
        this = _MEDCouplingRemapper.new_ivec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MEDCouplingRemapper.ivec_push_back(self, *args)
    def front(self): return _MEDCouplingRemapper.ivec_front(self)
    def back(self): return _MEDCouplingRemapper.ivec_back(self)
    def assign(self, *args): return _MEDCouplingRemapper.ivec_assign(self, *args)
    def resize(self, *args): return _MEDCouplingRemapper.ivec_resize(self, *args)
    def insert(self, *args): return _MEDCouplingRemapper.ivec_insert(self, *args)
    def reserve(self, *args): return _MEDCouplingRemapper.ivec_reserve(self, *args)
    def capacity(self): return _MEDCouplingRemapper.ivec_capacity(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_ivec
    __del__ = lambda self : None;
ivec_swigregister = _MEDCouplingRemapper.ivec_swigregister
ivec_swigregister(ivec)

class dvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvec, name)
    __repr__ = _swig_repr
    def iterator(self): return _MEDCouplingRemapper.dvec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MEDCouplingRemapper.dvec___nonzero__(self)
    def __bool__(self): return _MEDCouplingRemapper.dvec___bool__(self)
    def __len__(self): return _MEDCouplingRemapper.dvec___len__(self)
    def pop(self): return _MEDCouplingRemapper.dvec_pop(self)
    def __getslice__(self, *args): return _MEDCouplingRemapper.dvec___getslice__(self, *args)
    def __setslice__(self, *args): return _MEDCouplingRemapper.dvec___setslice__(self, *args)
    def __delslice__(self, *args): return _MEDCouplingRemapper.dvec___delslice__(self, *args)
    def __delitem__(self, *args): return _MEDCouplingRemapper.dvec___delitem__(self, *args)
    def __getitem__(self, *args): return _MEDCouplingRemapper.dvec___getitem__(self, *args)
    def __setitem__(self, *args): return _MEDCouplingRemapper.dvec___setitem__(self, *args)
    def append(self, *args): return _MEDCouplingRemapper.dvec_append(self, *args)
    def empty(self): return _MEDCouplingRemapper.dvec_empty(self)
    def size(self): return _MEDCouplingRemapper.dvec_size(self)
    def clear(self): return _MEDCouplingRemapper.dvec_clear(self)
    def swap(self, *args): return _MEDCouplingRemapper.dvec_swap(self, *args)
    def get_allocator(self): return _MEDCouplingRemapper.dvec_get_allocator(self)
    def begin(self): return _MEDCouplingRemapper.dvec_begin(self)
    def end(self): return _MEDCouplingRemapper.dvec_end(self)
    def rbegin(self): return _MEDCouplingRemapper.dvec_rbegin(self)
    def rend(self): return _MEDCouplingRemapper.dvec_rend(self)
    def pop_back(self): return _MEDCouplingRemapper.dvec_pop_back(self)
    def erase(self, *args): return _MEDCouplingRemapper.dvec_erase(self, *args)
    def __init__(self, *args): 
        this = _MEDCouplingRemapper.new_dvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MEDCouplingRemapper.dvec_push_back(self, *args)
    def front(self): return _MEDCouplingRemapper.dvec_front(self)
    def back(self): return _MEDCouplingRemapper.dvec_back(self)
    def assign(self, *args): return _MEDCouplingRemapper.dvec_assign(self, *args)
    def resize(self, *args): return _MEDCouplingRemapper.dvec_resize(self, *args)
    def insert(self, *args): return _MEDCouplingRemapper.dvec_insert(self, *args)
    def reserve(self, *args): return _MEDCouplingRemapper.dvec_reserve(self, *args)
    def capacity(self): return _MEDCouplingRemapper.dvec_capacity(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_dvec
    __del__ = lambda self : None;
dvec_swigregister = _MEDCouplingRemapper.dvec_swigregister
dvec_swigregister(dvec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr
    def iterator(self): return _MEDCouplingRemapper.svec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MEDCouplingRemapper.svec___nonzero__(self)
    def __bool__(self): return _MEDCouplingRemapper.svec___bool__(self)
    def __len__(self): return _MEDCouplingRemapper.svec___len__(self)
    def pop(self): return _MEDCouplingRemapper.svec_pop(self)
    def __getslice__(self, *args): return _MEDCouplingRemapper.svec___getslice__(self, *args)
    def __setslice__(self, *args): return _MEDCouplingRemapper.svec___setslice__(self, *args)
    def __delslice__(self, *args): return _MEDCouplingRemapper.svec___delslice__(self, *args)
    def __delitem__(self, *args): return _MEDCouplingRemapper.svec___delitem__(self, *args)
    def __getitem__(self, *args): return _MEDCouplingRemapper.svec___getitem__(self, *args)
    def __setitem__(self, *args): return _MEDCouplingRemapper.svec___setitem__(self, *args)
    def append(self, *args): return _MEDCouplingRemapper.svec_append(self, *args)
    def empty(self): return _MEDCouplingRemapper.svec_empty(self)
    def size(self): return _MEDCouplingRemapper.svec_size(self)
    def clear(self): return _MEDCouplingRemapper.svec_clear(self)
    def swap(self, *args): return _MEDCouplingRemapper.svec_swap(self, *args)
    def get_allocator(self): return _MEDCouplingRemapper.svec_get_allocator(self)
    def begin(self): return _MEDCouplingRemapper.svec_begin(self)
    def end(self): return _MEDCouplingRemapper.svec_end(self)
    def rbegin(self): return _MEDCouplingRemapper.svec_rbegin(self)
    def rend(self): return _MEDCouplingRemapper.svec_rend(self)
    def pop_back(self): return _MEDCouplingRemapper.svec_pop_back(self)
    def erase(self, *args): return _MEDCouplingRemapper.svec_erase(self, *args)
    def __init__(self, *args): 
        this = _MEDCouplingRemapper.new_svec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MEDCouplingRemapper.svec_push_back(self, *args)
    def front(self): return _MEDCouplingRemapper.svec_front(self)
    def back(self): return _MEDCouplingRemapper.svec_back(self)
    def assign(self, *args): return _MEDCouplingRemapper.svec_assign(self, *args)
    def resize(self, *args): return _MEDCouplingRemapper.svec_resize(self, *args)
    def insert(self, *args): return _MEDCouplingRemapper.svec_insert(self, *args)
    def reserve(self, *args): return _MEDCouplingRemapper.svec_reserve(self, *args)
    def capacity(self): return _MEDCouplingRemapper.svec_capacity(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_svec
    __del__ = lambda self : None;
svec_swigregister = _MEDCouplingRemapper.svec_swigregister
svec_swigregister(svec)

class InterpKernelException(Exception):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpKernelException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpKernelException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char what) -> InterpKernelException

        1
        """
        this = _MEDCouplingRemapper.new_InterpKernelException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingRemapper.delete_InterpKernelException
    __del__ = lambda self : None;
    def what(self):
        """
        what(self) -> char

        1
        """
        return _MEDCouplingRemapper.InterpKernelException_what(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.InterpKernelException___str__(self)

InterpKernelException_swigregister = _MEDCouplingRemapper.InterpKernelException_swigregister
InterpKernelException_swigregister(InterpKernelException)

class TimeLabel(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeLabel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def assign(self, *args):
        """
        assign(self, TimeLabel other) -> TimeLabel

        1
        """
        return _MEDCouplingRemapper.TimeLabel_assign(self, *args)

    def declareAsNew(self):
        """
        declareAsNew(self)

        1
        """
        return _MEDCouplingRemapper.TimeLabel_declareAsNew(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.TimeLabel_updateTime(self)

    def getTimeOfThis(self):
        """
        getTimeOfThis(self) -> unsigned int

        1
        """
        return _MEDCouplingRemapper.TimeLabel_getTimeOfThis(self)

TimeLabel_swigregister = _MEDCouplingRemapper.TimeLabel_swigregister
TimeLabel_swigregister(TimeLabel)

C_DEALLOC = _MEDCouplingRemapper.C_DEALLOC
CPP_DEALLOC = _MEDCouplingRemapper.CPP_DEALLOC
ON_CELLS = _MEDCouplingRemapper.ON_CELLS
ON_NODES = _MEDCouplingRemapper.ON_NODES
ON_GAUSS_PT = _MEDCouplingRemapper.ON_GAUSS_PT
ON_GAUSS_NE = _MEDCouplingRemapper.ON_GAUSS_NE
ON_NODES_KR = _MEDCouplingRemapper.ON_NODES_KR
NO_TIME = _MEDCouplingRemapper.NO_TIME
ONE_TIME = _MEDCouplingRemapper.ONE_TIME
LINEAR_TIME = _MEDCouplingRemapper.LINEAR_TIME
CONST_ON_TIME_INTERVAL = _MEDCouplingRemapper.CONST_ON_TIME_INTERVAL

def MEDCouplingVersionStr():
  """
    MEDCouplingVersionStr() -> char

    1
    """
  return _MEDCouplingRemapper.MEDCouplingVersionStr()

def MEDCouplingVersion():
  """
    MEDCouplingVersion() -> int

    1
    """
  return _MEDCouplingRemapper.MEDCouplingVersion()
class RefCountObject(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCountObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefCountObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def incrRef(self):
        """
        incrRef(self)

        1
        """
        return _MEDCouplingRemapper.RefCountObject_incrRef(self)

    def getHiddenCppPointer(self):
        """
        getHiddenCppPointer(self) -> string

        1
        """
        return _MEDCouplingRemapper.RefCountObject_getHiddenCppPointer(self)

RefCountObject_swigregister = _MEDCouplingRemapper.RefCountObject_swigregister
RefCountObject_swigregister(RefCountObject)

UNSTRUCTURED = _MEDCouplingRemapper.UNSTRUCTURED
UNSTRUCTURED_DESC = _MEDCouplingRemapper.UNSTRUCTURED_DESC
CARTESIAN = _MEDCouplingRemapper.CARTESIAN
EXTRUDED = _MEDCouplingRemapper.EXTRUDED
class MEDCouplingMesh(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setName(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getName(self)

    def setDescription(self, *args):
        """
        setDescription(self, char descr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setDescription(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getDescription(self)

    def setTime(self, *args):
        """
        setTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setTime(self, *args)

    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTimeUnit(self)

    def getType(self):
        """
        getType(self) -> MEDCouplingMeshType

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getType(self)

    def isStructured(self):
        """
        isStructured(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isStructured(self)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_deepCpy(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isEqualWithoutConsideringStr(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingMesh other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_copyTinyStringsFrom(self, *args)

    def copyTinyInfoFrom(self, *args):
        """
        copyTinyInfoFrom(self, MEDCouplingMesh other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_copyTinyInfoFrom(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkCoherency(self)

    def checkCoherency1(self, eps = 1e-12):
        """
        checkCoherency1(self, double eps = 1e-12)
        checkCoherency1(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkCoherency1(self, eps)

    def checkCoherency2(self, eps = 1e-12):
        """
        checkCoherency2(self, double eps = 1e-12)
        checkCoherency2(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkCoherency2(self, eps)

    def getNumberOfCells(self):
        """
        getNumberOfCells(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNumberOfCells(self)

    def getNumberOfNodes(self):
        """
        getNumberOfNodes(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNumberOfNodes(self)

    def getSpaceDimension(self):
        """
        getSpaceDimension(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getSpaceDimension(self)

    def getMeshDimension(self):
        """
        getMeshDimension(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getMeshDimension(self)

    def getCoordinatesAndOwner(self):
        """
        getCoordinatesAndOwner(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCoordinatesAndOwner(self)

    def getBarycenterAndOwner(self):
        """
        getBarycenterAndOwner(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getBarycenterAndOwner(self)

    def getNumberOfCellsWithType(self, *args):
        """
        getNumberOfCellsWithType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNumberOfCellsWithType(self, *args)

    def getTypeOfCell(self, *args):
        """
        getTypeOfCell(self, int cellId) -> NormalizedCellType

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTypeOfCell(self, *args)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_advancedRepr(self)

    def writeVTK(self, *args):
        """
        writeVTK(self, char fileName)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_writeVTK(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getMeasureField(self, *args)

    def getMeasureFieldOnNode(self, *args):
        """
        getMeasureFieldOnNode(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getMeasureFieldOnNode(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, TypeOfField t, int nbOfComp, char func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, TypeOfField t, int nbOfComp, char func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, TypeOfField t, int nbOfComp, svec varsOrder, char func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_fillFromAnalytic3(self, *args)

    def buildOrthogonalField(self):
        """
        buildOrthogonalField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildOrthogonalField(self)

    def buildUnstructured(self):
        """
        buildUnstructured(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildUnstructured(self)

    def mergeMyselfWith(self, *args):
        """
        mergeMyselfWith(self, MEDCouplingMesh other) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_mergeMyselfWith(self, *args)

    def areCompatibleForMerge(self, *args):
        """
        areCompatibleForMerge(self, MEDCouplingMesh other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_areCompatibleForMerge(self, *args)

    def simplexize(self, *args):
        """
        simplexize(self, int policy) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_simplexize(self, *args)

    def GetDimensionOfGeometricType(*args):
        """
        GetDimensionOfGeometricType(NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_GetDimensionOfGeometricType(*args)

    if _newclass:GetDimensionOfGeometricType = staticmethod(GetDimensionOfGeometricType)
    __swig_getmethods__["GetDimensionOfGeometricType"] = lambda x: GetDimensionOfGeometricType
    def GetReprOfGeometricType(*args):
        """
        GetReprOfGeometricType(NormalizedCellType type) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_GetReprOfGeometricType(*args)

    if _newclass:GetReprOfGeometricType = staticmethod(GetReprOfGeometricType)
    __swig_getmethods__["GetReprOfGeometricType"] = lambda x: GetReprOfGeometricType
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh___str__(self)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTime(self)

    def getCellContainingPoint(self, *args):
        """
        getCellContainingPoint(self, PyObject p, double eps) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellContainingPoint(self, *args)

    def getCellsContainingPoints(self, *args):
        """
        getCellsContainingPoints(self, PyObject p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPoints(self, PyObject p, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellsContainingPoints(self, *args)

    def getCellsContainingPoint(self, *args):
        """
        getCellsContainingPoint(self, PyObject p, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellsContainingPoint(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, PyObject li, bool check = True)
        renumberCells(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_renumberCells(self, *args)

    def checkGeoEquivalWith(self, *args):
        """
        checkGeoEquivalWith(self, MEDCouplingMesh other, int levOfCheck, double prec) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkGeoEquivalWith(self, *args)

    def getCellIdsFullyIncludedInNodeIds(self, *args):
        """
        getCellIdsFullyIncludedInNodeIds(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellIdsFullyIncludedInNodeIds(self, *args)

    def getNodeIdsOfCell(self, *args):
        """
        getNodeIdsOfCell(self, int cellId) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNodeIdsOfCell(self, *args)

    def getCoordinatesOfNode(self, *args):
        """
        getCoordinatesOfNode(self, int nodeId) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCoordinatesOfNode(self, *args)

    def scale(self, *args):
        """
        scale(self, PyObject point, double factor)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_scale(self, *args)

    def getBoundingBox(self):
        """
        getBoundingBox(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getBoundingBox(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingMesh other, double prec) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isEqualIfNotWhy(self, *args)

    def buildPart(self, *args):
        """
        buildPart(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildPart(self, *args)

    def buildPartAndReduceNodes(self, *args):
        """
        buildPartAndReduceNodes(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildPartAndReduceNodes(self, *args)

    def getDistributionOfTypes(self):
        """
        getDistributionOfTypes(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getDistributionOfTypes(self)

    def checkTypeConsistencyAndContig(self, *args):
        """
        checkTypeConsistencyAndContig(self, PyObject li, PyObject li2) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkTypeConsistencyAndContig(self, *args)

    def splitProfilePerType(self, *args):
        """
        splitProfilePerType(self, DataArrayInt profile) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_splitProfilePerType(self, *args)

    def translate(self, *args):
        """
        translate(self, PyObject vector)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_translate(self, *args)

    def rotate(self, *args):
        """
        rotate(self, PyObject center, double alpha)
        rotate(self, PyObject center, PyObject vector, double alpha)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_rotate(self, *args)

    def getAllGeoTypes(self):
        """
        getAllGeoTypes(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getAllGeoTypes(self)

    def MergeMeshes(*args):
        """
        MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
        MergeMeshes(PyObject li) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_MergeMeshes(*args)

    if _newclass:MergeMeshes = staticmethod(MergeMeshes)
    __swig_getmethods__["MergeMeshes"] = lambda x: MergeMeshes
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingMesh
    __del__ = lambda self : None;
MEDCouplingMesh_swigregister = _MEDCouplingRemapper.MEDCouplingMesh_swigregister
MEDCouplingMesh_swigregister(MEDCouplingMesh)

def MEDCouplingMesh_GetDimensionOfGeometricType(*args):
  """
    MEDCouplingMesh_GetDimensionOfGeometricType(NormalizedCellType type) -> int

    1
    """
  return _MEDCouplingRemapper.MEDCouplingMesh_GetDimensionOfGeometricType(*args)

def MEDCouplingMesh_GetReprOfGeometricType(*args):
  """
    MEDCouplingMesh_GetReprOfGeometricType(NormalizedCellType type) -> char

    1
    """
  return _MEDCouplingRemapper.MEDCouplingMesh_GetReprOfGeometricType(*args)

def MEDCouplingMesh_MergeMeshes(*args):
  """
    MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
    MEDCouplingMesh_MergeMeshes(PyObject li) -> MEDCouplingMesh

    1
    """
  return _MEDCouplingRemapper.MEDCouplingMesh_MergeMeshes(*args)

class DataArray(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArray, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArray, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _MEDCouplingRemapper.DataArray_setName(self, *args)

    def copyStringInfoFrom(self, *args):
        """
        copyStringInfoFrom(self, DataArray other)

        1
        """
        return _MEDCouplingRemapper.DataArray_copyStringInfoFrom(self, *args)

    def areInfoEqualsIfNotWhy(self, *args):
        """
        areInfoEqualsIfNotWhy(self, DataArray other, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArray_areInfoEqualsIfNotWhy(self, *args)

    def areInfoEquals(self, *args):
        """
        areInfoEquals(self, DataArray other) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArray_areInfoEquals(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArray_reprWithoutNameStream(self, *args)

    def cppRepr(self, *args):
        """
        cppRepr(self, char varName) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_cppRepr(self, *args)

    def getName(self):
        """
        getName(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_getName(self)

    def setInfoOnComponents(self, *args):
        """
        setInfoOnComponents(self, svec info)

        1
        """
        return _MEDCouplingRemapper.DataArray_setInfoOnComponents(self, *args)

    def getVarsOnComponent(self):
        """
        getVarsOnComponent(self) -> svec

        1
        """
        return _MEDCouplingRemapper.DataArray_getVarsOnComponent(self)

    def getUnitsOnComponent(self):
        """
        getUnitsOnComponent(self) -> svec

        1
        """
        return _MEDCouplingRemapper.DataArray_getUnitsOnComponent(self)

    def getInfoOnComponent(self, *args):
        """
        getInfoOnComponent(self, int i) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_getInfoOnComponent(self, *args)

    def getVarOnComponent(self, *args):
        """
        getVarOnComponent(self, int i) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_getVarOnComponent(self, *args)

    def getUnitOnComponent(self, *args):
        """
        getUnitOnComponent(self, int i) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_getUnitOnComponent(self, *args)

    def setInfoOnComponent(self, *args):
        """
        setInfoOnComponent(self, int i, char info)

        1
        """
        return _MEDCouplingRemapper.DataArray_setInfoOnComponent(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArray_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        """
        getNumberOfTuples(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArray_getNumberOfTuples(self)

    def getNbOfElems(self):
        """
        getNbOfElems(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArray_getNbOfElems(self)

    def checkNbOfTuples(self, *args):
        """
        checkNbOfTuples(self, int nbOfTuples, char msg)

        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfTuples(self, *args)

    def checkNbOfComps(self, *args):
        """
        checkNbOfComps(self, int nbOfCompo, char msg)

        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfComps(self, *args)

    def checkNbOfTuplesAndComp(self, *args):
        """
        checkNbOfTuplesAndComp(self, DataArray other, char msg)
        checkNbOfTuplesAndComp(self, int nbOfTuples, int nbOfCompo, char msg)

        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfTuplesAndComp(self, *args)

    def checkNbOfElems(self, *args):
        """
        checkNbOfElems(self, int nbOfElems, char msg)

        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfElems(self, *args)

    def GetNumberOfItemGivenBES(*args):
        """
        GetNumberOfItemGivenBES(int begin, int end, int step, char msg) -> int

        1
        """
        return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBES(*args)

    if _newclass:GetNumberOfItemGivenBES = staticmethod(GetNumberOfItemGivenBES)
    __swig_getmethods__["GetNumberOfItemGivenBES"] = lambda x: GetNumberOfItemGivenBES
    def GetNumberOfItemGivenBESRelative(*args):
        """
        GetNumberOfItemGivenBESRelative(int begin, int end, int step, char msg) -> int

        1
        """
        return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBESRelative(*args)

    if _newclass:GetNumberOfItemGivenBESRelative = staticmethod(GetNumberOfItemGivenBESRelative)
    __swig_getmethods__["GetNumberOfItemGivenBESRelative"] = lambda x: GetNumberOfItemGivenBESRelative
    def GetPosOfItemGivenBESRelativeNoThrow(*args):
        """
        GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

        1
        """
        return _MEDCouplingRemapper.DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args)

    if _newclass:GetPosOfItemGivenBESRelativeNoThrow = staticmethod(GetPosOfItemGivenBESRelativeNoThrow)
    __swig_getmethods__["GetPosOfItemGivenBESRelativeNoThrow"] = lambda x: GetPosOfItemGivenBESRelativeNoThrow
    def GetVarNameFromInfo(*args):
        """
        GetVarNameFromInfo(string info) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_GetVarNameFromInfo(*args)

    if _newclass:GetVarNameFromInfo = staticmethod(GetVarNameFromInfo)
    __swig_getmethods__["GetVarNameFromInfo"] = lambda x: GetVarNameFromInfo
    def GetUnitFromInfo(*args):
        """
        GetUnitFromInfo(string info) -> string

        1
        """
        return _MEDCouplingRemapper.DataArray_GetUnitFromInfo(*args)

    if _newclass:GetUnitFromInfo = staticmethod(GetUnitFromInfo)
    __swig_getmethods__["GetUnitFromInfo"] = lambda x: GetUnitFromInfo
    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArray_reprCppStream(self, *args)

    def getInfoOnComponents(self):
        """
        getInfoOnComponents(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArray_getInfoOnComponents(self)

    def copyPartOfStringInfoFrom(self, *args):
        """
        copyPartOfStringInfoFrom(self, DataArray other, ivec compoIds)
        copyPartOfStringInfoFrom(self, DataArray other, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArray_copyPartOfStringInfoFrom(self, *args)

    def copyPartOfStringInfoFrom2(self, *args):
        """
        copyPartOfStringInfoFrom2(self, ivec compoIds, DataArray other)
        copyPartOfStringInfoFrom2(self, PyObject li, DataArray other)

        1
        """
        return _MEDCouplingRemapper.DataArray_copyPartOfStringInfoFrom2(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArray
    __del__ = lambda self : None;
DataArray_swigregister = _MEDCouplingRemapper.DataArray_swigregister
DataArray_swigregister(DataArray)

def DataArray_GetNumberOfItemGivenBES(*args):
  """
    DataArray_GetNumberOfItemGivenBES(int begin, int end, int step, char msg) -> int

    1
    """
  return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBES(*args)

def DataArray_GetNumberOfItemGivenBESRelative(*args):
  """
    DataArray_GetNumberOfItemGivenBESRelative(int begin, int end, int step, char msg) -> int

    1
    """
  return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBESRelative(*args)

def DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args):
  """
    DataArray_GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

    1
    """
  return _MEDCouplingRemapper.DataArray_GetPosOfItemGivenBESRelativeNoThrow(*args)

def DataArray_GetVarNameFromInfo(*args):
  """
    DataArray_GetVarNameFromInfo(string info) -> string

    1
    """
  return _MEDCouplingRemapper.DataArray_GetVarNameFromInfo(*args)

def DataArray_GetUnitFromInfo(*args):
  """
    DataArray_GetUnitFromInfo(string info) -> string

    1
    """
  return _MEDCouplingRemapper.DataArray_GetUnitFromInfo(*args)

class DataArrayDouble(DataArray):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DataArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDouble, name)
    __repr__ = _swig_repr
    def isAllocated(self):
        """
        isAllocated(self) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isAllocated(self)

    def checkAllocated(self):
        """
        checkAllocated(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_checkAllocated(self)

    def setInfoAndChangeNbOfCompo(self, *args):
        """
        setInfoAndChangeNbOfCompo(self, svec info)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setInfoAndChangeNbOfCompo(self, *args)

    def doubleValue(self):
        """
        doubleValue(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_doubleValue(self)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_empty(self)

    def deepCpy(self):
        """
        deepCpy(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_deepCpy(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_performCpy(self, *args)

    def cpyFrom(self, *args):
        """
        cpyFrom(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_cpyFrom(self, *args)

    def alloc(self, *args):
        """
        alloc(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_alloc(self, *args)

    def allocIfNecessary(self, *args):
        """
        allocIfNecessary(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_allocIfNecessary(self, *args)

    def fillWithZero(self):
        """
        fillWithZero(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fillWithZero(self)

    def fillWithValue(self, *args):
        """
        fillWithValue(self, double val)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fillWithValue(self, *args)

    def iota(self, init = 0.):
        """
        iota(self, double init = 0.)
        iota(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_iota(self, init)

    def isUniform(self, *args):
        """
        isUniform(self, double val, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isUniform(self, *args)

    def sort(self, asc = True):
        """
        sort(self, bool asc = True)
        sort(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_sort(self, asc)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reverse(self)

    def checkMonotonic(self, *args):
        """
        checkMonotonic(self, bool increasing, double eps)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_checkMonotonic(self, *args)

    def isMonotonic(self, *args):
        """
        isMonotonic(self, bool increasing, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isMonotonic(self, *args)

    def repr(self):
        """
        repr(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_repr(self)

    def reprZip(self):
        """
        reprZip(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprZip(self)

    def reprStream(self, *args):
        """
        reprStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprStream(self, *args)

    def reprZipStream(self, *args):
        """
        reprZipStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprZipStream(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprWithoutNameStream(self, *args)

    def reprZipWithoutNameStream(self, *args):
        """
        reprZipWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprZipWithoutNameStream(self, *args)

    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprCppStream(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isEqualWithoutConsideringStr(self, *args)

    def reAlloc(self, *args):
        """
        reAlloc(self, int nbOfTuples)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reAlloc(self, *args)

    def convertToIntArr(self):
        """
        convertToIntArr(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_convertToIntArr(self)

    def fromNoInterlace(self):
        """
        fromNoInterlace(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromNoInterlace(self)

    def toNoInterlace(self):
        """
        toNoInterlace(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_toNoInterlace(self)

    def selectByTupleId2(self, *args):
        """
        selectByTupleId2(self, int bg, int end2, int step) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_selectByTupleId2(self, *args)

    def substr(self, *args):
        """
        substr(self, int tupleIdBg, int tupleIdEnd = -1) -> DataArrayDouble
        substr(self, int tupleIdBg) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_substr(self, *args)

    def rearrange(self, *args):
        """
        rearrange(self, int newNbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_rearrange(self, *args)

    def transpose(self):
        """
        transpose(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_transpose(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_changeNbOfComponents(self, *args)

    def meldWith(self, *args):
        """
        meldWith(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_meldWith(self, *args)

    def duplicateEachTupleNTimes(self, *args):
        """
        duplicateEachTupleNTimes(self, int nbTimes) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_duplicateEachTupleNTimes(self, *args)

    def getDifferentValues(self, *args):
        """
        getDifferentValues(self, double prec, int limitTupleId = -1) -> DataArrayDouble
        getDifferentValues(self, double prec) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getDifferentValues(self, *args)

    def setPartOfValues1(self, *args):
        """
        setPartOfValues1(self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp, 
            bool strictCompoCompare = True)
        setPartOfValues1(self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValues1(self, *args)

    def setPartOfValuesSimple1(self, *args):
        """
        setPartOfValuesSimple1(self, double a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValuesSimple1(self, *args)

    def setPartOfValues2(self, *args):
        """
        setPartOfValues2(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, bool strictCompoCompare = True)
        setPartOfValues2(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValues2(self, *args)

    def setPartOfValuesSimple2(self, *args):
        """
        setPartOfValuesSimple2(self, double a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValuesSimple2(self, *args)

    def setPartOfValues3(self, *args):
        """
        setPartOfValues3(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp, bool strictCompoCompare = True)
        setPartOfValues3(self, DataArrayDouble a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValues3(self, *args)

    def setPartOfValuesSimple3(self, *args):
        """
        setPartOfValuesSimple3(self, double a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValuesSimple3(self, *args)

    def setPartOfValuesAdv(self, *args):
        """
        setPartOfValuesAdv(self, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValuesAdv(self, *args)

    def setContigPartOfSelectedValues(self, *args):
        """
        setContigPartOfSelectedValues(self, int tupleIdStart, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setContigPartOfSelectedValues(self, *args)

    def setContigPartOfSelectedValues2(self, *args):
        """
        setContigPartOfSelectedValues2(self, int tupleIdStart, DataArrayDouble a, int bg, int end2, 
            int step)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setContigPartOfSelectedValues2(self, *args)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getIJ(self, *args)

    def back(self):
        """
        back(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_back(self)

    def getIJSafe(self, *args):
        """
        getIJSafe(self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getIJSafe(self, *args)

    def setIJ(self, *args):
        """
        setIJ(self, int tupleId, int compoId, double newVal)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setIJ(self, *args)

    def setIJSilent(self, *args):
        """
        setIJSilent(self, int tupleId, int compoId, double newVal)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setIJSilent(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getPointer(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getConstPointer(self)

    def iterator(self):
        """
        iterator(self) -> DataArrayDoubleIterator

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_iterator(self)

    def begin(self):
        """
        begin(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_begin(self)

    def end(self):
        """
        end(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_end(self)

    def useArray(self, *args):
        """
        useArray(self, double array, bool ownership, DeallocType type, int nbOfTuple, 
            int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_useArray(self, *args)

    def useExternalArrayWithRWAccess(self, *args):
        """
        useExternalArrayWithRWAccess(self, double array, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_useExternalArrayWithRWAccess(self, *args)

    def writeOnPlace(self, *args):
        """
        writeOnPlace(self, int id, double element0, double others, int sizeOfOthers)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_writeOnPlace(self, *args)

    def checkNoNullValues(self):
        """
        checkNoNullValues(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_checkNoNullValues(self)

    def computeBBoxPerTuple(self, epsilon = 0.0):
        """
        computeBBoxPerTuple(self, double epsilon = 0.0) -> DataArrayDouble
        computeBBoxPerTuple(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_computeBBoxPerTuple(self, epsilon)

    def recenterForMaxPrecision(self, *args):
        """
        recenterForMaxPrecision(self, double eps)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_recenterForMaxPrecision(self, *args)

    def getMaxValueInArray(self):
        """
        getMaxValueInArray(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxValueInArray(self)

    def getMinValueInArray(self):
        """
        getMinValueInArray(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinValueInArray(self)

    def getAverageValue(self):
        """
        getAverageValue(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getAverageValue(self)

    def norm2(self):
        """
        norm2(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_norm2(self)

    def normMax(self):
        """
        normMax(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_normMax(self)

    def fromPolarToCart(self):
        """
        fromPolarToCart(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromPolarToCart(self)

    def fromCylToCart(self):
        """
        fromCylToCart(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromCylToCart(self)

    def fromSpherToCart(self):
        """
        fromSpherToCart(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromSpherToCart(self)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_inverse(self)

    def trace(self):
        """
        trace(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_trace(self)

    def deviator(self):
        """
        deviator(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_maxPerTuple(self)

    def buildEuclidianDistanceDenseMatrix(self):
        """
        buildEuclidianDistanceDenseMatrix(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_buildEuclidianDistanceDenseMatrix(self)

    def buildEuclidianDistanceDenseMatrixWith(self, *args):
        """
        buildEuclidianDistanceDenseMatrixWith(self, DataArrayDouble other) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_buildEuclidianDistanceDenseMatrixWith(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_sortPerTuple(self, *args)

    def abs(self):
        """
        abs(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_abs(self)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)
        applyLin(self, double a, double b)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyLin(self, *args)

    def applyInv(self, *args):
        """
        applyInv(self, double numerator)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyInv(self, *args)

    def negate(self):
        """
        negate(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_negate(self)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, FunctionToEvaluate func) -> DataArrayDouble
        applyFunc(self, int nbOfComp, char func) -> DataArrayDouble
        applyFunc(self, char func) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFunc(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFunc3(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncFast64(self, *args)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getIdsInRange(self, *args)

    def Dot(*args):
        """
        Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Dot(*args)

    if _newclass:Dot = staticmethod(Dot)
    __swig_getmethods__["Dot"] = lambda x: Dot
    def CrossProduct(*args):
        """
        CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_CrossProduct(*args)

    if _newclass:CrossProduct = staticmethod(CrossProduct)
    __swig_getmethods__["CrossProduct"] = lambda x: CrossProduct
    def Max(*args):
        """
        Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Max(*args)

    if _newclass:Max = staticmethod(Max)
    __swig_getmethods__["Max"] = lambda x: Max
    def Min(*args):
        """
        Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Min(*args)

    if _newclass:Min = staticmethod(Min)
    __swig_getmethods__["Min"] = lambda x: Min
    def Add(*args):
        """
        Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Add(*args)

    if _newclass:Add = staticmethod(Add)
    __swig_getmethods__["Add"] = lambda x: Add
    def addEqual(self, *args):
        """
        addEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_addEqual(self, *args)

    def Substract(*args):
        """
        Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Substract(*args)

    if _newclass:Substract = staticmethod(Substract)
    __swig_getmethods__["Substract"] = lambda x: Substract
    def substractEqual(self, *args):
        """
        substractEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_substractEqual(self, *args)

    def Multiply(*args):
        """
        Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Multiply(*args)

    if _newclass:Multiply = staticmethod(Multiply)
    __swig_getmethods__["Multiply"] = lambda x: Multiply
    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_multiplyEqual(self, *args)

    def Divide(*args):
        """
        Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Divide(*args)

    if _newclass:Divide = staticmethod(Divide)
    __swig_getmethods__["Divide"] = lambda x: Divide
    def divideEqual(self, *args):
        """
        divideEqual(self, DataArrayDouble other)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_divideEqual(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_updateTime(self)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getTinySerializationIntInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, svec tinyInfoS)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_finishUnserialization(self, *args)

    def New(*args):
        """
        New() -> DataArrayDouble
        New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
        New(PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
        New(PyObject elt0) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self) -> DataArrayDouble
        __init__(self, PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
        __init__(self, PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
        __init__(self, PyObject elt0) -> DataArrayDouble

        1
        """
        this = _MEDCouplingRemapper.new_DataArrayDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___str__(self)

    def __float__(self):
        """
        __float__(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___float__(self)

    def __len__(self):
        """
        __len__(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___len__(self)

    def __iter__(self):
        """
        __iter__(self) -> DataArrayDoubleIterator

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___iter__(self)

    def setValues(self, *args):
        """
        setValues(self, PyObject li, int nbOfTuples, int nbOfElsPerTuple)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setValues(self, *args)

    def getValues(self):
        """
        getValues(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getValues(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, DataArrayDouble other, double prec, string reason) -> bool
        isEqualIfNotWhy(self, DataArrayDouble other, double prec) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isEqualIfNotWhy(self, *args)

    def getValuesAsTuple(self):
        """
        getValuesAsTuple(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getValuesAsTuple(self)

    def renumber(self, *args):
        """
        renumber(self, int old2New) -> DataArrayDouble
        renumber(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumber(self, *args)

    def renumberR(self, *args):
        """
        renumberR(self, int new2Old) -> DataArrayDouble
        renumberR(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumberR(self, *args)

    def renumberAndReduce(self, *args):
        """
        renumberAndReduce(self, int old2New, int newNbOfTuple) -> DataArrayDouble
        renumberAndReduce(self, PyObject li, int newNbOfTuple) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumberAndReduce(self, *args)

    def renumberInPlace(self, *args):
        """
        renumberInPlace(self, int old2New)
        renumberInPlace(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumberInPlace(self, *args)

    def renumberInPlaceR(self, *args):
        """
        renumberInPlaceR(self, int new2Old)
        renumberInPlaceR(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumberInPlaceR(self, *args)

    def selectByTupleId(self, *args):
        """
        selectByTupleId(self, int new2OldBg, int new2OldEnd) -> DataArrayDouble
        selectByTupleId(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_selectByTupleId(self, *args)

    def selectByTupleIdSafe(self, *args):
        """
        selectByTupleIdSafe(self, int new2OldBg, int new2OldEnd) -> DataArrayDouble
        selectByTupleIdSafe(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_selectByTupleIdSafe(self, *args)

    def getMaxValue(self, *args):
        """
        getMaxValue(self, int tupleId) -> double
        getMaxValue(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxValue(self, *args)

    def getMaxValue2(self, *args):
        """
        getMaxValue2(self, DataArrayInt tupleIds) -> double
        getMaxValue2(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxValue2(self, *args)

    def getMinValue(self, *args):
        """
        getMinValue(self, int tupleId) -> double
        getMinValue(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinValue(self, *args)

    def getMinValue2(self, *args):
        """
        getMinValue2(self, DataArrayInt tupleIds) -> double
        getMinValue2(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinValue2(self, *args)

    def getMinMaxPerComponent(self, *args):
        """
        getMinMaxPerComponent(self, double bounds)
        getMinMaxPerComponent(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinMaxPerComponent(self, *args)

    def accumulate(self, *args):
        """
        accumulate(self, double res)
        accumulate(self, int compId) -> double
        accumulate(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_accumulate(self, *args)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> DataArrayDouble
        keepSelectedComponents(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_keepSelectedComponents(self, *args)

    def findCommonTuples(self, *args):
        """
        findCommonTuples(self, double prec, int limitTupleId, DataArrayInt comm, DataArrayInt commIndex)
        findCommonTuples(self, double prec, int limitNodeId = -1) -> PyObject
        findCommonTuples(self, double prec) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findCommonTuples(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, DataArrayDouble a, ivec compoIds)
        setSelectedComponents(self, DataArrayDouble a, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setSelectedComponents(self, *args)

    def getTuple(self, *args):
        """
        getTuple(self, int tupleId, double res)
        getTuple(self, int tupleId) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getTuple(self, *args)

    def Aggregate(*args):
        """
        Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
        Aggregate(PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Aggregate(*args)

    if _newclass:Aggregate = staticmethod(Aggregate)
    __swig_getmethods__["Aggregate"] = lambda x: Aggregate
    def Meld(*args):
        """
        Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
        Meld(PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Meld(*args)

    if _newclass:Meld = staticmethod(Meld)
    __swig_getmethods__["Meld"] = lambda x: Meld
    def selectByTupleRanges(self, *args):
        """
        selectByTupleRanges(self, std::vector<(std::pair<(int,int)>,std::allocator<(std::pair<(int,int)>)>)> ranges) -> DataArrayDouble
        selectByTupleRanges(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_selectByTupleRanges(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___setitem__(self, *args)

    def __neg__(self):
        """
        __neg__(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___neg__(self)

    def __add__(self, *args):
        """
        __add__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___add__(self, *args)

    def __radd__(self, *args):
        """
        __radd__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___radd__(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____iadd___(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___sub__(self, *args)

    def __rsub__(self, *args):
        """
        __rsub__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rsub__(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____isub___(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___mul__(self, *args)

    def __rmul__(self, *args):
        """
        __rmul__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rmul__(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____imul___(self, *args)

    def __div__(self, *args):
        """
        __div__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___div__(self, *args)

    def __rdiv__(self, *args):
        """
        __rdiv__(self, PyObject obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rdiv__(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____idiv___(self, *args)

    def computeTupleIdsNearTuples(self, *args):
        """
        computeTupleIdsNearTuples(self, DataArrayDouble other, double eps, ivec c, ivec cI)
        computeTupleIdsNearTuples(self, PyObject pt, double eps) -> PyObject
        computeTupleIdsNearTuples(self, DataArrayDouble other, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_computeTupleIdsNearTuples(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayDouble
    __del__ = lambda self : None;
DataArrayDouble_swigregister = _MEDCouplingRemapper.DataArrayDouble_swigregister
DataArrayDouble_swigregister(DataArrayDouble)

def DataArrayDouble_Dot(*args):
  """
    DataArrayDouble_Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Dot(*args)

def DataArrayDouble_CrossProduct(*args):
  """
    DataArrayDouble_CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_CrossProduct(*args)

def DataArrayDouble_Max(*args):
  """
    DataArrayDouble_Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Max(*args)

def DataArrayDouble_Min(*args):
  """
    DataArrayDouble_Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Min(*args)

def DataArrayDouble_Add(*args):
  """
    DataArrayDouble_Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Add(*args)

def DataArrayDouble_Substract(*args):
  """
    DataArrayDouble_Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Substract(*args)

def DataArrayDouble_Multiply(*args):
  """
    DataArrayDouble_Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Multiply(*args)

def DataArrayDouble_Divide(*args):
  """
    DataArrayDouble_Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Divide(*args)

def DataArrayDouble_New(*args):
  """
    New() -> DataArrayDouble
    New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayDouble
    New(PyObject elt0, PyObject elt1 = None) -> DataArrayDouble
    DataArrayDouble_New(PyObject elt0) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_New(*args)

def DataArrayDouble_Aggregate(*args):
  """
    Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
    DataArrayDouble_Aggregate(PyObject li) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Aggregate(*args)

def DataArrayDouble_Meld(*args):
  """
    Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)> arr) -> DataArrayDouble
    DataArrayDouble_Meld(PyObject li) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.DataArrayDouble_Meld(*args)

class DataArrayDoubleIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DataArrayDouble da) -> DataArrayDoubleIterator

        1
        """
        this = _MEDCouplingRemapper.new_DataArrayDoubleIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayDoubleIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleIterator_next(self)

DataArrayDoubleIterator_swigregister = _MEDCouplingRemapper.DataArrayDoubleIterator_swigregister
DataArrayDoubleIterator_swigregister(DataArrayDoubleIterator)

class DataArrayDoubleTuple(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleTuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double pt, int nbOfComp) -> DataArrayDoubleTuple

        1
        """
        this = _MEDCouplingRemapper.new_DataArrayDoubleTuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCompo(self):
        """
        getNumberOfCompo(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple_getNumberOfCompo(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple_getConstPointer(self)

    def getPointer(self):
        """
        getPointer(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple_getPointer(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___str__(self)

    def __float__(self):
        """
        __float__(self) -> double

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___float__(self)

    def buildDADouble(self, *args):
        """
        buildDADouble(self, int nbOfTuples, int nbOfCompo) -> DataArrayDouble
        buildDADouble(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple_buildDADouble(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____idiv___(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayDoubleTuple

        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___setitem__(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayDoubleTuple
    __del__ = lambda self : None;
DataArrayDoubleTuple_swigregister = _MEDCouplingRemapper.DataArrayDoubleTuple_swigregister
DataArrayDoubleTuple_swigregister(DataArrayDoubleTuple)

class DataArrayInt(DataArray):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DataArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayInt, name)
    __repr__ = _swig_repr
    def isAllocated(self):
        """
        isAllocated(self) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isAllocated(self)

    def checkAllocated(self):
        """
        checkAllocated(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkAllocated(self)

    def setInfoAndChangeNbOfCompo(self, *args):
        """
        setInfoAndChangeNbOfCompo(self, svec info)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setInfoAndChangeNbOfCompo(self, *args)

    def intValue(self):
        """
        intValue(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_intValue(self)

    def getHashCode(self):
        """
        getHashCode(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getHashCode(self)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_empty(self)

    def deepCpy(self):
        """
        deepCpy(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_deepCpy(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_performCpy(self, *args)

    def cpyFrom(self, *args):
        """
        cpyFrom(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_cpyFrom(self, *args)

    def alloc(self, *args):
        """
        alloc(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_alloc(self, *args)

    def allocIfNecessary(self, *args):
        """
        allocIfNecessary(self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_allocIfNecessary(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqualWithoutConsideringStr(self, *args)

    def isEqualWithoutConsideringStrAndOrder(self, *args):
        """
        isEqualWithoutConsideringStrAndOrder(self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqualWithoutConsideringStrAndOrder(self, *args)

    def buildPermutationArr(self, *args):
        """
        buildPermutationArr(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildPermutationArr(self, *args)

    def sort(self, asc = True):
        """
        sort(self, bool asc = True)
        sort(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_sort(self, asc)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reverse(self)

    def fillWithZero(self):
        """
        fillWithZero(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fillWithZero(self)

    def fillWithValue(self, *args):
        """
        fillWithValue(self, int val)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fillWithValue(self, *args)

    def iota(self, init = 0):
        """
        iota(self, int init = 0)
        iota(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_iota(self, init)

    def repr(self):
        """
        repr(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_repr(self)

    def reprZip(self):
        """
        reprZip(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprZip(self)

    def reprStream(self, *args):
        """
        reprStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprStream(self, *args)

    def reprZipStream(self, *args):
        """
        reprZipStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprZipStream(self, *args)

    def reprWithoutNameStream(self, *args):
        """
        reprWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprWithoutNameStream(self, *args)

    def reprZipWithoutNameStream(self, *args):
        """
        reprZipWithoutNameStream(self, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprZipWithoutNameStream(self, *args)

    def reprCppStream(self, *args):
        """
        reprCppStream(self, char varName, std::ostream stream)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprCppStream(self, *args)

    def invertArrayO2N2N2O(self, *args):
        """
        invertArrayO2N2N2O(self, int newNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_invertArrayO2N2N2O(self, *args)

    def invertArrayN2O2O2N(self, *args):
        """
        invertArrayN2O2O2N(self, int oldNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_invertArrayN2O2O2N(self, *args)

    def reAlloc(self, *args):
        """
        reAlloc(self, int nbOfTuples)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reAlloc(self, *args)

    def convertToDblArr(self):
        """
        convertToDblArr(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_convertToDblArr(self)

    def fromNoInterlace(self):
        """
        fromNoInterlace(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fromNoInterlace(self)

    def toNoInterlace(self):
        """
        toNoInterlace(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_toNoInterlace(self)

    def selectByTupleId2(self, *args):
        """
        selectByTupleId2(self, int bg, int end, int step) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_selectByTupleId2(self, *args)

    def checkAndPreparePermutation(self):
        """
        checkAndPreparePermutation(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkAndPreparePermutation(self)

    def buildPermArrPerLevel(self):
        """
        buildPermArrPerLevel(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildPermArrPerLevel(self)

    def isIdentity(self):
        """
        isIdentity(self) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isIdentity(self)

    def isUniform(self, *args):
        """
        isUniform(self, int val) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isUniform(self, *args)

    def substr(self, *args):
        """
        substr(self, int tupleIdBg, int tupleIdEnd = -1) -> DataArrayInt
        substr(self, int tupleIdBg) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_substr(self, *args)

    def rearrange(self, *args):
        """
        rearrange(self, int newNbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_rearrange(self, *args)

    def transpose(self):
        """
        transpose(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_transpose(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, int dftValue) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_changeNbOfComponents(self, *args)

    def meldWith(self, *args):
        """
        meldWith(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_meldWith(self, *args)

    def setPartOfValues1(self, *args):
        """
        setPartOfValues1(self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp, 
            bool strictCompoCompare = True)
        setPartOfValues1(self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValues1(self, *args)

    def setPartOfValuesSimple1(self, *args):
        """
        setPartOfValuesSimple1(self, int a, int bgTuples, int endTuples, int stepTuples, 
            int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValuesSimple1(self, *args)

    def setPartOfValues2(self, *args):
        """
        setPartOfValues2(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, bool strictCompoCompare = True)
        setPartOfValues2(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValues2(self, *args)

    def setPartOfValuesSimple2(self, *args):
        """
        setPartOfValuesSimple2(self, int a, int bgTuples, int endTuples, int bgComp, int endComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValuesSimple2(self, *args)

    def setPartOfValues3(self, *args):
        """
        setPartOfValues3(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp, bool strictCompoCompare = True)
        setPartOfValues3(self, DataArrayInt a, int bgTuples, int endTuples, int bgComp, 
            int endComp, int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValues3(self, *args)

    def setPartOfValuesSimple3(self, *args):
        """
        setPartOfValuesSimple3(self, int a, int bgTuples, int endTuples, int bgComp, int endComp, 
            int stepComp)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValuesSimple3(self, *args)

    def setPartOfValuesAdv(self, *args):
        """
        setPartOfValuesAdv(self, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValuesAdv(self, *args)

    def setContigPartOfSelectedValues(self, *args):
        """
        setContigPartOfSelectedValues(self, int tupleIdStart, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setContigPartOfSelectedValues(self, *args)

    def setContigPartOfSelectedValues2(self, *args):
        """
        setContigPartOfSelectedValues2(self, int tupleIdStart, DataArrayInt a, int bg, int end2, 
            int step)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setContigPartOfSelectedValues2(self, *args)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIJ(self, *args)

    def getIJSafe(self, *args):
        """
        getIJSafe(self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIJSafe(self, *args)

    def back(self):
        """
        back(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_back(self)

    def setIJ(self, *args):
        """
        setIJ(self, int tupleId, int compoId, int newVal)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setIJ(self, *args)

    def setIJSilent(self, *args):
        """
        setIJSilent(self, int tupleId, int compoId, int newVal)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setIJSilent(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getPointer(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getConstPointer(self)

    def iterator(self):
        """
        iterator(self) -> DataArrayIntIterator

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_iterator(self)

    def begin(self):
        """
        begin(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_begin(self)

    def end(self):
        """
        end(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_end(self)

    def getIdsEqual(self, *args):
        """
        getIdsEqual(self, int val) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIdsEqual(self, *args)

    def getIdsNotEqual(self, *args):
        """
        getIdsNotEqual(self, int val) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIdsNotEqual(self, *args)

    def changeValue(self, *args):
        """
        changeValue(self, int oldValue, int newValue) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_changeValue(self, *args)

    def locateTuple(self, *args):
        """
        locateTuple(self, ivec tupl) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_locateTuple(self, *args)

    def locateValue(self, *args):
        """
        locateValue(self, int value) -> int
        locateValue(self, ivec vals) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_locateValue(self, *args)

    def search(self, *args):
        """
        search(self, ivec vals) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_search(self, *args)

    def presenceOfTuple(self, *args):
        """
        presenceOfTuple(self, ivec tupl) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_presenceOfTuple(self, *args)

    def presenceOfValue(self, *args):
        """
        presenceOfValue(self, int value) -> bool
        presenceOfValue(self, ivec vals) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_presenceOfValue(self, *args)

    def getMaxValueInArray(self):
        """
        getMaxValueInArray(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMaxValueInArray(self)

    def getMinValueInArray(self):
        """
        getMinValueInArray(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMinValueInArray(self)

    def abs(self):
        """
        abs(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_abs(self)

    def applyLin(self, *args):
        """
        applyLin(self, int a, int b, int compoId)
        applyLin(self, int a, int b)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyLin(self, *args)

    def applyInv(self, *args):
        """
        applyInv(self, int numerator)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyInv(self, *args)

    def negate(self):
        """
        negate(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_negate(self)

    def applyDivideBy(self, *args):
        """
        applyDivideBy(self, int val)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyDivideBy(self, *args)

    def applyModulus(self, *args):
        """
        applyModulus(self, int val)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyModulus(self, *args)

    def applyRModulus(self, *args):
        """
        applyRModulus(self, int val)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyRModulus(self, *args)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, int vmin, int vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIdsInRange(self, *args)

    def buildComplement(self, *args):
        """
        buildComplement(self, int nbOfElement) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildComplement(self, *args)

    def buildSubstraction(self, *args):
        """
        buildSubstraction(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildSubstraction(self, *args)

    def buildUnion(self, *args):
        """
        buildUnion(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildUnion(self, *args)

    def buildIntersection(self, *args):
        """
        buildIntersection(self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildIntersection(self, *args)

    def buildUnique(self):
        """
        buildUnique(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildUnique(self)

    def deltaShiftIndex(self):
        """
        deltaShiftIndex(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_deltaShiftIndex(self)

    def computeOffsets(self):
        """
        computeOffsets(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_computeOffsets(self)

    def computeOffsets2(self):
        """
        computeOffsets2(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_computeOffsets2(self)

    def buildExplicitArrByRanges(self, *args):
        """
        buildExplicitArrByRanges(self, DataArrayInt offsets) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildExplicitArrByRanges(self, *args)

    def findRangeIdForEachTuple(self, *args):
        """
        findRangeIdForEachTuple(self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findRangeIdForEachTuple(self, *args)

    def findIdInRangeForEachTuple(self, *args):
        """
        findIdInRangeForEachTuple(self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdInRangeForEachTuple(self, *args)

    def duplicateEachTupleNTimes(self, *args):
        """
        duplicateEachTupleNTimes(self, int nbTimes) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_duplicateEachTupleNTimes(self, *args)

    def useArray(self, *args):
        """
        useArray(self, int array, bool ownership, DeallocType type, int nbOfTuple, 
            int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_useArray(self, *args)

    def useExternalArrayWithRWAccess(self, *args):
        """
        useExternalArrayWithRWAccess(self, int array, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_useExternalArrayWithRWAccess(self, *args)

    def writeOnPlace(self, *args):
        """
        writeOnPlace(self, int id, int element0, int others, int sizeOfOthers)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_writeOnPlace(self, *args)

    def Add(*args):
        """
        Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Add(*args)

    if _newclass:Add = staticmethod(Add)
    __swig_getmethods__["Add"] = lambda x: Add
    def addEqual(self, *args):
        """
        addEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_addEqual(self, *args)

    def Substract(*args):
        """
        Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Substract(*args)

    if _newclass:Substract = staticmethod(Substract)
    __swig_getmethods__["Substract"] = lambda x: Substract
    def substractEqual(self, *args):
        """
        substractEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_substractEqual(self, *args)

    def Multiply(*args):
        """
        Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Multiply(*args)

    if _newclass:Multiply = staticmethod(Multiply)
    __swig_getmethods__["Multiply"] = lambda x: Multiply
    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_multiplyEqual(self, *args)

    def Divide(*args):
        """
        Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Divide(*args)

    if _newclass:Divide = staticmethod(Divide)
    __swig_getmethods__["Divide"] = lambda x: Divide
    def divideEqual(self, *args):
        """
        divideEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_divideEqual(self, *args)

    def Modulus(*args):
        """
        Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Modulus(*args)

    if _newclass:Modulus = staticmethod(Modulus)
    __swig_getmethods__["Modulus"] = lambda x: Modulus
    def modulusEqual(self, *args):
        """
        modulusEqual(self, DataArrayInt other)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_modulusEqual(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_updateTime(self)

    def CheckAndPreparePermutation(*args):
        """
        CheckAndPreparePermutation(int start, int end) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_CheckAndPreparePermutation(*args)

    if _newclass:CheckAndPreparePermutation = staticmethod(CheckAndPreparePermutation)
    __swig_getmethods__["CheckAndPreparePermutation"] = lambda x: CheckAndPreparePermutation
    def Range(*args):
        """
        Range(int begin, int end, int step) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Range(*args)

    if _newclass:Range = staticmethod(Range)
    __swig_getmethods__["Range"] = lambda x: Range
    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getTinySerializationIntInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, svec tinyInfoS)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_finishUnserialization(self, *args)

    def getDifferentValues(self):
        """
        getDifferentValues(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getDifferentValues(self)

    def partitionByDifferentValues(self):
        """
        partitionByDifferentValues(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_partitionByDifferentValues(self)

    def New(*args):
        """
        New() -> DataArrayInt
        New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
        New(PyObject elt0, PyObject elt1 = None) -> DataArrayInt
        New(PyObject elt0) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self) -> DataArrayInt
        __init__(self, PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
        __init__(self, PyObject elt0, PyObject elt1 = None) -> DataArrayInt
        __init__(self, PyObject elt0) -> DataArrayInt

        1
        """
        this = _MEDCouplingRemapper.new_DataArrayInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___str__(self)

    def __len__(self):
        """
        __len__(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___len__(self)

    def __int__(self):
        """
        __int__(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___int__(self)

    def __iter__(self):
        """
        __iter__(self) -> DataArrayIntIterator

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___iter__(self)

    def BuildOld2NewArrayFromSurjectiveFormat2(*args):
        """
        BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI, 
            int newNbOfTuples) -> DataArrayInt
        BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args)

    if _newclass:BuildOld2NewArrayFromSurjectiveFormat2 = staticmethod(BuildOld2NewArrayFromSurjectiveFormat2)
    __swig_getmethods__["BuildOld2NewArrayFromSurjectiveFormat2"] = lambda x: BuildOld2NewArrayFromSurjectiveFormat2
    def setValues(self, *args):
        """
        setValues(self, PyObject li, int nbOfTuples, int nbOfElsPerTuple)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setValues(self, *args)

    def getValues(self):
        """
        getValues(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getValues(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, DataArrayInt other, string reason) -> bool
        isEqualIfNotWhy(self, DataArrayInt other) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqualIfNotWhy(self, *args)

    def getValuesAsTuple(self):
        """
        getValuesAsTuple(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getValuesAsTuple(self)

    def MakePartition(*args):
        """
        MakePartition(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> groups, 
            int newNb, 
            std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)> fidsOfGroups) -> DataArrayInt
        MakePartition(PyObject gps, int newNb) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_MakePartition(*args)

    if _newclass:MakePartition = staticmethod(MakePartition)
    __swig_getmethods__["MakePartition"] = lambda x: MakePartition
    def transformWithIndArr(self, *args):
        """
        transformWithIndArr(self, int indArrBg, int indArrEnd)
        transformWithIndArr(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_transformWithIndArr(self, *args)

    def getIdsEqualList(self, *args):
        """
        getIdsEqualList(self, int valsBg, int valsEnd) -> DataArrayInt
        getIdsEqualList(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIdsEqualList(self, *args)

    def getIdsNotEqualList(self, *args):
        """
        getIdsNotEqualList(self, int valsBg, int valsEnd) -> DataArrayInt
        getIdsNotEqualList(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIdsNotEqualList(self, *args)

    def splitByValueRange(self, *args):
        """
        splitByValueRange(self, int arrBg, int arrEnd, DataArrayInt castArr, DataArrayInt rankInsideCast, 
            DataArrayInt castsPresent)
        splitByValueRange(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_splitByValueRange(self, *args)

    def transformWithIndArrR(self, *args):
        """
        transformWithIndArrR(self, int indArrBg, int indArrEnd) -> DataArrayInt
        transformWithIndArrR(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_transformWithIndArrR(self, *args)

    def renumberInPlace(self, *args):
        """
        renumberInPlace(self, int old2New)
        renumberInPlace(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumberInPlace(self, *args)

    def renumberInPlaceR(self, *args):
        """
        renumberInPlaceR(self, int new2Old)
        renumberInPlaceR(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumberInPlaceR(self, *args)

    def renumberAndReduce(self, *args):
        """
        renumberAndReduce(self, int old2NewBg, int newNbOfTuple) -> DataArrayInt
        renumberAndReduce(self, PyObject li, int newNbOfTuple) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumberAndReduce(self, *args)

    def renumber(self, *args):
        """
        renumber(self, int old2New) -> DataArrayInt
        renumber(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumber(self, *args)

    def renumberR(self, *args):
        """
        renumberR(self, int new2Old) -> DataArrayInt
        renumberR(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumberR(self, *args)

    def selectByTupleId(self, *args):
        """
        selectByTupleId(self, int new2OldBg, int new2OldEnd) -> DataArrayInt
        selectByTupleId(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_selectByTupleId(self, *args)

    def selectByTupleIdSafe(self, *args):
        """
        selectByTupleIdSafe(self, int new2OldBg, int new2OldEnd) -> DataArrayInt
        selectByTupleIdSafe(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_selectByTupleIdSafe(self, *args)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> DataArrayInt
        keepSelectedComponents(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, DataArrayInt a, ivec compoIds)
        setSelectedComponents(self, DataArrayInt a, PyObject li)

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setSelectedComponents(self, *args)

    def getTuple(self, *args):
        """
        getTuple(self, int tupleId, int res)
        getTuple(self, int tupleId) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getTuple(self, *args)

    def changeSurjectiveFormat(self, *args):
        """
        changeSurjectiveFormat(self, int targetNb, DataArrayInt arr, DataArrayInt arrI)
        changeSurjectiveFormat(self, int targetNb) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_changeSurjectiveFormat(self, *args)

    def selectByTupleRanges(self, *args):
        """
        selectByTupleRanges(self, std::vector<(std::pair<(int,int)>,std::allocator<(std::pair<(int,int)>)>)> ranges) -> DataArrayInt
        selectByTupleRanges(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_selectByTupleRanges(self, *args)

    def Meld(*args):
        """
        Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        Meld(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Meld(*args)

    if _newclass:Meld = staticmethod(Meld)
    __swig_getmethods__["Meld"] = lambda x: Meld
    def Aggregate(*args):
        """
        Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
        Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        Aggregate(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Aggregate(*args)

    if _newclass:Aggregate = staticmethod(Aggregate)
    __swig_getmethods__["Aggregate"] = lambda x: Aggregate
    def BuildUnion(*args):
        """
        BuildUnion(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        BuildUnion(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_BuildUnion(*args)

    if _newclass:BuildUnion = staticmethod(BuildUnion)
    __swig_getmethods__["BuildUnion"] = lambda x: BuildUnion
    def BuildIntersection(*args):
        """
        BuildIntersection(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
        BuildIntersection(PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_BuildIntersection(*args)

    if _newclass:BuildIntersection = staticmethod(BuildIntersection)
    __swig_getmethods__["BuildIntersection"] = lambda x: BuildIntersection
    def getMaxValue(self, *args):
        """
        getMaxValue(self, int tupleId) -> int
        getMaxValue(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMaxValue(self, *args)

    def getMinValue(self, *args):
        """
        getMinValue(self, int tupleId) -> int
        getMinValue(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMinValue(self, *args)

    def index(self, *args):
        """
        index(self, PyObject obj) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayInt_index(self, *args)

    def __contains__(self, *args):
        """
        __contains__(self, PyObject obj) -> bool

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___contains__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___setitem__(self, *args)

    def __neg__(self):
        """
        __neg__(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___neg__(self)

    def __add__(self, *args):
        """
        __add__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___add__(self, *args)

    def __radd__(self, *args):
        """
        __radd__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___radd__(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt____iadd___(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___sub__(self, *args)

    def __rsub__(self, *args):
        """
        __rsub__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rsub__(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt____isub___(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___mul__(self, *args)

    def __rmul__(self, *args):
        """
        __rmul__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rmul__(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt____imul___(self, *args)

    def __div__(self, *args):
        """
        __div__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___div__(self, *args)

    def __rdiv__(self, *args):
        """
        __rdiv__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rdiv__(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt____idiv___(self, *args)

    def __mod__(self, *args):
        """
        __mod__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___mod__(self, *args)

    def __rmod__(self, *args):
        """
        __rmod__(self, PyObject obj) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rmod__(self, *args)

    def ___imod___(self, *args):
        """
        ___imod___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayInt____imod___(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayInt
    __del__ = lambda self : None;
DataArrayInt_swigregister = _MEDCouplingRemapper.DataArrayInt_swigregister
DataArrayInt_swigregister(DataArrayInt)

def DataArrayInt_Add(*args):
  """
    DataArrayInt_Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Add(*args)

def DataArrayInt_Substract(*args):
  """
    DataArrayInt_Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Substract(*args)

def DataArrayInt_Multiply(*args):
  """
    DataArrayInt_Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Multiply(*args)

def DataArrayInt_Divide(*args):
  """
    DataArrayInt_Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Divide(*args)

def DataArrayInt_Modulus(*args):
  """
    DataArrayInt_Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Modulus(*args)

def DataArrayInt_CheckAndPreparePermutation(*args):
  """
    DataArrayInt_CheckAndPreparePermutation(int start, int end) -> int

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_CheckAndPreparePermutation(*args)

def DataArrayInt_Range(*args):
  """
    DataArrayInt_Range(int begin, int end, int step) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Range(*args)

def DataArrayInt_New(*args):
  """
    New() -> DataArrayInt
    New(PyObject elt0, PyObject elt1 = None, PyObject elt2 = None) -> DataArrayInt
    New(PyObject elt0, PyObject elt1 = None) -> DataArrayInt
    DataArrayInt_New(PyObject elt0) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_New(*args)

def DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args):
  """
    BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI, 
        int newNbOfTuples) -> DataArrayInt
    DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(int nbOfOldTuples, DataArrayInt arr, DataArrayInt arrI) -> PyObject

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_BuildOld2NewArrayFromSurjectiveFormat2(*args)

def DataArrayInt_MakePartition(*args):
  """
    MakePartition(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> groups, 
        int newNb, 
        std::vector<(std::vector<(int,std::allocator<(int)>)>,std::allocator<(std::vector<(int,std::allocator<(int)>)>)>)> fidsOfGroups) -> DataArrayInt
    DataArrayInt_MakePartition(PyObject gps, int newNb) -> PyObject

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_MakePartition(*args)

def DataArrayInt_Meld(*args):
  """
    Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    Meld(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_Meld(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Meld(*args)

def DataArrayInt_Aggregate(*args):
  """
    Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
    Aggregate(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_Aggregate(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_Aggregate(*args)

def DataArrayInt_BuildUnion(*args):
  """
    BuildUnion(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_BuildUnion(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_BuildUnion(*args)

def DataArrayInt_BuildIntersection(*args):
  """
    BuildIntersection(std::vector<(p.q(const).ParaMEDMEM::DataArrayInt,std::allocator<(p.q(const).ParaMEDMEM::DataArrayInt)>)> arr) -> DataArrayInt
    DataArrayInt_BuildIntersection(PyObject li) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.DataArrayInt_BuildIntersection(*args)

class DataArrayIntIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DataArrayInt da) -> DataArrayIntIterator

        1
        """
        this = _MEDCouplingRemapper.new_DataArrayIntIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayIntIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntIterator_next(self)

DataArrayIntIterator_swigregister = _MEDCouplingRemapper.DataArrayIntIterator_swigregister
DataArrayIntIterator_swigregister(DataArrayIntIterator)

class DataArrayIntTuple(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntTuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int pt, int nbOfComp) -> DataArrayIntTuple

        1
        """
        this = _MEDCouplingRemapper.new_DataArrayIntTuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCompo(self):
        """
        getNumberOfCompo(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple_getNumberOfCompo(self)

    def getConstPointer(self):
        """
        getConstPointer(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple_getConstPointer(self)

    def getPointer(self):
        """
        getPointer(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple_getPointer(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___str__(self)

    def __int__(self):
        """
        __int__(self) -> int

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___int__(self)

    def buildDAInt(self, *args):
        """
        buildDAInt(self, int nbOfTuples, int nbOfCompo) -> DataArrayInt
        buildDAInt(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple_buildDAInt(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____idiv___(self, *args)

    def ___imod___(self, *args):
        """
        ___imod___(self, PyObject trueSelf, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____imod___(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject obj) -> PyObject

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject obj, PyObject value) -> DataArrayIntTuple

        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___setitem__(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayIntTuple
    __del__ = lambda self : None;
DataArrayIntTuple_swigregister = _MEDCouplingRemapper.DataArrayIntTuple_swigregister
DataArrayIntTuple_swigregister(DataArrayIntTuple)

ALL_C_MODE = _MEDCouplingRemapper.ALL_C_MODE
ALL_FORTRAN_MODE = _MEDCouplingRemapper.ALL_FORTRAN_MODE
NORM_POINT1 = _MEDCouplingRemapper.NORM_POINT1
NORM_SEG2 = _MEDCouplingRemapper.NORM_SEG2
NORM_SEG3 = _MEDCouplingRemapper.NORM_SEG3
NORM_SEG4 = _MEDCouplingRemapper.NORM_SEG4
NORM_POLYL = _MEDCouplingRemapper.NORM_POLYL
NORM_TRI3 = _MEDCouplingRemapper.NORM_TRI3
NORM_QUAD4 = _MEDCouplingRemapper.NORM_QUAD4
NORM_POLYGON = _MEDCouplingRemapper.NORM_POLYGON
NORM_TRI6 = _MEDCouplingRemapper.NORM_TRI6
NORM_TRI7 = _MEDCouplingRemapper.NORM_TRI7
NORM_QUAD8 = _MEDCouplingRemapper.NORM_QUAD8
NORM_QUAD9 = _MEDCouplingRemapper.NORM_QUAD9
NORM_QPOLYG = _MEDCouplingRemapper.NORM_QPOLYG
NORM_TETRA4 = _MEDCouplingRemapper.NORM_TETRA4
NORM_PYRA5 = _MEDCouplingRemapper.NORM_PYRA5
NORM_PENTA6 = _MEDCouplingRemapper.NORM_PENTA6
NORM_HEXA8 = _MEDCouplingRemapper.NORM_HEXA8
NORM_TETRA10 = _MEDCouplingRemapper.NORM_TETRA10
NORM_HEXGP12 = _MEDCouplingRemapper.NORM_HEXGP12
NORM_PYRA13 = _MEDCouplingRemapper.NORM_PYRA13
NORM_PENTA15 = _MEDCouplingRemapper.NORM_PENTA15
NORM_HEXA20 = _MEDCouplingRemapper.NORM_HEXA20
NORM_HEXA27 = _MEDCouplingRemapper.NORM_HEXA27
NORM_POLYHED = _MEDCouplingRemapper.NORM_POLYHED
NORM_ERROR = _MEDCouplingRemapper.NORM_ERROR
NORM_MAXTYPE = _MEDCouplingRemapper.NORM_MAXTYPE
class GenericMesh(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericMesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_GenericMesh
    __del__ = lambda self : None;
GenericMesh_swigregister = _MEDCouplingRemapper.GenericMesh_swigregister
GenericMesh_swigregister(GenericMesh)

NoNature = _MEDCouplingRemapper.NoNature
ConservativeVolumic = _MEDCouplingRemapper.ConservativeVolumic
Integral = _MEDCouplingRemapper.Integral
IntegralGlobConstraint = _MEDCouplingRemapper.IntegralGlobConstraint
RevIntegral = _MEDCouplingRemapper.RevIntegral
class MEDCouplingNatureOfField(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNatureOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNatureOfField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getRepr(*args):
        """
        getRepr(NatureOfField nat) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNatureOfField_getRepr(*args)

    if _newclass:getRepr = staticmethod(getRepr)
    __swig_getmethods__["getRepr"] = lambda x: getRepr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingNatureOfField
    __del__ = lambda self : None;
MEDCouplingNatureOfField_swigregister = _MEDCouplingRemapper.MEDCouplingNatureOfField_swigregister
MEDCouplingNatureOfField_swigregister(MEDCouplingNatureOfField)

def MEDCouplingNatureOfField_getRepr(*args):
  """
    MEDCouplingNatureOfField_getRepr(NatureOfField nat) -> char

    1
    """
  return _MEDCouplingRemapper.MEDCouplingNatureOfField_getRepr(*args)

class MEDCouplingTimeDiscretization(TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingTimeDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingTimeDiscretization, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_updateTime(self)

    def New(*args):
        """
        New(TypeOfTimeDiscretization type) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTimeUnit(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_copyTinyAttrFrom(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_copyTinyStringsFrom(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_checkCoherency(self)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_areCompatibleForMeld(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_isEqualIfNotWhy(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_isEqualWithoutConsideringStr(self, *args)

    def buildNewTimeReprFromThis(self, *args):
        """
        buildNewTimeReprFromThis(self, TypeOfTimeDiscretization type, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_buildNewTimeReprFromThis(self, *args)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_divideEqual(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTinySerializationDbleInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_performCpy(self, *args)

    def setTimeTolerance(self, *args):
        """
        setTimeTolerance(self, double val)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setTimeTolerance(self, *args)

    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTimeTolerance(self)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_checkTimePresence(self, *args)

    def setArray(self, *args):
        """
        setArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setArray(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setEndArray(self, *args)

    def setArrays(self, *args):
        """
        setArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            TimeLabel owner)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setArrays(self, *args)

    def getArray(self, *args):
        """
        getArray(self) -> DataArrayDouble
        getArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getArray(self, *args)

    def getEndArray(self, *args):
        """
        getEndArray(self) -> DataArrayDouble
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getEndArray(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getValueForTime(self, *args)

    def getArrays(self, *args):
        """
        getArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getArrays(self, *args)

    def isBefore(self, *args):
        """
        isBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_isBefore(self, *args)

    def isStrictlyBefore(self, *args):
        """
        isStrictlyBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_isStrictlyBefore(self, *args)

    def getTime(self, *args):
        """
        getTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getEndTime(self, *args)

    def setTime(self, *args):
        """
        setTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setTime(self, *args)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setIteration(self, *args)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setOrder(self, *args)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double val)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setTimeValue(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setEndTimeValue(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setEndTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_getValueOnDiscTime(self, *args)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_inverse(self)

    def trace(self):
        """
        trace(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_trace(self)

    def deviator(self):
        """
        deviator(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_maxPerTuple(self)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, ivec compoIds) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, MEDCouplingTimeDiscretization other, ivec compoIds)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setSelectedComponents(self, *args)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_changeNbOfComponents(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_sortPerTuple(self, *args)

    def setUniformValue(self, *args):
        """
        setUniformValue(self, int nbOfTuple, int nbOfCompo, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_setUniformValue(self, *args)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_applyLin(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_applyFunc3(self, *args)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, FunctionToEvaluate func)
        applyFunc(self, int nbOfComp, char func)
        applyFunc(self, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_applyFunc(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_applyFuncFast64(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, DataArrayDouble loc, int nbOfComp, FunctionToEvaluate func)
        fillFromAnalytic(self, DataArrayDouble loc, int nbOfComp, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, DataArrayDouble loc, int nbOfComp, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, DataArrayDouble loc, int nbOfComp, svec varsOrder, 
            char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_fillFromAnalytic3(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingTimeDiscretization
    __del__ = lambda self : None;
MEDCouplingTimeDiscretization_swigregister = _MEDCouplingRemapper.MEDCouplingTimeDiscretization_swigregister
MEDCouplingTimeDiscretization_swigregister(MEDCouplingTimeDiscretization)

def MEDCouplingTimeDiscretization_New(*args):
  """
    MEDCouplingTimeDiscretization_New(TypeOfTimeDiscretization type) -> MEDCouplingTimeDiscretization

    1
    """
  return _MEDCouplingRemapper.MEDCouplingTimeDiscretization_New(*args)

class MEDCouplingNoTimeLabel(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNoTimeLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNoTimeLabel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingNoTimeLabel
        __init__(self, MEDCouplingTimeDiscretization other, bool deepCpy) -> MEDCouplingNoTimeLabel

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingNoTimeLabel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_divideEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_isEqualWithoutConsideringStr(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_areCompatibleForMeld(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_performCpy(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_checkTimePresence(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getValueForTime(self, *args)

    def isBefore(self, *args):
        """
        isBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_isBefore(self, *args)

    def isStrictlyBefore(self, *args):
        """
        isStrictlyBefore(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_isStrictlyBefore(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setEndTimeValue(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_setEndTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getValueOnDiscTime(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingNoTimeLabel_finishUnserialization2(self, *args)

    DISCRETIZATION = _MEDCouplingRemapper.MEDCouplingNoTimeLabel_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingNoTimeLabel
    __del__ = lambda self : None;
MEDCouplingNoTimeLabel_swigregister = _MEDCouplingRemapper.MEDCouplingNoTimeLabel_swigregister
MEDCouplingNoTimeLabel_swigregister(MEDCouplingNoTimeLabel)
cvar = _MEDCouplingRemapper.cvar
MEDCouplingNoTimeLabel.REPR = _MEDCouplingRemapper.cvar.MEDCouplingNoTimeLabel_REPR

class MEDCouplingWithTimeStep(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingWithTimeStep, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingWithTimeStep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingWithTimeStep

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingWithTimeStep()
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getStringRepr(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_copyTinyAttrFrom(self, *args)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getEnum(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_divideEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_isEqualWithoutConsideringStr(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_areCompatibleForMeld(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_performCpy(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_checkTimePresence(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_setEndTimeValue(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingWithTimeStep_getValueOnDiscTime(self, *args)

    DISCRETIZATION = _MEDCouplingRemapper.MEDCouplingWithTimeStep_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingWithTimeStep
    __del__ = lambda self : None;
MEDCouplingWithTimeStep_swigregister = _MEDCouplingRemapper.MEDCouplingWithTimeStep_swigregister
MEDCouplingWithTimeStep_swigregister(MEDCouplingWithTimeStep)
MEDCouplingWithTimeStep.REPR = _MEDCouplingRemapper.cvar.MEDCouplingWithTimeStep_REPR

class MEDCouplingConstOnTimeInterval(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingConstOnTimeInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingConstOnTimeInterval, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingConstOnTimeInterval

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingConstOnTimeInterval()
        try: self.this.append(this)
        except: self.this = this
    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_copyTinyAttrFrom(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_finishUnserialization2(self, *args)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_performCpy(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_areCompatibleForMeld(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_isEqualWithoutConsideringStr(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getArraysForTime(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getValueOnDiscTime(self, *args)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getEnum(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getStringRepr(self)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_divideEqual(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_setEndTimeValue(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_checkTimePresence(self, *args)

    DISCRETIZATION = _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingConstOnTimeInterval
    __del__ = lambda self : None;
MEDCouplingConstOnTimeInterval_swigregister = _MEDCouplingRemapper.MEDCouplingConstOnTimeInterval_swigregister
MEDCouplingConstOnTimeInterval_swigregister(MEDCouplingConstOnTimeInterval)
MEDCouplingConstOnTimeInterval.REPR = _MEDCouplingRemapper.cvar.MEDCouplingConstOnTimeInterval_REPR

class MEDCouplingTwoTimeSteps(MEDCouplingTimeDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingTwoTimeSteps, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTimeDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingTwoTimeSteps, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_updateTime(self)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_copyTinyAttrFrom(self, *args)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_copyTinyStringsFrom(self, *args)

    def getEndArray(self, *args):
        """
        getEndArray(self) -> DataArrayDouble
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getEndArray(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_checkCoherency(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingTimeDiscretization other, double prec, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingTimeDiscretization other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_isEqualWithoutConsideringStr(self, *args)

    def checkNoTimePresence(self):
        """
        checkNoTimePresence(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_checkNoTimePresence(self)

    def checkTimePresence(self, *args):
        """
        checkTimePresence(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_checkTimePresence(self, *args)

    def getArrays(self, *args):
        """
        getArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getArrays(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array, TimeLabel owner)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setEndArray(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double time, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setEndTime(self, *args)

    def getStartTime(self, *args):
        """
        getStartTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getStartTime(self, *args)

    def getEndTime(self, *args):
        """
        getEndTime(self, int iteration, int order) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getEndTime(self, *args)

    def setStartIteration(self, *args):
        """
        setStartIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setStartIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setEndIteration(self, *args)

    def setStartOrder(self, *args):
        """
        setStartOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setStartOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setEndOrder(self, *args)

    def setStartTimeValue(self, *args):
        """
        setStartTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setStartTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double time)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setEndTimeValue(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getTinySerializationDbleInformation(self, *args)

    def getTinySerializationStrInformation(self, *args):
        """
        getTinySerializationStrInformation(self, svec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getTinySerializationStrInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfoI, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_resizeForUnserialization(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, ivec tinyInfoI, dvec tinyInfoD, svec tinyInfoS)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_finishUnserialization(self, *args)

    def getTinySerializationIntInformation2(self, *args):
        """
        getTinySerializationIntInformation2(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getTinySerializationIntInformation2(self, *args)

    def getTinySerializationDbleInformation2(self, *args):
        """
        getTinySerializationDbleInformation2(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getTinySerializationDbleInformation2(self, *args)

    def finishUnserialization2(self, *args):
        """
        finishUnserialization2(self, ivec tinyInfoI, dvec tinyInfoD)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_finishUnserialization2(self, *args)

    def getArraysForTime(self, *args):
        """
        getArraysForTime(self, double time) -> std::vector<(p.q(const).ParaMEDMEM::DataArrayDouble,std::allocator<(p.q(const).ParaMEDMEM::DataArrayDouble)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_getArraysForTime(self, *args)

    def setArrays(self, *args):
        """
        setArrays(self, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            TimeLabel owner)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_setArrays(self, *args)

MEDCouplingTwoTimeSteps_swigregister = _MEDCouplingRemapper.MEDCouplingTwoTimeSteps_swigregister
MEDCouplingTwoTimeSteps_swigregister(MEDCouplingTwoTimeSteps)

class MEDCouplingLinearTime(MEDCouplingTwoTimeSteps):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingTwoTimeSteps]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingLinearTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingTwoTimeSteps]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingLinearTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingLinearTime

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingLinearTime()
        try: self.this.append(this)
        except: self.this = this
    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_getStringRepr(self)

    def getEnum(self):
        """
        getEnum(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_getEnum(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_checkCoherency(self)

    def performCpy(self, *args):
        """
        performCpy(self, bool deepCpy) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_performCpy(self, *args)

    def areCompatible(self, *args):
        """
        areCompatible(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_areCompatible(self, *args)

    def areStrictlyCompatible(self, *args):
        """
        areStrictlyCompatible(self, MEDCouplingTimeDiscretization other, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_areStrictlyCompatible(self, *args)

    def areStrictlyCompatibleForMul(self, *args):
        """
        areStrictlyCompatibleForMul(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_areStrictlyCompatibleForMul(self, *args)

    def areStrictlyCompatibleForDiv(self, *args):
        """
        areStrictlyCompatibleForDiv(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_areStrictlyCompatibleForDiv(self, *args)

    def areCompatibleForMeld(self, *args):
        """
        areCompatibleForMeld(self, MEDCouplingTimeDiscretization other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_areCompatibleForMeld(self, *args)

    def getValueForTime(self, *args):
        """
        getValueForTime(self, double time, dvec vals, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_getValueForTime(self, *args)

    def getValueOnTime(self, *args):
        """
        getValueOnTime(self, int eltId, double time, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_getValueOnTime(self, *args)

    def getValueOnDiscTime(self, *args):
        """
        getValueOnDiscTime(self, int eltId, int iteration, int order, double value)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_getValueOnDiscTime(self, *args)

    def aggregate(self, *args):
        """
        aggregate(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization
        aggregate(self, std::vector<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization,std::allocator<(p.q(const).ParaMEDMEM::MEDCouplingTimeDiscretization)>)> other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_aggregate(self, *args)

    def meld(self, *args):
        """
        meld(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_meld(self, *args)

    def dot(self, *args):
        """
        dot(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_dot(self, *args)

    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_crossProduct(self, *args)

    def max(self, *args):
        """
        max(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_max(self, *args)

    def min(self, *args):
        """
        min(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_min(self, *args)

    def add(self, *args):
        """
        add(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_add(self, *args)

    def addEqual(self, *args):
        """
        addEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_addEqual(self, *args)

    def substract(self, *args):
        """
        substract(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_substract(self, *args)

    def substractEqual(self, *args):
        """
        substractEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_substractEqual(self, *args)

    def multiply(self, *args):
        """
        multiply(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_multiply(self, *args)

    def multiplyEqual(self, *args):
        """
        multiplyEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_multiplyEqual(self, *args)

    def divide(self, *args):
        """
        divide(self, MEDCouplingTimeDiscretization other) -> MEDCouplingTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_divide(self, *args)

    def divideEqual(self, *args):
        """
        divideEqual(self, MEDCouplingTimeDiscretization other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingLinearTime_divideEqual(self, *args)

    DISCRETIZATION = _MEDCouplingRemapper.MEDCouplingLinearTime_DISCRETIZATION
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingLinearTime
    __del__ = lambda self : None;
MEDCouplingLinearTime_swigregister = _MEDCouplingRemapper.MEDCouplingLinearTime_swigregister
MEDCouplingLinearTime_swigregister(MEDCouplingLinearTime)
MEDCouplingLinearTime.REPR = _MEDCouplingRemapper.cvar.MEDCouplingLinearTime_REPR

class MEDCouplingFieldDiscretization(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretization, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def New(*args):
        """
        New(TypeOfField type) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def getPrecision(self):
        """
        getPrecision(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getPrecision(self)

    def setPrecision(self, *args):
        """
        setPrecision(self, double val)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_setPrecision(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_updateTime(self)

    def getTypeOfFieldFromStringRepr(*args):
        """
        getTypeOfFieldFromStringRepr(char repr) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args)

    if _newclass:getTypeOfFieldFromStringRepr = staticmethod(getTypeOfFieldFromStringRepr)
    __swig_getmethods__["getTypeOfFieldFromStringRepr"] = lambda x: getTypeOfFieldFromStringRepr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getEnum(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_isEqual(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_isEqualWithoutConsideringStr(self, *args)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getRepr(self)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getOffsetArr(self, *args)

    def normL1(self, *args):
        """
        normL1(self, MEDCouplingMesh mesh, DataArrayDouble arr, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_normL1(self, *args)

    def normL2(self, *args):
        """
        normL2(self, MEDCouplingMesh mesh, DataArrayDouble arr, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_normL2(self, *args)

    def integral(self, *args):
        """
        integral(self, MEDCouplingMesh mesh, DataArrayDouble arr, bool isWAbs, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_integral(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_checkCompatibilityWithNature(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, int old2NewBg, bool check = True)
        renumberCells(self, int old2NewBg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberCells(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberArraysForCell(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getValueOnMulti(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_computeTupleIdsToSelectFromCellIds(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_buildSubMeshData(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberValuesOnCellsR(self, *args)

    def getSerializationIntArray(self, *args):
        """
        getSerializationIntArray(self, DataArrayInt arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getSerializationIntArray(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_finishUnserialization(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_resizeForUnserialization(self, *args)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, MEDCouplingMesh m, NormalizedCellType type, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_setGaussLocalizationOnType(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, MEDCouplingMesh m, int begin, int end, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_setGaussLocalizationOnCells(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneType(self, *args)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> std::set<(int)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalizationIdsOfOneType(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId, ivec cellIds)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getCellIdsHavingGaussLocalization(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalization(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretization
    __del__ = lambda self : None;
    def clonePart(self, *args):
        """
        clonePart(self, PyObject li) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clonePart(self, *args)

MEDCouplingFieldDiscretization_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretization_swigregister
MEDCouplingFieldDiscretization_swigregister(MEDCouplingFieldDiscretization)

def MEDCouplingFieldDiscretization_New(*args):
  """
    MEDCouplingFieldDiscretization_New(TypeOfField type) -> MEDCouplingFieldDiscretization

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_New(*args)

def MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args):
  """
    MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(char repr) -> TypeOfField

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getTypeOfFieldFromStringRepr(*args)

class MEDCouplingFieldDiscretizationP0(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP0, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP0, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getRepr(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_isEqualIfNotWhy(self, *args)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getLocalizationOfDiscValues(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_checkCompatibilityWithNature(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_getValueOnMulti(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_renumberValuesOnCellsR(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_computeTupleIdsToSelectFromCellIds(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationP0
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationP0_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_swigregister
MEDCouplingFieldDiscretizationP0_swigregister(MEDCouplingFieldDiscretizationP0)
MEDCouplingFieldDiscretizationP0.REPR = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationP0_REPR
MEDCouplingFieldDiscretizationP0.TYPE = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationP0_TYPE

class MEDCouplingFieldDiscretizationOnNodes(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationOnNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationOnNodes, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_checkCoherencyBetween(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_renumberValuesOnCellsR(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_getValueOnPos(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationOnNodes
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationOnNodes_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_swigregister
MEDCouplingFieldDiscretizationOnNodes_swigregister(MEDCouplingFieldDiscretizationOnNodes)

class MEDCouplingFieldDiscretizationP1(MEDCouplingFieldDiscretizationOnNodes):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP1, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP1, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_getRepr(self)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_checkCompatibilityWithNature(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_isEqualIfNotWhy(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_getValueOn(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_getValueOnMulti(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationP1
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationP1_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_swigregister
MEDCouplingFieldDiscretizationP1_swigregister(MEDCouplingFieldDiscretizationP1)
MEDCouplingFieldDiscretizationP1.REPR = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationP1_REPR
MEDCouplingFieldDiscretizationP1.TYPE = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationP1_TYPE

class MEDCouplingFieldDiscretizationPerCell(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationPerCell, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationPerCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getArrayOfDiscIds(self):
        """
        getArrayOfDiscIds(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_getArrayOfDiscIds(self)

MEDCouplingFieldDiscretizationPerCell_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_swigregister
MEDCouplingFieldDiscretizationPerCell_swigregister(MEDCouplingFieldDiscretizationPerCell)

class MEDCouplingFieldDiscretizationGauss(MEDCouplingFieldDiscretizationPerCell):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGauss, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingFieldDiscretizationGauss

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingFieldDiscretizationGauss()
        try: self.this.append(this)
        except: self.this = this
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getEnum(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_isEqualIfNotWhy(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_isEqualWithoutConsideringStr(self, *args)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getRepr(self)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_checkCompatibilityWithNature(self, *args)

    def getTinySerializationIntInformation(self, *args):
        """
        getTinySerializationIntInformation(self, ivec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getTinySerializationIntInformation(self, *args)

    def getTinySerializationDbleInformation(self, *args):
        """
        getTinySerializationDbleInformation(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getTinySerializationDbleInformation(self, *args)

    def finishUnserialization(self, *args):
        """
        finishUnserialization(self, dvec tinyInfo)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_finishUnserialization(self, *args)

    def getSerializationIntArray(self, *args):
        """
        getSerializationIntArray(self, DataArrayInt arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getSerializationIntArray(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_resizeForUnserialization(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getValueOnMulti(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_renumberValuesOnCellsR(self, *args)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, MEDCouplingMesh m, NormalizedCellType type, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_setGaussLocalizationOnType(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, MEDCouplingMesh m, int begin, int end, dvec refCoo, 
            dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_setGaussLocalizationOnCells(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdOfOneType(self, *args)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> std::set<(int)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getGaussLocalizationIdsOfOneType(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId, ivec cellIds)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getCellIdsHavingGaussLocalization(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_getGaussLocalization(self, *args)

    def splitIntoSingleGaussDicrPerCellType(self, *args):
        """
        splitIntoSingleGaussDicrPerCellType(self, ivec locIds) -> std::vector<(p.ParaMEDMEM::DataArrayInt,std::allocator<(p.ParaMEDMEM::DataArrayInt)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_splitIntoSingleGaussDicrPerCellType(self, *args)

    def buildNbOfGaussPointPerCellField(self):
        """
        buildNbOfGaussPointPerCellField(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_buildNbOfGaussPointPerCellField(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationGauss
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationGauss_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_swigregister
MEDCouplingFieldDiscretizationGauss_swigregister(MEDCouplingFieldDiscretizationGauss)
MEDCouplingFieldDiscretizationGauss.REPR = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationGauss_REPR
MEDCouplingFieldDiscretizationGauss.TYPE = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationGauss_TYPE

class MEDCouplingFieldDiscretizationGaussNE(MEDCouplingFieldDiscretization):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGaussNE, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGaussNE, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingFieldDiscretizationGaussNE

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingFieldDiscretizationGaussNE()
        try: self.this.append(this)
        except: self.this = this
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getEnum(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getStringRepr(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getRepr(self)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_isEqualIfNotWhy(self, *args)

    def getNumberOfTuples(self, *args):
        """
        getNumberOfTuples(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getNumberOfTuples(self, *args)

    def getNumberOfMeshPlaces(self, *args):
        """
        getNumberOfMeshPlaces(self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getNumberOfMeshPlaces(self, *args)

    def getOffsetArr(self, *args):
        """
        getOffsetArr(self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getOffsetArr(self, *args)

    def renumberArraysForCell(self, *args):
        """
        renumberArraysForCell(self, MEDCouplingMesh mesh, std::vector<(p.ParaMEDMEM::DataArrayDouble,std::allocator<(p.ParaMEDMEM::DataArrayDouble)>)> arrays, 
            int old2NewBg, 
            bool check)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_renumberArraysForCell(self, *args)

    def getLocalizationOfDiscValues(self, *args):
        """
        getLocalizationOfDiscValues(self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getLocalizationOfDiscValues(self, *args)

    def computeMeshRestrictionFromTupleIds(self, *args):
        """
        computeMeshRestrictionFromTupleIds(self, MEDCouplingMesh mesh, int partBg, int partEnd, DataArrayInt cellRest)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_computeMeshRestrictionFromTupleIds(self, *args)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_checkCompatibilityWithNature(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, 
            int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getIJK(self, *args)

    def checkCoherencyBetween(self, *args):
        """
        checkCoherencyBetween(self, MEDCouplingMesh mesh, DataArrayDouble da)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_checkCoherencyBetween(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getValueOn(self, *args)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, 
            int k, double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_getValueOnMulti(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, MEDCouplingMesh mesh, int start, int end, DataArrayInt di) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, MEDCouplingMesh mesh, int startCellIds, int endCellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_computeTupleIdsToSelectFromCellIds(self, *args)

    def renumberValuesOnNodes(self, *args):
        """
        renumberValuesOnNodes(self, double epsOnVals, int old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnNodes(self, *args)

    def renumberValuesOnCells(self, *args):
        """
        renumberValuesOnCells(self, double epsOnVals, MEDCouplingMesh mesh, int old2New, 
            int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnCells(self, *args)

    def renumberValuesOnCellsR(self, *args):
        """
        renumberValuesOnCellsR(self, MEDCouplingMesh mesh, int new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_renumberValuesOnCellsR(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationGaussNE
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationGaussNE_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_swigregister
MEDCouplingFieldDiscretizationGaussNE_swigregister(MEDCouplingFieldDiscretizationGaussNE)
MEDCouplingFieldDiscretizationGaussNE.REPR = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationGaussNE_REPR
MEDCouplingFieldDiscretizationGaussNE.TYPE = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationGaussNE_TYPE

class MEDCouplingFieldDiscretizationKriging(MEDCouplingFieldDiscretizationOnNodes):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationKriging, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationKriging, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getEnum(self):
        """
        getEnum(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_getEnum(self)

    def getRepr(self):
        """
        getRepr(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_getRepr(self)

    def clone(self):
        """
        clone(self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_clone(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_getStringRepr(self)

    def checkCompatibilityWithNature(self, *args):
        """
        checkCompatibilityWithNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_checkCompatibilityWithNature(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingFieldDiscretization other, double eps, string reason) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_isEqualIfNotWhy(self, *args)

    def getMeasureField(self, *args):
        """
        getMeasureField(self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_getMeasureField(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            double res)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_getValueOn(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, DataArrayDouble arr, MEDCouplingMesh mesh, double loc, 
            int nbOfPoints) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_getValueOnMulti(self, *args)

    def computeVectorOfCoefficients(self, *args):
        """
        computeVectorOfCoefficients(self, MEDCouplingMesh mesh, DataArrayDouble arr, int isDrift) -> DataArrayDouble
        computeVectorOfCoefficients(self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_computeVectorOfCoefficients(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationKriging
    __del__ = lambda self : None;
MEDCouplingFieldDiscretizationKriging_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_swigregister
MEDCouplingFieldDiscretizationKriging_swigregister(MEDCouplingFieldDiscretizationKriging)
MEDCouplingFieldDiscretizationKriging.REPR = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationKriging_REPR
MEDCouplingFieldDiscretizationKriging.TYPE = _MEDCouplingRemapper.cvar.MEDCouplingFieldDiscretizationKriging_TYPE

class MEDCouplingGaussLocalization(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingGaussLocalization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingGaussLocalization, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec w) -> MEDCouplingGaussLocalization

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingGaussLocalization(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getType(self)

    def getNumberOfGaussPt(self):
        """
        getNumberOfGaussPt(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getNumberOfGaussPt(self)

    def getDimension(self):
        """
        getDimension(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getDimension(self)

    def getNumberOfPtsInRefCell(self):
        """
        getNumberOfPtsInRefCell(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getNumberOfPtsInRefCell(self)

    def getStringRepr(self):
        """
        getStringRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getStringRepr(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_checkCoherency(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingGaussLocalization other, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_isEqual(self, *args)

    def getRefCoords(self):
        """
        getRefCoords(self) -> dvec

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getRefCoords(self)

    def getRefCoord(self, *args):
        """
        getRefCoord(self, int ptIdInCell, int comp) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getRefCoord(self, *args)

    def getGaussCoords(self):
        """
        getGaussCoords(self) -> dvec

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getGaussCoords(self)

    def getGaussCoord(self, *args):
        """
        getGaussCoord(self, int gaussPtIdInCell, int comp) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getGaussCoord(self, *args)

    def getWeights(self):
        """
        getWeights(self) -> dvec

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getWeights(self)

    def getWeight(self, *args):
        """
        getWeight(self, int gaussPtIdInCell, double newVal) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getWeight(self, *args)

    def setRefCoord(self, *args):
        """
        setRefCoord(self, int ptIdInCell, int comp, double newVal)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setRefCoord(self, *args)

    def setGaussCoord(self, *args):
        """
        setGaussCoord(self, int gaussPtIdInCell, int comp, double newVal)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setGaussCoord(self, *args)

    def setWeight(self, *args):
        """
        setWeight(self, int gaussPtIdInCell, double newVal)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setWeight(self, *args)

    def BuildNewInstanceFromTinyInfo(*args):
        """
        BuildNewInstanceFromTinyInfo(int dim, ivec tinyData) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args)

    if _newclass:BuildNewInstanceFromTinyInfo = staticmethod(BuildNewInstanceFromTinyInfo)
    __swig_getmethods__["BuildNewInstanceFromTinyInfo"] = lambda x: BuildNewInstanceFromTinyInfo
    def AreAlmostEqual(*args):
        """
        AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_AreAlmostEqual(*args)

    if _newclass:AreAlmostEqual = staticmethod(AreAlmostEqual)
    __swig_getmethods__["AreAlmostEqual"] = lambda x: AreAlmostEqual
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingGaussLocalization
    __del__ = lambda self : None;
MEDCouplingGaussLocalization_swigregister = _MEDCouplingRemapper.MEDCouplingGaussLocalization_swigregister
MEDCouplingGaussLocalization_swigregister(MEDCouplingGaussLocalization)

def MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args):
  """
    MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(int dim, ivec tinyData) -> MEDCouplingGaussLocalization

    1
    """
  return _MEDCouplingRemapper.MEDCouplingGaussLocalization_BuildNewInstanceFromTinyInfo(*args)

def MEDCouplingGaussLocalization_AreAlmostEqual(*args):
  """
    MEDCouplingGaussLocalization_AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

    1
    """
  return _MEDCouplingRemapper.MEDCouplingGaussLocalization_AreAlmostEqual(*args)

class MEDCouplingPointSet(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingPointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingPointSet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_updateTime(self)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coords)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_setCoords(self, *args)

    def getCoordinatesAndOwner(self):
        """
        getCoordinatesAndOwner(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCoordinatesAndOwner(self)

    def areCoordsEqual(self, *args):
        """
        areCoordsEqual(self, MEDCouplingPointSet other, double prec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_areCoordsEqual(self, *args)

    def zipCoords(self):
        """
        zipCoords(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_zipCoords(self)

    def getCaracteristicDimension(self):
        """
        getCaracteristicDimension(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCaracteristicDimension(self)

    def recenterForMaxPrecision(self, *args):
        """
        recenterForMaxPrecision(self, double eps)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_recenterForMaxPrecision(self, *args)

    def changeSpaceDimension(self, *args):
        """
        changeSpaceDimension(self, int newSpaceDim, double dftVal = 0.)
        changeSpaceDimension(self, int newSpaceDim)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_changeSpaceDimension(self, *args)

    def tryToShareSameCoords(self, *args):
        """
        tryToShareSameCoords(self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_tryToShareSameCoords(self, *args)

    def buildPartOfMySelf2(self, *args):
        """
        buildPartOfMySelf2(self, int start, int end, int step) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelf2(self, *args)

    def tryToShareSameCoordsPermute(self, *args):
        """
        tryToShareSameCoordsPermute(self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_tryToShareSameCoordsPermute(self, *args)

    def MergeNodesArray(*args):
        """
        MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_MergeNodesArray(*args)

    if _newclass:MergeNodesArray = staticmethod(MergeNodesArray)
    __swig_getmethods__["MergeNodesArray"] = lambda x: MergeNodesArray
    def BuildInstanceFromMeshType(*args):
        """
        BuildInstanceFromMeshType(MEDCouplingMeshType type) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_BuildInstanceFromMeshType(*args)

    if _newclass:BuildInstanceFromMeshType = staticmethod(BuildInstanceFromMeshType)
    __swig_getmethods__["BuildInstanceFromMeshType"] = lambda x: BuildInstanceFromMeshType
    def buildBoundaryMesh(self, *args):
        """
        buildBoundaryMesh(self, bool keepCoords) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildBoundaryMesh(self, *args)

    def isEmptyMesh(self, *args):
        """
        isEmptyMesh(self, ivec tinyInfo) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_isEmptyMesh(self, *args)

    def getTinySerializationInformation(self, *args):
        """
        getTinySerializationInformation(self, dvec tinyInfoD, ivec tinyInfo, svec littleStrings)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getTinySerializationInformation(self, *args)

    def resizeForUnserialization(self, *args):
        """
        resizeForUnserialization(self, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, 
            svec littleStrings)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_resizeForUnserialization(self, *args)

    def serialize(self, *args):
        """
        serialize(self, DataArrayInt a1, DataArrayDouble a2)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_serialize(self, *args)

    def unserialization(self, *args):
        """
        unserialization(self, dvec tinyInfoD, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, 
            svec littleStrings)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_unserialization(self, *args)

    def zipCoordsTraducer(self):
        """
        zipCoordsTraducer(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_zipCoordsTraducer(self)

    def findBoundaryNodes(self):
        """
        findBoundaryNodes(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findBoundaryNodes(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet___str__(self)

    def buildNewNumberingFromCommonNodesFormat(self, *args):
        """
        buildNewNumberingFromCommonNodesFormat(self, DataArrayInt comm, DataArrayInt commIndex) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildNewNumberingFromCommonNodesFormat(self, *args)

    def findCommonNodes(self, *args):
        """
        findCommonNodes(self, double prec, int limitTupleId = -1) -> PyObject
        findCommonNodes(self, double prec) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findCommonNodes(self, *args)

    def getCoords(self):
        """
        getCoords(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCoords(self)

    def buildPartOfMySelf(self, *args):
        """
        buildPartOfMySelf(self, PyObject li, bool keepCoords = True) -> PyObject
        buildPartOfMySelf(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelf(self, *args)

    def buildPartOfMySelfNode(self, *args):
        """
        buildPartOfMySelfNode(self, PyObject li, bool fullyIn) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelfNode(self, *args)

    def buildFacePartOfMySelfNode(self, *args):
        """
        buildFacePartOfMySelfNode(self, PyObject li, bool fullyIn) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildFacePartOfMySelfNode(self, *args)

    def renumberNodes(self, *args):
        """
        renumberNodes(self, PyObject li, int newNbOfNodes)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_renumberNodes(self, *args)

    def renumberNodes2(self, *args):
        """
        renumberNodes2(self, PyObject li, int newNbOfNodes)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_renumberNodes2(self, *args)

    def findNodesOnLine(self, *args):
        """
        findNodesOnLine(self, PyObject pt, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findNodesOnLine(self, *args)

    def findNodesOnPlane(self, *args):
        """
        findNodesOnPlane(self, PyObject pt, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findNodesOnPlane(self, *args)

    def getNodeIdsNearPoint(self, *args):
        """
        getNodeIdsNearPoint(self, PyObject pt, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getNodeIdsNearPoint(self, *args)

    def getNodeIdsNearPoints(self, *args):
        """
        getNodeIdsNearPoints(self, PyObject pt, int nbOfNodes, double eps) -> PyObject
        getNodeIdsNearPoints(self, PyObject pt, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getNodeIdsNearPoints(self, *args)

    def getCellsInBoundingBox(self, *args):
        """
        getCellsInBoundingBox(self, INTERP_KERNEL::DirectedBoundingBox bbox, double eps, 
            ivec elems)
        getCellsInBoundingBox(self, PyObject bbox, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCellsInBoundingBox(self, *args)

    def duplicateNodesInCoords(self, *args):
        """
        duplicateNodesInCoords(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_duplicateNodesInCoords(self, *args)

    def Rotate2DAlg(*args):
        """
        Rotate2DAlg(PyObject center, double angle, int nbNodes, PyObject coords)
        Rotate2DAlg(PyObject center, double angle, PyObject coords)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate2DAlg(*args)

    if _newclass:Rotate2DAlg = staticmethod(Rotate2DAlg)
    __swig_getmethods__["Rotate2DAlg"] = lambda x: Rotate2DAlg
    def Rotate3DAlg(*args):
        """
        Rotate3DAlg(PyObject center, PyObject vect, double angle, int nbNodes, 
            PyObject coords)
        Rotate3DAlg(PyObject center, PyObject vect, double angle, PyObject coords)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate3DAlg(*args)

    if _newclass:Rotate3DAlg = staticmethod(Rotate3DAlg)
    __swig_getmethods__["Rotate3DAlg"] = lambda x: Rotate3DAlg
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingPointSet
    __del__ = lambda self : None;
MEDCouplingPointSet_swigregister = _MEDCouplingRemapper.MEDCouplingPointSet_swigregister
MEDCouplingPointSet_swigregister(MEDCouplingPointSet)

def MEDCouplingPointSet_MergeNodesArray(*args):
  """
    MEDCouplingPointSet_MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingPointSet_MergeNodesArray(*args)

def MEDCouplingPointSet_BuildInstanceFromMeshType(*args):
  """
    MEDCouplingPointSet_BuildInstanceFromMeshType(MEDCouplingMeshType type) -> MEDCouplingPointSet

    1
    """
  return _MEDCouplingRemapper.MEDCouplingPointSet_BuildInstanceFromMeshType(*args)

def MEDCouplingPointSet_Rotate2DAlg(*args):
  """
    Rotate2DAlg(PyObject center, double angle, int nbNodes, PyObject coords)
    MEDCouplingPointSet_Rotate2DAlg(PyObject center, double angle, PyObject coords)

    1
    """
  return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate2DAlg(*args)

def MEDCouplingPointSet_Rotate3DAlg(*args):
  """
    Rotate3DAlg(PyObject center, PyObject vect, double angle, int nbNodes, 
        PyObject coords)
    MEDCouplingPointSet_Rotate3DAlg(PyObject center, PyObject vect, double angle, PyObject coords)

    1
    """
  return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate3DAlg(*args)

class MEDCouplingUMeshCell(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCell_getType(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCell___str__(self)

    def getAllConn(self):
        """
        getAllConn(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCell_getAllConn(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCell
    __del__ = lambda self : None;
MEDCouplingUMeshCell_swigregister = _MEDCouplingRemapper.MEDCouplingUMeshCell_swigregister
MEDCouplingUMeshCell_swigregister(MEDCouplingUMeshCell)

class MEDCouplingUMeshCellIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellIterator_next(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellIterator
    __del__ = lambda self : None;
MEDCouplingUMeshCellIterator_swigregister = _MEDCouplingRemapper.MEDCouplingUMeshCellIterator_swigregister
MEDCouplingUMeshCellIterator_swigregister(MEDCouplingUMeshCellIterator)

class MEDCouplingUMeshCellByTypeIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellByTypeIterator
    __del__ = lambda self : None;
    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellByTypeIterator_next(self)

MEDCouplingUMeshCellByTypeIterator_swigregister = _MEDCouplingRemapper.MEDCouplingUMeshCellByTypeIterator_swigregister
MEDCouplingUMeshCellByTypeIterator_swigregister(MEDCouplingUMeshCellByTypeIterator)

class MEDCouplingUMeshCellByTypeEntry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellByTypeEntry
    __del__ = lambda self : None;
    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellByTypeIterator

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellByTypeEntry___iter__(self)

MEDCouplingUMeshCellByTypeEntry_swigregister = _MEDCouplingRemapper.MEDCouplingUMeshCellByTypeEntry_swigregister
MEDCouplingUMeshCellByTypeEntry_swigregister(MEDCouplingUMeshCellByTypeEntry)

class MEDCouplingUMeshCellEntry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self):
        """
        getType(self) -> NormalizedCellType

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellEntry_getType(self)

    def getNumberOfElems(self):
        """
        getNumberOfElems(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellEntry_getNumberOfElems(self)

    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellEntry___iter__(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellEntry
    __del__ = lambda self : None;
MEDCouplingUMeshCellEntry_swigregister = _MEDCouplingRemapper.MEDCouplingUMeshCellEntry_swigregister
MEDCouplingUMeshCellEntry_swigregister(MEDCouplingUMeshCellEntry)

class MEDCouplingUMesh(MEDCouplingPointSet):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingPointSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingPointSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDCouplingUMesh
        New(char meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_clone(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_updateTime(self)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkCoherency(self)

    def setMeshDimension(self, *args):
        """
        setMeshDimension(self, int meshDim)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setMeshDimension(self, *args)

    def allocateCells(self, *args):
        """
        allocateCells(self, int nbOfCells)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_allocateCells(self, *args)

    def finishInsertingCells(self):
        """
        finishInsertingCells(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_finishInsertingCells(self)

    def cellsByType(self):
        """
        cellsByType(self) -> MEDCouplingUMeshCellByTypeEntry

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_cellsByType(self)

    def setConnectivity(self, *args):
        """
        setConnectivity(self, DataArrayInt conn, DataArrayInt connIndex, bool isComputingTypes = True)
        setConnectivity(self, DataArrayInt conn, DataArrayInt connIndex)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setConnectivity(self, *args)

    def getTypeOfCell(self, *args):
        """
        getTypeOfCell(self, int cellId) -> NormalizedCellType

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getTypeOfCell(self, *args)

    def setPartOfMySelf2(self, *args):
        """
        setPartOfMySelf2(self, int start, int end, int step, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setPartOfMySelf2(self, *args)

    def getNumberOfNodesInCell(self, *args):
        """
        getNumberOfNodesInCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNumberOfNodesInCell(self, *args)

    def getMeshLength(self):
        """
        getMeshLength(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getMeshLength(self)

    def computeTypes(self):
        """
        computeTypes(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeTypes(self)

    def giveCellsWithType(self, *args):
        """
        giveCellsWithType(self, NormalizedCellType type) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_giveCellsWithType(self, *args)

    def reprConnectivityOfThis(self):
        """
        reprConnectivityOfThis(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_reprConnectivityOfThis(self)

    def buildSetInstanceFromThis(self, *args):
        """
        buildSetInstanceFromThis(self, int spaceDim) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSetInstanceFromThis(self, *args)

    def shiftNodeNumbersInConn(self, *args):
        """
        shiftNodeNumbersInConn(self, int delta)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_shiftNodeNumbersInConn(self, *args)

    def getQuadraticStatus(self):
        """
        getQuadraticStatus(self) -> std::vector<(bool,std::allocator<(bool)>)>

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getQuadraticStatus(self)

    def findCellIdsOnBoundary(self):
        """
        findCellIdsOnBoundary(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findCellIdsOnBoundary(self)

    def computeSkin(self):
        """
        computeSkin(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeSkin(self)

    def checkConsecutiveCellTypes(self):
        """
        checkConsecutiveCellTypes(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkConsecutiveCellTypes(self)

    def rearrange2ConsecutiveCellTypes(self):
        """
        rearrange2ConsecutiveCellTypes(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_rearrange2ConsecutiveCellTypes(self)

    def sortCellsInMEDFileFrmt(self):
        """
        sortCellsInMEDFileFrmt(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_sortCellsInMEDFileFrmt(self)

    def convertCellArrayPerGeoType(self, *args):
        """
        convertCellArrayPerGeoType(self, DataArrayInt da) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertCellArrayPerGeoType(self, *args)

    def computeFetchedNodeIds(self):
        """
        computeFetchedNodeIds(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeFetchedNodeIds(self)

    def zipConnectivityTraducer(self, *args):
        """
        zipConnectivityTraducer(self, int compType) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_zipConnectivityTraducer(self, *args)

    def computeNbOfNodesPerCell(self):
        """
        computeNbOfNodesPerCell(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeNbOfNodesPerCell(self)

    def orientCorrectlyPolyhedrons(self):
        """
        orientCorrectlyPolyhedrons(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_orientCorrectlyPolyhedrons(self)

    def isPresenceOfQuadratic(self):
        """
        isPresenceOfQuadratic(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_isPresenceOfQuadratic(self)

    def buildDirectionVectorField(self):
        """
        buildDirectionVectorField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildDirectionVectorField(self)

    def isContiguous1D(self):
        """
        isContiguous1D(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_isContiguous1D(self)

    def tessellate2D(self, *args):
        """
        tessellate2D(self, double eps)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_tessellate2D(self, *args)

    def tessellate2DCurve(self, *args):
        """
        tessellate2DCurve(self, double eps)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_tessellate2DCurve(self, *args)

    def convertQuadraticCellsToLinear(self):
        """
        convertQuadraticCellsToLinear(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertQuadraticCellsToLinear(self)

    def convertDegeneratedCells(self):
        """
        convertDegeneratedCells(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertDegeneratedCells(self)

    def areOnlySimplexCells(self):
        """
        areOnlySimplexCells(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_areOnlySimplexCells(self)

    def getEdgeRatioField(self):
        """
        getEdgeRatioField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getEdgeRatioField(self)

    def getAspectRatioField(self):
        """
        getAspectRatioField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getAspectRatioField(self)

    def getWarpField(self):
        """
        getWarpField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getWarpField(self)

    def getSkewField(self):
        """
        getSkewField(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getSkewField(self)

    def convexEnvelop2D(self):
        """
        convexEnvelop2D(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convexEnvelop2D(self)

    def cppRepr(self):
        """
        cppRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_cppRepr(self)

    def Build0DMeshFromCoords(*args):
        """
        Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_Build0DMeshFromCoords(*args)

    if _newclass:Build0DMeshFromCoords = staticmethod(Build0DMeshFromCoords)
    __swig_getmethods__["Build0DMeshFromCoords"] = lambda x: Build0DMeshFromCoords
    def ComputeSpreadZoneGradually(*args):
        """
        ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeSpreadZoneGradually(*args)

    if _newclass:ComputeSpreadZoneGradually = staticmethod(ComputeSpreadZoneGradually)
    __swig_getmethods__["ComputeSpreadZoneGradually"] = lambda x: ComputeSpreadZoneGradually
    def ComputeRangesFromTypeDistribution(*args):
        """
        ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args)

    if _newclass:ComputeRangesFromTypeDistribution = staticmethod(ComputeRangesFromTypeDistribution)
    __swig_getmethods__["ComputeRangesFromTypeDistribution"] = lambda x: ComputeRangesFromTypeDistribution
    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingUMesh
        __init__(self, char meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingUMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___str__(self)

    def __iter__(self):
        """
        __iter__(self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___iter__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject listOrDataArrI) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___getitem__(self, *args)

    def setPartOfMySelf(self, *args):
        """
        setPartOfMySelf(self, PyObject li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setPartOfMySelf(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PyObject li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___setitem__(self, *args)

    def insertNextCell(self, *args):
        """
        insertNextCell(self, NormalizedCellType type, int size, PyObject li)
        insertNextCell(self, NormalizedCellType type, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_insertNextCell(self, *args)

    def getNodalConnectivity(self):
        """
        getNodalConnectivity(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNodalConnectivity(self)

    def getNodalConnectivityIndex(self):
        """
        getNodalConnectivityIndex(self) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNodalConnectivityIndex(self)

    def getAllTypes(self):
        """
        getAllTypes(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getAllTypes(self)

    def mergeNodes(self, *args):
        """
        mergeNodes(self, double precision) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_mergeNodes(self, *args)

    def mergeNodes2(self, *args):
        """
        mergeNodes2(self, double precision) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_mergeNodes2(self, *args)

    def checkButterflyCells(self, eps = 1e-12):
        """
        checkButterflyCells(self, double eps = 1e-12) -> PyObject
        checkButterflyCells(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkButterflyCells(self, eps)

    def splitByType(self):
        """
        splitByType(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_splitByType(self)

    def partitionBySpreadZone(self):
        """
        partitionBySpreadZone(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_partitionBySpreadZone(self)

    def keepSpecifiedCells(self, *args):
        """
        keepSpecifiedCells(self, NormalizedCellType type, PyObject ids) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_keepSpecifiedCells(self, *args)

    def checkConsecutiveCellTypesAndOrder(self, *args):
        """
        checkConsecutiveCellTypesAndOrder(self, PyObject li) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkConsecutiveCellTypesAndOrder(self, *args)

    def getRenumArrForConsecutiveCellTypesSpec(self, *args):
        """
        getRenumArrForConsecutiveCellTypesSpec(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getRenumArrForConsecutiveCellTypesSpec(self, *args)

    def findNodesToDuplicate(self, *args):
        """
        findNodesToDuplicate(self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findNodesToDuplicate(self, *args)

    def findCellIdsLyingOn(self, *args):
        """
        findCellIdsLyingOn(self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findCellIdsLyingOn(self, *args)

    def duplicateNodes(self, *args):
        """
        duplicateNodes(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_duplicateNodes(self, *args)

    def duplicateNodesInConn(self, *args):
        """
        duplicateNodesInConn(self, PyObject li, int offset)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_duplicateNodesInConn(self, *args)

    def renumberNodesInConn(self, *args):
        """
        renumberNodesInConn(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_renumberNodesInConn(self, *args)

    def getLevArrPerCellTypes(self, *args):
        """
        getLevArrPerCellTypes(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getLevArrPerCellTypes(self, *args)

    def AggregateSortedByTypeMeshesOnSameCoords(*args):
        """
        AggregateSortedByTypeMeshesOnSameCoords(PyObject ms) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args)

    if _newclass:AggregateSortedByTypeMeshesOnSameCoords = staticmethod(AggregateSortedByTypeMeshesOnSameCoords)
    __swig_getmethods__["AggregateSortedByTypeMeshesOnSameCoords"] = lambda x: AggregateSortedByTypeMeshesOnSameCoords
    def MergeUMeshesOnSameCoords(*args):
        """
        MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshesOnSameCoords(PyObject ms) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

    if _newclass:MergeUMeshesOnSameCoords = staticmethod(MergeUMeshesOnSameCoords)
    __swig_getmethods__["MergeUMeshesOnSameCoords"] = lambda x: MergeUMeshesOnSameCoords
    def FuseUMeshesOnSameCoords(*args):
        """
        FuseUMeshesOnSameCoords(PyObject ms, int compType) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args)

    if _newclass:FuseUMeshesOnSameCoords = staticmethod(FuseUMeshesOnSameCoords)
    __swig_getmethods__["FuseUMeshesOnSameCoords"] = lambda x: FuseUMeshesOnSameCoords
    def PutUMeshesOnSameAggregatedCoords(*args):
        """
        PutUMeshesOnSameAggregatedCoords(PyObject ms)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args)

    if _newclass:PutUMeshesOnSameAggregatedCoords = staticmethod(PutUMeshesOnSameAggregatedCoords)
    __swig_getmethods__["PutUMeshesOnSameAggregatedCoords"] = lambda x: PutUMeshesOnSameAggregatedCoords
    def MergeNodesOnUMeshesSharingSameCoords(*args):
        """
        MergeNodesOnUMeshesSharingSameCoords(PyObject ms, double eps)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args)

    if _newclass:MergeNodesOnUMeshesSharingSameCoords = staticmethod(MergeNodesOnUMeshesSharingSameCoords)
    __swig_getmethods__["MergeNodesOnUMeshesSharingSameCoords"] = lambda x: MergeNodesOnUMeshesSharingSameCoords
    def RemoveIdsFromIndexedArrays(*args):
        """
        RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx, 
            int offsetForRemoval = 0) -> bool
        RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args)

    if _newclass:RemoveIdsFromIndexedArrays = staticmethod(RemoveIdsFromIndexedArrays)
    __swig_getmethods__["RemoveIdsFromIndexedArrays"] = lambda x: RemoveIdsFromIndexedArrays
    def ExtractFromIndexedArrays(*args):
        """
        ExtractFromIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ExtractFromIndexedArrays(*args)

    if _newclass:ExtractFromIndexedArrays = staticmethod(ExtractFromIndexedArrays)
    __swig_getmethods__["ExtractFromIndexedArrays"] = lambda x: ExtractFromIndexedArrays
    def SetPartOfIndexedArrays(*args):
        """
        SetPartOfIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
            DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_SetPartOfIndexedArrays(*args)

    if _newclass:SetPartOfIndexedArrays = staticmethod(SetPartOfIndexedArrays)
    __swig_getmethods__["SetPartOfIndexedArrays"] = lambda x: SetPartOfIndexedArrays
    def SetPartOfIndexedArraysSameIdx(*args):
        """
        SetPartOfIndexedArraysSameIdx(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
            DataArrayInt srcArr, DataArrayInt srcArrIndex)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args)

    if _newclass:SetPartOfIndexedArraysSameIdx = staticmethod(SetPartOfIndexedArraysSameIdx)
    __swig_getmethods__["SetPartOfIndexedArraysSameIdx"] = lambda x: SetPartOfIndexedArraysSameIdx
    def are2DCellsNotCorrectlyOriented(self, *args):
        """
        are2DCellsNotCorrectlyOriented(self, PyObject vec, bool polyOnly) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_are2DCellsNotCorrectlyOriented(self, *args)

    def orientCorrectly2DCells(self, *args):
        """
        orientCorrectly2DCells(self, PyObject vec, bool polyOnly)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_orientCorrectly2DCells(self, *args)

    def arePolyhedronsNotCorrectlyOriented(self):
        """
        arePolyhedronsNotCorrectlyOriented(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_arePolyhedronsNotCorrectlyOriented(self)

    def findAndCorrectBadOriented3DExtrudedCells(self):
        """
        findAndCorrectBadOriented3DExtrudedCells(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findAndCorrectBadOriented3DExtrudedCells(self)

    def getFastAveragePlaneOfThis(self):
        """
        getFastAveragePlaneOfThis(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getFastAveragePlaneOfThis(self)

    def MergeUMeshes(*args):
        """
        MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshes(PyObject li) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshes(*args)

    if _newclass:MergeUMeshes = staticmethod(MergeUMeshes)
    __swig_getmethods__["MergeUMeshes"] = lambda x: MergeUMeshes
    def areCellsIncludedIn(self, *args):
        """
        areCellsIncludedIn(self, MEDCouplingUMesh other, int compType) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_areCellsIncludedIn(self, *args)

    def areCellsIncludedIn2(self, *args):
        """
        areCellsIncludedIn2(self, MEDCouplingUMesh other) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_areCellsIncludedIn2(self, *args)

    def buildDescendingConnectivity(self, *args):
        """
        buildDescendingConnectivity(self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, 
            DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildDescendingConnectivity(self, *args)

    def buildDescendingConnectivity2(self, *args):
        """
        buildDescendingConnectivity2(self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, 
            DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity2(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildDescendingConnectivity2(self, *args)

    def computeNeighborsOfCells(self):
        """
        computeNeighborsOfCells(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeNeighborsOfCells(self)

    def ComputeNeighborsOfCellsAdv(*args):
        """
        ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, 
            DataArrayInt revDescI) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args)

    if _newclass:ComputeNeighborsOfCellsAdv = staticmethod(ComputeNeighborsOfCellsAdv)
    __swig_getmethods__["ComputeNeighborsOfCellsAdv"] = lambda x: ComputeNeighborsOfCellsAdv
    def emulateMEDMEMBDC(self, *args):
        """
        emulateMEDMEMBDC(self, MEDCouplingUMesh nM1LevMesh) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_emulateMEDMEMBDC(self, *args)

    def getReverseNodalConnectivity(self):
        """
        getReverseNodalConnectivity(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getReverseNodalConnectivity(self)

    def getPartBarycenterAndOwner(self, *args):
        """
        getPartBarycenterAndOwner(self, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getPartBarycenterAndOwner(self, *args)

    def getPartMeasureField(self, *args):
        """
        getPartMeasureField(self, bool isAbs, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getPartMeasureField(self, *args)

    def buildPartOrthogonalField(self, *args):
        """
        buildPartOrthogonalField(self, DataArrayInt da) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildPartOrthogonalField(self, *args)

    def getTypesOfPart(self, *args):
        """
        getTypesOfPart(self, DataArrayInt da) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getTypesOfPart(self, *args)

    def keepCellIdsByType(self, *args):
        """
        keepCellIdsByType(self, NormalizedCellType type, DataArrayInt da) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_keepCellIdsByType(self, *args)

    def getCellIdsLyingOnNodes(self, *args):
        """
        getCellIdsLyingOnNodes(self, PyObject li, bool fullyIn) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getCellIdsLyingOnNodes(self, *args)

    def getNodeIdsInUse(self):
        """
        getNodeIdsInUse(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNodeIdsInUse(self)

    def Intersect2DMeshes(*args):
        """
        Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_Intersect2DMeshes(*args)

    if _newclass:Intersect2DMeshes = staticmethod(Intersect2DMeshes)
    __swig_getmethods__["Intersect2DMeshes"] = lambda x: Intersect2DMeshes
    def buildSlice3D(self, *args):
        """
        buildSlice3D(self, PyObject origin, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSlice3D(self, *args)

    def buildSlice3DSurf(self, *args):
        """
        buildSlice3DSurf(self, PyObject origin, PyObject vec, double eps) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSlice3DSurf(self, *args)

    def getCellIdsCrossingPlane(self, *args):
        """
        getCellIdsCrossingPlane(self, PyObject origin, PyObject vec, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getCellIdsCrossingPlane(self, *args)

    def convertToPolyTypes(self, *args):
        """
        convertToPolyTypes(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertToPolyTypes(self, *args)

    def convertAllToPoly(self):
        """
        convertAllToPoly(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertAllToPoly(self)

    def convertExtrudedPolyhedra(self):
        """
        convertExtrudedPolyhedra(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertExtrudedPolyhedra(self)

    def unPolyze(self):
        """
        unPolyze(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_unPolyze(self)

    def simplifyPolyhedra(self, *args):
        """
        simplifyPolyhedra(self, double eps)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_simplifyPolyhedra(self, *args)

    def buildSpreadZonesWithPoly(self):
        """
        buildSpreadZonesWithPoly(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSpreadZonesWithPoly(self)

    def buildExtrudedMesh(self, *args):
        """
        buildExtrudedMesh(self, MEDCouplingUMesh mesh1D, int policy) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildExtrudedMesh(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMesh
    __del__ = lambda self : None;
MEDCouplingUMesh_swigregister = _MEDCouplingRemapper.MEDCouplingUMesh_swigregister
MEDCouplingUMesh_swigregister(MEDCouplingUMesh)

def MEDCouplingUMesh_New(*args):
  """
    New() -> MEDCouplingUMesh
    MEDCouplingUMesh_New(char meshName, int meshDim) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_New(*args)

def MEDCouplingUMesh_Build0DMeshFromCoords(*args):
  """
    MEDCouplingUMesh_Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_Build0DMeshFromCoords(*args)

def MEDCouplingUMesh_ComputeSpreadZoneGradually(*args):
  """
    MEDCouplingUMesh_ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeSpreadZoneGradually(*args)

def MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args):
  """
    MEDCouplingUMesh_ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(*args)

def MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args):
  """
    MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(PyObject ms) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(*args)

def MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args):
  """
    MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshesOnSameCoords(PyObject ms) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args):
  """
    MEDCouplingUMesh_FuseUMeshesOnSameCoords(PyObject ms, int compType) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_FuseUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args):
  """
    MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(PyObject ms)

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(*args)

def MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args):
  """
    MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(PyObject ms, double eps)

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(*args)

def MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args):
  """
    RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx, 
        int offsetForRemoval = 0) -> bool
    MEDCouplingUMesh_RemoveIdsFromIndexedArrays(PyObject li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_RemoveIdsFromIndexedArrays(*args)

def MEDCouplingUMesh_ExtractFromIndexedArrays(*args):
  """
    MEDCouplingUMesh_ExtractFromIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_ExtractFromIndexedArrays(*args)

def MEDCouplingUMesh_SetPartOfIndexedArrays(*args):
  """
    MEDCouplingUMesh_SetPartOfIndexedArrays(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
        DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_SetPartOfIndexedArrays(*args)

def MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args):
  """
    MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(PyObject li, DataArrayInt arrIn, DataArrayInt arrIndxIn, 
        DataArrayInt srcArr, DataArrayInt srcArrIndex)

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_SetPartOfIndexedArraysSameIdx(*args)

def MEDCouplingUMesh_MergeUMeshes(*args):
  """
    MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshes(PyObject li) -> MEDCouplingUMesh

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshes(*args)

def MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args):
  """
    MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, 
        DataArrayInt revDescI) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(*args)

def MEDCouplingUMesh_Intersect2DMeshes(*args):
  """
    MEDCouplingUMesh_Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingUMesh_Intersect2DMeshes(*args)

class MEDCouplingExtrudedMesh(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingExtrudedMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingExtrudedMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def build3DUnstructuredMesh(self):
        """
        build3DUnstructuredMesh(self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_build3DUnstructuredMesh(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingExtrudedMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh___str__(self)

    def getMesh2D(self):
        """
        getMesh2D(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_getMesh2D(self)

    def getMesh1D(self):
        """
        getMesh1D(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_getMesh1D(self)

    def getMesh3DIds(self):
        """
        getMesh3DIds(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_getMesh3DIds(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingExtrudedMesh
    __del__ = lambda self : None;
MEDCouplingExtrudedMesh_swigregister = _MEDCouplingRemapper.MEDCouplingExtrudedMesh_swigregister
MEDCouplingExtrudedMesh_swigregister(MEDCouplingExtrudedMesh)

def MEDCouplingExtrudedMesh_New(*args):
  """
    MEDCouplingExtrudedMesh_New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingExtrudedMesh

    1
    """
  return _MEDCouplingRemapper.MEDCouplingExtrudedMesh_New(*args)

class MEDCouplingCMesh(MEDCouplingMesh):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCMesh, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New() -> MEDCouplingCMesh
        New(char meshName) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_clone(self, *args)

    def setCoords(self, *args):
        """
        setCoords(self, DataArrayDouble coordsX, DataArrayDouble coordsY = None, 
            DataArrayDouble coordsZ = None)
        setCoords(self, DataArrayDouble coordsX, DataArrayDouble coordsY = None)
        setCoords(self, DataArrayDouble coordsX)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_setCoords(self, *args)

    def setCoordsAt(self, *args):
        """
        setCoordsAt(self, int i, DataArrayDouble arr)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_setCoordsAt(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self) -> MEDCouplingCMesh
        __init__(self, char meshName) -> MEDCouplingCMesh

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingCMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh___str__(self)

    def getCoordsAt(self, *args):
        """
        getCoordsAt(self, int i) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_getCoordsAt(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCMesh
    __del__ = lambda self : None;
MEDCouplingCMesh_swigregister = _MEDCouplingRemapper.MEDCouplingCMesh_swigregister
MEDCouplingCMesh_swigregister(MEDCouplingCMesh)

def MEDCouplingCMesh_New(*args):
  """
    New() -> MEDCouplingCMesh
    MEDCouplingCMesh_New(char meshName) -> MEDCouplingCMesh

    1
    """
  return _MEDCouplingRemapper.MEDCouplingCMesh_New(*args)

class MEDCouplingField(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingField, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_checkCoherency(self)

    def areCompatibleForMerge(self, *args):
        """
        areCompatibleForMerge(self, MEDCouplingField other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_areCompatibleForMerge(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingField other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingField other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_isEqualWithoutConsideringStr(self, *args)

    def setMesh(self, *args):
        """
        setMesh(self, MEDCouplingMesh mesh)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setMesh(self, *args)

    def setName(self, *args):
        """
        setName(self, char name)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setName(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getDescription(self)

    def setDescription(self, *args):
        """
        setDescription(self, char desc)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setDescription(self, *args)

    def getName(self):
        """
        getName(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getName(self)

    def getTypeOfField(self):
        """
        getTypeOfField(self) -> TypeOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getTypeOfField(self)

    def getNature(self):
        """
        getNature(self) -> NatureOfField

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNature(self)

    def setNature(self, *args):
        """
        setNature(self, NatureOfField nat)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setNature(self, *args)

    def getLocalizationOfDiscr(self):
        """
        getLocalizationOfDiscr(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getLocalizationOfDiscr(self)

    def buildMeasureField(self, *args):
        """
        buildMeasureField(self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_buildMeasureField(self, *args)

    def getNumberOfTuplesExpected(self):
        """
        getNumberOfTuplesExpected(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNumberOfTuplesExpected(self)

    def getNumberOfMeshPlacesExpected(self):
        """
        getNumberOfMeshPlacesExpected(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNumberOfMeshPlacesExpected(self)

    def setGaussLocalizationOnType(self, *args):
        """
        setGaussLocalizationOnType(self, NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setGaussLocalizationOnType(self, *args)

    def clearGaussLocalizations(self):
        """
        clearGaussLocalizations(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        """
        getNbOfGaussLocalization(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, *args):
        """
        getGaussLocalizationIdOfOneCell(self, int cellId) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalizationIdOfOneCell(self, *args)

    def getGaussLocalization(self, *args):
        """
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalization(self, *args)

    def getGaussLocalizationIdOfOneType(self, *args):
        """
        getGaussLocalizationIdOfOneType(self, NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalizationIdOfOneType(self, *args)

    def setDiscretization(self, *args):
        """
        setDiscretization(self, MEDCouplingFieldDiscretization newDisc)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setDiscretization(self, *args)

    def getMesh(self):
        """
        getMesh(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getMesh(self)

    def getDiscretization(self):
        """
        getDiscretization(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getDiscretization(self)

    def getGaussLocalizationIdsOfOneType(self, *args):
        """
        getGaussLocalizationIdsOfOneType(self, NormalizedCellType type) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalizationIdsOfOneType(self, *args)

    def isEqualIfNotWhy(self, *args):
        """
        isEqualIfNotWhy(self, MEDCouplingField other, double meshPrec, double valsPrec) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_isEqualIfNotWhy(self, *args)

    def buildSubMeshData(self, *args):
        """
        buildSubMeshData(self, PyObject li) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_buildSubMeshData(self, *args)

    def computeTupleIdsToSelectFromCellIds(self, *args):
        """
        computeTupleIdsToSelectFromCellIds(self, PyObject li) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_computeTupleIdsToSelectFromCellIds(self, *args)

    def setGaussLocalizationOnCells(self, *args):
        """
        setGaussLocalizationOnCells(self, PyObject li, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setGaussLocalizationOnCells(self, *args)

    def getCellIdsHavingGaussLocalization(self, *args):
        """
        getCellIdsHavingGaussLocalization(self, int locId) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getCellIdsHavingGaussLocalization(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingField
    __del__ = lambda self : None;
MEDCouplingField_swigregister = _MEDCouplingRemapper.MEDCouplingField_swigregister
MEDCouplingField_swigregister(MEDCouplingField)

class MEDCouplingFieldDouble(MEDCouplingField):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDouble, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        New(TypeOfField type) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setTimeUnit(self, *args):
        """
        setTimeUnit(self, char unit)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTimeUnit(self, *args)

    def getTimeUnit(self):
        """
        getTimeUnit(self) -> char

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTimeUnit(self)

    def copyTinyStringsFrom(self, *args):
        """
        copyTinyStringsFrom(self, MEDCouplingFieldDouble other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_copyTinyStringsFrom(self, *args)

    def copyTinyAttrFrom(self, *args):
        """
        copyTinyAttrFrom(self, MEDCouplingFieldDouble other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_copyTinyAttrFrom(self, *args)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_advancedRepr(self)

    def clone(self, *args):
        """
        clone(self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_clone(self, *args)

    def cloneWithMesh(self, *args):
        """
        cloneWithMesh(self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_cloneWithMesh(self, *args)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_deepCpy(self)

    def buildNewTimeReprFromThis(self, *args):
        """
        buildNewTimeReprFromThis(self, TypeOfTimeDiscretization td, bool deepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_buildNewTimeReprFromThis(self, *args)

    def getTimeDiscretization(self):
        """
        getTimeDiscretization(self) -> TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTimeDiscretization(self)

    def getIJ(self, *args):
        """
        getIJ(self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getIJ(self, *args)

    def getIJK(self, *args):
        """
        getIJK(self, int cellId, int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getIJK(self, *args)

    def setArray(self, *args):
        """
        setArray(self, DataArrayDouble array)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setArray(self, *args)

    def setEndArray(self, *args):
        """
        setEndArray(self, DataArrayDouble array)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndArray(self, *args)

    def setTime(self, *args):
        """
        setTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTime(self, *args)

    def setStartTime(self, *args):
        """
        setStartTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setStartTime(self, *args)

    def setEndTime(self, *args):
        """
        setEndTime(self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndTime(self, *args)

    def applyLin(self, *args):
        """
        applyLin(self, double a, double b, int compoId)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyLin(self, *args)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        """
        getNumberOfTuples(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getNumberOfTuples(self)

    def getNumberOfValues(self):
        """
        getNumberOfValues(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getNumberOfValues(self)

    def setTimeTolerance(self, *args):
        """
        setTimeTolerance(self, double val)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTimeTolerance(self, *args)

    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTimeTolerance(self)

    def setIteration(self, *args):
        """
        setIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setIteration(self, *args)

    def setEndIteration(self, *args):
        """
        setEndIteration(self, int it)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndIteration(self, *args)

    def setOrder(self, *args):
        """
        setOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setOrder(self, *args)

    def setEndOrder(self, *args):
        """
        setEndOrder(self, int order)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndOrder(self, *args)

    def setTimeValue(self, *args):
        """
        setTimeValue(self, double val)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTimeValue(self, *args)

    def setEndTimeValue(self, *args):
        """
        setEndTimeValue(self, double val)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndTimeValue(self, *args)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_updateTime(self)

    def changeUnderlyingMesh(self, *args):
        """
        changeUnderlyingMesh(self, MEDCouplingMesh other, int levOfCheck, double prec)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_changeUnderlyingMesh(self, *args)

    def substractInPlaceDM(self, *args):
        """
        substractInPlaceDM(self, MEDCouplingFieldDouble f, int levOfCheck, double prec)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_substractInPlaceDM(self, *args)

    def mergeNodes(self, *args):
        """
        mergeNodes(self, double eps, double epsOnVals = 1e-15) -> bool
        mergeNodes(self, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_mergeNodes(self, *args)

    def mergeNodes2(self, *args):
        """
        mergeNodes2(self, double eps, double epsOnVals = 1e-15) -> bool
        mergeNodes2(self, double eps) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_mergeNodes2(self, *args)

    def zipCoords(self, epsOnVals = 1e-15):
        """
        zipCoords(self, double epsOnVals = 1e-15) -> bool
        zipCoords(self) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_zipCoords(self, epsOnVals)

    def zipConnectivity(self, *args):
        """
        zipConnectivity(self, int compType, double epsOnVals = 1e-15) -> bool
        zipConnectivity(self, int compType) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_zipConnectivity(self, *args)

    def simplexize(self, *args):
        """
        simplexize(self, int policy) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_simplexize(self, *args)

    def doublyContractedProduct(self):
        """
        doublyContractedProduct(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_doublyContractedProduct(self)

    def determinant(self):
        """
        determinant(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_determinant(self)

    def eigenValues(self):
        """
        eigenValues(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_eigenValues(self)

    def eigenVectors(self):
        """
        eigenVectors(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_eigenVectors(self)

    def inverse(self):
        """
        inverse(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_inverse(self)

    def trace(self):
        """
        trace(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_trace(self)

    def deviator(self):
        """
        deviator(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_deviator(self)

    def magnitude(self):
        """
        magnitude(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_magnitude(self)

    def maxPerTuple(self):
        """
        maxPerTuple(self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_maxPerTuple(self)

    def changeNbOfComponents(self, *args):
        """
        changeNbOfComponents(self, int newNbOfComp, double dftValue = 0.)
        changeNbOfComponents(self, int newNbOfComp)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_changeNbOfComponents(self, *args)

    def sortPerTuple(self, *args):
        """
        sortPerTuple(self, bool asc)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_sortPerTuple(self, *args)

    def assign(self, *args):
        """
        assign(self, double value) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_assign(self, *args)

    def fillFromAnalytic(self, *args):
        """
        fillFromAnalytic(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_fillFromAnalytic(self, *args)

    def fillFromAnalytic2(self, *args):
        """
        fillFromAnalytic2(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_fillFromAnalytic2(self, *args)

    def fillFromAnalytic3(self, *args):
        """
        fillFromAnalytic3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_fillFromAnalytic3(self, *args)

    def applyFunc2(self, *args):
        """
        applyFunc2(self, int nbOfComp, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFunc2(self, *args)

    def applyFunc3(self, *args):
        """
        applyFunc3(self, int nbOfComp, svec varsOrder, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFunc3(self, *args)

    def applyFunc(self, *args):
        """
        applyFunc(self, int nbOfComp, char func)
        applyFunc(self, int nbOfComp, double val)
        applyFunc(self, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFunc(self, *args)

    def applyFuncFast32(self, *args):
        """
        applyFuncFast32(self, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFuncFast32(self, *args)

    def applyFuncFast64(self, *args):
        """
        applyFuncFast64(self, char func)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFuncFast64(self, *args)

    def getMaxValue(self):
        """
        getMaxValue(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMaxValue(self)

    def getMinValue(self):
        """
        getMinValue(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMinValue(self)

    def getAverageValue(self):
        """
        getAverageValue(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getAverageValue(self)

    def norm2(self):
        """
        norm2(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_norm2(self)

    def normMax(self):
        """
        normMax(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_normMax(self)

    def getWeightedAverageValue(self):
        """
        getWeightedAverageValue(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getWeightedAverageValue(self)

    def getIdsInRange(self, *args):
        """
        getIdsInRange(self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getIdsInRange(self, *args)

    def MeldFields(*args):
        """
        MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MeldFields(*args)

    if _newclass:MeldFields = staticmethod(MeldFields)
    __swig_getmethods__["MeldFields"] = lambda x: MeldFields
    def DotFields(*args):
        """
        DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_DotFields(*args)

    if _newclass:DotFields = staticmethod(DotFields)
    __swig_getmethods__["DotFields"] = lambda x: DotFields
    def dot(self, *args):
        """
        dot(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_dot(self, *args)

    def CrossProductFields(*args):
        """
        CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_CrossProductFields(*args)

    if _newclass:CrossProductFields = staticmethod(CrossProductFields)
    __swig_getmethods__["CrossProductFields"] = lambda x: CrossProductFields
    def crossProduct(self, *args):
        """
        crossProduct(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_crossProduct(self, *args)

    def MaxFields(*args):
        """
        MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MaxFields(*args)

    if _newclass:MaxFields = staticmethod(MaxFields)
    __swig_getmethods__["MaxFields"] = lambda x: MaxFields
    def max(self, *args):
        """
        max(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_max(self, *args)

    def MinFields(*args):
        """
        MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MinFields(*args)

    if _newclass:MinFields = staticmethod(MinFields)
    __swig_getmethods__["MinFields"] = lambda x: MinFields
    def AddFields(*args):
        """
        AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_AddFields(*args)

    if _newclass:AddFields = staticmethod(AddFields)
    __swig_getmethods__["AddFields"] = lambda x: AddFields
    def SubstractFields(*args):
        """
        SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_SubstractFields(*args)

    if _newclass:SubstractFields = staticmethod(SubstractFields)
    __swig_getmethods__["SubstractFields"] = lambda x: SubstractFields
    def MultiplyFields(*args):
        """
        MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MultiplyFields(*args)

    if _newclass:MultiplyFields = staticmethod(MultiplyFields)
    __swig_getmethods__["MultiplyFields"] = lambda x: MultiplyFields
    def DivideFields(*args):
        """
        DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_DivideFields(*args)

    if _newclass:DivideFields = staticmethod(DivideFields)
    __swig_getmethods__["DivideFields"] = lambda x: DivideFields
    def min(self, *args):
        """
        min(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_min(self, *args)

    def __add__(self, *args):
        """
        __add__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___div__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        __init__(self, TypeOfField type) -> MEDCouplingFieldDouble
        __init__(self, MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
        __init__(self, MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingFieldDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___str__(self)

    def getArray(self):
        """
        getArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getArray(self)

    def getArrays(self):
        """
        getArrays(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getArrays(self)

    def setArrays(self, *args):
        """
        setArrays(self, PyObject ls)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setArrays(self, *args)

    def getEndArray(self):
        """
        getEndArray(self) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getEndArray(self)

    def getValueOnPos(self, *args):
        """
        getValueOnPos(self, int i, int j, int k) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getValueOnPos(self, *args)

    def getValueOnMulti(self, *args):
        """
        getValueOnMulti(self, PyObject li) -> DataArrayDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getValueOnMulti(self, *args)

    def getValueOn(self, *args):
        """
        getValueOn(self, PyObject sl) -> PyObject
        getValueOn(self, PyObject sl, double time) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getValueOn(self, *args)

    def setValues(self, *args):
        """
        setValues(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setValues(self, *args)

    def getTime(self):
        """
        getTime(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTime(self)

    def getStartTime(self):
        """
        getStartTime(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getStartTime(self)

    def getEndTime(self):
        """
        getEndTime(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getEndTime(self)

    def accumulate(self, *args):
        """
        accumulate(self, int compId) -> double
        accumulate(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_accumulate(self, *args)

    def integral(self, *args):
        """
        integral(self, int compId, bool isWAbs) -> double
        integral(self, bool isWAbs) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_integral(self, *args)

    def normL1(self, *args):
        """
        normL1(self, int compId) -> double
        normL1(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_normL1(self, *args)

    def normL2(self, *args):
        """
        normL2(self, int compId) -> double
        normL2(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_normL2(self, *args)

    def renumberCells(self, *args):
        """
        renumberCells(self, PyObject li, bool check = True)
        renumberCells(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_renumberCells(self, *args)

    def renumberNodes(self, *args):
        """
        renumberNodes(self, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_renumberNodes(self, *args)

    def buildSubPart(self, *args):
        """
        buildSubPart(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_buildSubPart(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___getitem__(self, *args)

    def getMaxValue2(self):
        """
        getMaxValue2(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMaxValue2(self)

    def getMinValue2(self):
        """
        getMinValue2(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMinValue2(self)

    def keepSelectedComponents(self, *args):
        """
        keepSelectedComponents(self, PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_keepSelectedComponents(self, *args)

    def setSelectedComponents(self, *args):
        """
        setSelectedComponents(self, MEDCouplingFieldDouble f, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setSelectedComponents(self, *args)

    def extractSlice3D(self, *args):
        """
        extractSlice3D(self, PyObject origin, PyObject vec, double eps) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_extractSlice3D(self, *args)

    def ___iadd___(self, *args):
        """
        ___iadd___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____iadd___(self, *args)

    def ___isub___(self, *args):
        """
        ___isub___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____isub___(self, *args)

    def ___imul___(self, *args):
        """
        ___imul___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____imul___(self, *args)

    def ___idiv___(self, *args):
        """
        ___idiv___(self, PyObject trueSelf, MEDCouplingFieldDouble other) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____idiv___(self, *args)

    def MergeFields(*args):
        """
        MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        MergeFields(PyObject li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MergeFields(*args)

    if _newclass:MergeFields = staticmethod(MergeFields)
    __swig_getmethods__["MergeFields"] = lambda x: MergeFields
    def WriteVTK(*args):
        """
        WriteVTK(char fileName, PyObject li)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_WriteVTK(*args)

    if _newclass:WriteVTK = staticmethod(WriteVTK)
    __swig_getmethods__["WriteVTK"] = lambda x: WriteVTK
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDouble
    __del__ = lambda self : None;
MEDCouplingFieldDouble_swigregister = _MEDCouplingRemapper.MEDCouplingFieldDouble_swigregister
MEDCouplingFieldDouble_swigregister(MEDCouplingFieldDouble)

def MEDCouplingFieldDouble_New(*args):
  """
    New(TypeOfField type, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
    New(TypeOfField type) -> MEDCouplingFieldDouble
    New(MEDCouplingFieldTemplate ft, TypeOfTimeDiscretization td = NO_TIME) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_New(*args)

def MEDCouplingFieldDouble_MeldFields(*args):
  """
    MEDCouplingFieldDouble_MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_MeldFields(*args)

def MEDCouplingFieldDouble_DotFields(*args):
  """
    MEDCouplingFieldDouble_DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_DotFields(*args)

def MEDCouplingFieldDouble_CrossProductFields(*args):
  """
    MEDCouplingFieldDouble_CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_CrossProductFields(*args)

def MEDCouplingFieldDouble_MaxFields(*args):
  """
    MEDCouplingFieldDouble_MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_MaxFields(*args)

def MEDCouplingFieldDouble_MinFields(*args):
  """
    MEDCouplingFieldDouble_MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_MinFields(*args)

def MEDCouplingFieldDouble_AddFields(*args):
  """
    MEDCouplingFieldDouble_AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_AddFields(*args)

def MEDCouplingFieldDouble_SubstractFields(*args):
  """
    MEDCouplingFieldDouble_SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_SubstractFields(*args)

def MEDCouplingFieldDouble_MultiplyFields(*args):
  """
    MEDCouplingFieldDouble_MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_MultiplyFields(*args)

def MEDCouplingFieldDouble_DivideFields(*args):
  """
    MEDCouplingFieldDouble_DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_DivideFields(*args)

def MEDCouplingFieldDouble_MergeFields(*args):
  """
    MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_MergeFields(PyObject li) -> MEDCouplingFieldDouble

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_MergeFields(*args)

def MEDCouplingFieldDouble_WriteVTK(*args):
  """
    MEDCouplingFieldDouble_WriteVTK(char fileName, PyObject li)

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldDouble_WriteVTK(*args)

class MEDCouplingFieldTemplate(MEDCouplingField):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTemplate, name)
    __repr__ = _swig_repr
    def New(*args):
        """
        New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        New(TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_advancedRepr(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_updateTime(self)

    def __init__(self, *args): 
        """
        __init__(self, MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        __init__(self, TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingFieldTemplate(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate___str__(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldTemplate
    __del__ = lambda self : None;
MEDCouplingFieldTemplate_swigregister = _MEDCouplingRemapper.MEDCouplingFieldTemplate_swigregister
MEDCouplingFieldTemplate_swigregister(MEDCouplingFieldTemplate)

def MEDCouplingFieldTemplate_New(*args):
  """
    New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(TypeOfField type) -> MEDCouplingFieldTemplate

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldTemplate_New(*args)

class MEDCouplingMultiFields(RefCountObject,TimeLabel):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMultiFields, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject,TimeLabel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMultiFields, name)
    __repr__ = _swig_repr
    def getNumberOfFields(self):
        """
        getNumberOfFields(self) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getNumberOfFields(self)

    def deepCpy(self):
        """
        deepCpy(self) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_deepCpy(self)

    def simpleRepr(self):
        """
        simpleRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_simpleRepr(self)

    def advancedRepr(self):
        """
        advancedRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_advancedRepr(self)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_isEqual(self, *args)

    def isEqualWithoutConsideringStr(self, *args):
        """
        isEqualWithoutConsideringStr(self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_isEqualWithoutConsideringStr(self, *args)

    def checkCoherency(self):
        """
        checkCoherency(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_checkCoherency(self)

    def updateTime(self):
        """
        updateTime(self)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_updateTime(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields___str__(self)

    def New(*args):
        """
        New(PyObject li) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __init__(self, *args): 
        """
        __init__(self, PyObject li) -> MEDCouplingMultiFields

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingMultiFields(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFields(self):
        """
        getFields(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getFields(self)

    def getFieldAtPos(self, *args):
        """
        getFieldAtPos(self, int id) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getFieldAtPos(self, *args)

    def getMeshes(self):
        """
        getMeshes(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getMeshes(self)

    def getDifferentMeshes(self):
        """
        getDifferentMeshes(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getDifferentMeshes(self)

    def getArrays(self):
        """
        getArrays(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getArrays(self)

    def getDifferentArrays(self):
        """
        getDifferentArrays(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getDifferentArrays(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingMultiFields
    __del__ = lambda self : None;
MEDCouplingMultiFields_swigregister = _MEDCouplingRemapper.MEDCouplingMultiFields_swigregister
MEDCouplingMultiFields_swigregister(MEDCouplingMultiFields)

def MEDCouplingMultiFields_New(*args):
  """
    MEDCouplingMultiFields_New(PyObject li) -> MEDCouplingMultiFields

    1
    """
  return _MEDCouplingRemapper.MEDCouplingMultiFields_New(*args)

class MEDCouplingDefinitionTime(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingDefinitionTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingDefinitionTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingDefinitionTime

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingDefinitionTime()
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args):
        """
        assign(self, MEDCouplingDefinitionTime other)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_assign(self, *args)

    def isEqual(self, *args):
        """
        isEqual(self, MEDCouplingDefinitionTime other) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_isEqual(self, *args)

    def getTimeResolution(self):
        """
        getTimeResolution(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getTimeResolution(self)

    def getHotSpotsTime(self):
        """
        getHotSpotsTime(self) -> dvec

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getHotSpotsTime(self)

    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime___str__(self)

    def getIdsOnTimeRight(self, *args):
        """
        getIdsOnTimeRight(self, double tm) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getIdsOnTimeRight(self, *args)

    def getIdsOnTimeLeft(self, *args):
        """
        getIdsOnTimeLeft(self, double tm) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getIdsOnTimeLeft(self, *args)

    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingDefinitionTime
    __del__ = lambda self : None;
MEDCouplingDefinitionTime_swigregister = _MEDCouplingRemapper.MEDCouplingDefinitionTime_swigregister
MEDCouplingDefinitionTime_swigregister(MEDCouplingDefinitionTime)

class MEDCouplingFieldOverTime(MEDCouplingMultiFields):
    """1"""
    __swig_setmethods__ = {}
    for _s in [MEDCouplingMultiFields]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldOverTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMultiFields]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldOverTime, name)
    __repr__ = _swig_repr
    def getTimeTolerance(self):
        """
        getTimeTolerance(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime_getTimeTolerance(self)

    def getDefinitionTimeZone(self):
        """
        getDefinitionTimeZone(self) -> MEDCouplingDefinitionTime

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime_getDefinitionTimeZone(self)

    def __init__(self, *args): 
        """
        __init__(self, PyObject li) -> MEDCouplingFieldOverTime

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingFieldOverTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """
        __str__(self) -> string

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime___str__(self)

    def New(*args):
        """
        New(PyObject li) -> MEDCouplingFieldOverTime

        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldOverTime
    __del__ = lambda self : None;
MEDCouplingFieldOverTime_swigregister = _MEDCouplingRemapper.MEDCouplingFieldOverTime_swigregister
MEDCouplingFieldOverTime_swigregister(MEDCouplingFieldOverTime)

def MEDCouplingFieldOverTime_New(*args):
  """
    MEDCouplingFieldOverTime_New(PyObject li) -> MEDCouplingFieldOverTime

    1
    """
  return _MEDCouplingRemapper.MEDCouplingFieldOverTime_New(*args)


def MEDCouplingVersionMajMinRel():
  """
    MEDCouplingVersionMajMinRel() -> PyObject

    1
    """
  return _MEDCouplingRemapper.MEDCouplingVersionMajMinRel()
import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
  execfile(__filename)
  pass

Triangulation = _MEDCouplingRemapper.Triangulation
Convex = _MEDCouplingRemapper.Convex
Geometric2D = _MEDCouplingRemapper.Geometric2D
PointLocator = _MEDCouplingRemapper.PointLocator
PLANAR_FACE_5 = _MEDCouplingRemapper.PLANAR_FACE_5
PLANAR_FACE_6 = _MEDCouplingRemapper.PLANAR_FACE_6
GENERAL_24 = _MEDCouplingRemapper.GENERAL_24
GENERAL_48 = _MEDCouplingRemapper.GENERAL_48
class InterpolationOptions(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolationOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolationOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> InterpolationOptions

        1
        """
        this = _MEDCouplingRemapper.new_InterpolationOptions()
        try: self.this.append(this)
        except: self.this = this
    def getPrintLevel(self):
        """
        getPrintLevel(self) -> int

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getPrintLevel(self)

    def setPrintLevel(self, *args):
        """
        setPrintLevel(self, int pl)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setPrintLevel(self, *args)

    def getIntersectionType(self):
        """
        getIntersectionType(self) -> IntersectionType

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getIntersectionType(self)

    def setIntersectionType(self, *args):
        """
        setIntersectionType(self, IntersectionType it)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setIntersectionType(self, *args)

    def getIntersectionTypeRepr(self):
        """
        getIntersectionTypeRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getIntersectionTypeRepr(self)

    def getPrecision(self):
        """
        getPrecision(self) -> double

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getPrecision(self)

    def setPrecision(self, *args):
        """
        setPrecision(self, double p)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setPrecision(self, *args)

    def getMedianPlane(self):
        """
        getMedianPlane(self) -> double

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMedianPlane(self)

    def setMedianPlane(self, *args):
        """
        setMedianPlane(self, double mp)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMedianPlane(self, *args)

    def getDoRotate(self):
        """
        getDoRotate(self) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getDoRotate(self)

    def setDoRotate(self, *args):
        """
        setDoRotate(self, bool dr)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setDoRotate(self, *args)

    def getBoundingBoxAdjustment(self):
        """
        getBoundingBoxAdjustment(self) -> double

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getBoundingBoxAdjustment(self)

    def setBoundingBoxAdjustment(self, *args):
        """
        setBoundingBoxAdjustment(self, double bba)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setBoundingBoxAdjustment(self, *args)

    def getBoundingBoxAdjustmentAbs(self):
        """
        getBoundingBoxAdjustmentAbs(self) -> double

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getBoundingBoxAdjustmentAbs(self)

    def setBoundingBoxAdjustmentAbs(self, *args):
        """
        setBoundingBoxAdjustmentAbs(self, double bba)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setBoundingBoxAdjustmentAbs(self, *args)

    def getMaxDistance3DSurfIntersect(self):
        """
        getMaxDistance3DSurfIntersect(self) -> double

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMaxDistance3DSurfIntersect(self)

    def setMaxDistance3DSurfIntersect(self, *args):
        """
        setMaxDistance3DSurfIntersect(self, double bba)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMaxDistance3DSurfIntersect(self, *args)

    def getOrientation(self):
        """
        getOrientation(self) -> int

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getOrientation(self)

    def setOrientation(self, *args):
        """
        setOrientation(self, int o)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOrientation(self, *args)

    def getMeasureAbsStatus(self):
        """
        getMeasureAbsStatus(self) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMeasureAbsStatus(self)

    def setMeasureAbsStatus(self, *args):
        """
        setMeasureAbsStatus(self, bool newStatus)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMeasureAbsStatus(self, *args)

    def getSplittingPolicy(self):
        """
        getSplittingPolicy(self) -> SplittingPolicy

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getSplittingPolicy(self)

    def setSplittingPolicy(self, *args):
        """
        setSplittingPolicy(self, SplittingPolicy sp)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setSplittingPolicy(self, *args)

    def getSplittingPolicyRepr(self):
        """
        getSplittingPolicyRepr(self) -> string

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getSplittingPolicyRepr(self)

    def setP1P0BaryMethod(self, *args):
        """
        setP1P0BaryMethod(self, bool isP1P0)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setP1P0BaryMethod(self, *args)

    def getP1P0BaryMethod(self):
        """
        getP1P0BaryMethod(self) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getP1P0BaryMethod(self)

    def filterInterpolationMethod(self, *args):
        """
        filterInterpolationMethod(self, string meth) -> string

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_filterInterpolationMethod(self, *args)

    def init(self):
        """
        init(self)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_init(self)

    def setInterpolationOptions(self, *args):
        """
        setInterpolationOptions(self, long print_level, string intersection_type, double precision, 
            double median_plane, bool do_rotate, 
            double bounding_box_adjustment, double bounding_box_adjustment_abs, 
            double max_distance_for_3Dsurf_intersect, 
            long orientation, bool measure_abs, 
            string splitting_policy, bool P1P0_bary_method) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setInterpolationOptions(self, *args)

    def copyOptions(self, *args):
        """
        copyOptions(self, InterpolationOptions other)

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_copyOptions(self, *args)

    def setOptionDouble(self, *args):
        """
        setOptionDouble(self, string key, double value) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOptionDouble(self, *args)

    def setOptionInt(self, *args):
        """
        setOptionInt(self, string key, int value) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOptionInt(self, *args)

    def setOptionString(self, *args):
        """
        setOptionString(self, string key, string value) -> bool

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOptionString(self, *args)

    def printOptions(self):
        """
        printOptions(self) -> string

        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_printOptions(self)

    __swig_destroy__ = _MEDCouplingRemapper.delete_InterpolationOptions
    __del__ = lambda self : None;
InterpolationOptions_swigregister = _MEDCouplingRemapper.InterpolationOptions_swigregister
InterpolationOptions_swigregister(InterpolationOptions)
InterpolationOptions.PRECISION_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PRECISION_STR
InterpolationOptions.MEDIANE_PLANE_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MEDIANE_PLANE_STR
InterpolationOptions.BOUNDING_BOX_ADJ_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_BOUNDING_BOX_ADJ_STR
InterpolationOptions.BOUNDING_BOX_ADJ_ABS_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_BOUNDING_BOX_ADJ_ABS_STR
InterpolationOptions.MAX_DISTANCE_3DSURF_INSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MAX_DISTANCE_3DSURF_INSECT_STR
InterpolationOptions.PRINT_LEV_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PRINT_LEV_STR
InterpolationOptions.DO_ROTATE_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_DO_ROTATE_STR
InterpolationOptions.ORIENTATION_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_ORIENTATION_STR
InterpolationOptions.MEASURE_ABS_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MEASURE_ABS_STR
InterpolationOptions.INTERSEC_TYPE_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_INTERSEC_TYPE_STR
InterpolationOptions.SPLITTING_POLICY_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_SPLITTING_POLICY_STR
InterpolationOptions.TRIANGULATION_INTERSECT2D_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_TRIANGULATION_INTERSECT2D_STR
InterpolationOptions.CONVEX_INTERSECT2D_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_CONVEX_INTERSECT2D_STR
InterpolationOptions.GEOMETRIC_INTERSECT2D_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_GEOMETRIC_INTERSECT2D_STR
InterpolationOptions.POINTLOCATOR_INTERSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_POINTLOCATOR_INTERSECT_STR
InterpolationOptions.PLANAR_SPLIT_FACE_5_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PLANAR_SPLIT_FACE_5_STR
InterpolationOptions.PLANAR_SPLIT_FACE_6_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PLANAR_SPLIT_FACE_6_STR
InterpolationOptions.GENERAL_SPLIT_24_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_GENERAL_SPLIT_24_STR
InterpolationOptions.GENERAL_SPLIT_48_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_GENERAL_SPLIT_48_STR

class MEDCouplingRemapper(TimeLabel,InterpolationOptions):
    """1"""
    __swig_setmethods__ = {}
    for _s in [TimeLabel,InterpolationOptions]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingRemapper, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeLabel,InterpolationOptions]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingRemapper, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MEDCouplingRemapper

        1
        """
        this = _MEDCouplingRemapper.new_MEDCouplingRemapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingRemapper
    __del__ = lambda self : None;
    def prepare(self, *args):
        """
        prepare(self, MEDCouplingMesh srcMesh, MEDCouplingMesh targetMesh, 
            char method) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_prepare(self, *args)

    def prepareEx(self, *args):
        """
        prepareEx(self, MEDCouplingFieldTemplate src, MEDCouplingFieldTemplate target) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_prepareEx(self, *args)

    def transfer(self, *args):
        """
        transfer(self, MEDCouplingFieldDouble srcField, MEDCouplingFieldDouble targetField, 
            double dftValue)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_transfer(self, *args)

    def partialTransfer(self, *args):
        """
        partialTransfer(self, MEDCouplingFieldDouble srcField, MEDCouplingFieldDouble targetField)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_partialTransfer(self, *args)

    def reverseTransfer(self, *args):
        """
        reverseTransfer(self, MEDCouplingFieldDouble srcField, MEDCouplingFieldDouble targetField, 
            double dftValue)

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_reverseTransfer(self, *args)

    def transferField(self, *args):
        """
        transferField(self, MEDCouplingFieldDouble srcField, double dftValue) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_transferField(self, *args)

    def reverseTransferField(self, *args):
        """
        reverseTransferField(self, MEDCouplingFieldDouble targetField, double dftValue) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_reverseTransferField(self, *args)

    def setOptionInt(self, *args):
        """
        setOptionInt(self, string key, int value) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setOptionInt(self, *args)

    def setOptionDouble(self, *args):
        """
        setOptionDouble(self, string key, double value) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setOptionDouble(self, *args)

    def setOptionString(self, *args):
        """
        setOptionString(self, string key, string value) -> bool

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setOptionString(self, *args)

    def nullifiedTinyCoeffInCrudeMatrixAbs(self, *args):
        """
        nullifiedTinyCoeffInCrudeMatrixAbs(self, double maxValAbs) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_nullifiedTinyCoeffInCrudeMatrixAbs(self, *args)

    def nullifiedTinyCoeffInCrudeMatrix(self, *args):
        """
        nullifiedTinyCoeffInCrudeMatrix(self, double scaleFactor) -> int

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_nullifiedTinyCoeffInCrudeMatrix(self, *args)

    def getMaxValueInCrudeMatrix(self):
        """
        getMaxValueInCrudeMatrix(self) -> double

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getMaxValueInCrudeMatrix(self)

    def getCrudeMatrix(self):
        """
        getCrudeMatrix(self) -> PyObject

        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getCrudeMatrix(self)

MEDCouplingRemapper_swigregister = _MEDCouplingRemapper.MEDCouplingRemapper_swigregister
MEDCouplingRemapper_swigregister(MEDCouplingRemapper)

def ParaMEDMEMDataArrayDoubleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____iadd___(self, self, *args)
def ParaMEDMEMDataArrayDoubleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____isub___(self, self, *args)
def ParaMEDMEMDataArrayDoubleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____imul___(self, self, *args)
def ParaMEDMEMDataArrayDoubleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____idiv___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____iadd___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____isub___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____imul___(self, self, *args)
def ParaMEDMEMMEDCouplingFieldDoubleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____iadd___(self, self, *args)
def ParaMEDMEMDataArrayIntIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____isub___(self, self, *args)
def ParaMEDMEMDataArrayIntImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____imul___(self, self, *args)
def ParaMEDMEMDataArrayIntIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntImod(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____imod___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____iadd___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____isub___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____imul___(self, self, *args)
def ParaMEDMEMDataArrayDoubleTupleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____iadd___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____isub___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____imul___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____idiv___(self, self, *args)
def ParaMEDMEMDataArrayIntTupleImod(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____imod___(self, self, *args)

DataArrayDouble.__iadd__=ParaMEDMEMDataArrayDoubleIadd
DataArrayDouble.__isub__=ParaMEDMEMDataArrayDoubleIsub
DataArrayDouble.__imul__=ParaMEDMEMDataArrayDoubleImul
DataArrayDouble.__idiv__=ParaMEDMEMDataArrayDoubleIdiv

DataArrayInt.__iadd__=ParaMEDMEMDataArrayIntIadd
DataArrayInt.__isub__=ParaMEDMEMDataArrayIntIsub
DataArrayInt.__imul__=ParaMEDMEMDataArrayIntImul
DataArrayInt.__idiv__=ParaMEDMEMDataArrayIntIdiv
DataArrayInt.__imod__=ParaMEDMEMDataArrayIntImod

MEDCouplingFieldDouble.__iadd__=ParaMEDMEMMEDCouplingFieldDoubleIadd
MEDCouplingFieldDouble.__isub__=ParaMEDMEMMEDCouplingFieldDoubleIsub
MEDCouplingFieldDouble.__imul__=ParaMEDMEMMEDCouplingFieldDoubleImul
MEDCouplingFieldDouble.__idiv__=ParaMEDMEMMEDCouplingFieldDoubleIdiv

DataArrayDoubleTuple.__iadd__=ParaMEDMEMDataArrayDoubleTupleIadd
DataArrayDoubleTuple.__isub__=ParaMEDMEMDataArrayDoubleTupleIsub
DataArrayDoubleTuple.__imul__=ParaMEDMEMDataArrayDoubleTupleImul
DataArrayDoubleTuple.__idiv__=ParaMEDMEMDataArrayDoubleTupleIdiv

DataArrayIntTuple.__iadd__=ParaMEDMEMDataArrayIntTupleIadd
DataArrayIntTuple.__isub__=ParaMEDMEMDataArrayIntTupleIsub
DataArrayIntTuple.__imul__=ParaMEDMEMDataArrayIntTupleImul
DataArrayIntTuple.__idiv__=ParaMEDMEMDataArrayIntTupleIdiv
DataArrayIntTuple.__imod__=ParaMEDMEMDataArrayIntTupleImod

del ParaMEDMEMDataArrayDoubleIadd
del ParaMEDMEMDataArrayDoubleIsub
del ParaMEDMEMDataArrayDoubleImul
del ParaMEDMEMDataArrayDoubleIdiv
del ParaMEDMEMMEDCouplingFieldDoubleIadd
del ParaMEDMEMMEDCouplingFieldDoubleIsub
del ParaMEDMEMMEDCouplingFieldDoubleImul
del ParaMEDMEMMEDCouplingFieldDoubleIdiv
del ParaMEDMEMDataArrayIntIadd
del ParaMEDMEMDataArrayIntIsub
del ParaMEDMEMDataArrayIntImul
del ParaMEDMEMDataArrayIntIdiv
del ParaMEDMEMDataArrayIntImod
del ParaMEDMEMDataArrayDoubleTupleIadd
del ParaMEDMEMDataArrayDoubleTupleIsub
del ParaMEDMEMDataArrayDoubleTupleImul
del ParaMEDMEMDataArrayDoubleTupleIdiv
del ParaMEDMEMDataArrayIntTupleIadd
del ParaMEDMEMDataArrayIntTupleIsub
del ParaMEDMEMDataArrayIntTupleImul
del ParaMEDMEMDataArrayIntTupleIdiv
del ParaMEDMEMDataArrayIntTupleImod



